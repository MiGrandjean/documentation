////
; Copyright (c) uib gmbh (www.uib.de)
; This documentation is owned by uib
; and published under the german creative commons by-sa license
; see:
; http://creativecommons.org/licenses/by-sa/3.0/de/
; http://creativecommons.org/licenses/by-sa/3.0/de/legalcode
; english:
; http://creativecommons.org/licenses/by-sa/3.0/
; http://creativecommons.org/licenses/by-sa/3.0/legalcode
; 
; credits: http://www.opsi.org/credits/
////

////
;***************************************************************************
; Subversion:
; $Revision: $ $Author: $
; $Date: $
;***************************************************************************
////

:Author:    uib gmbh
:Email:     info@uib.de
:Date:      20.08.2014
:Revision:  4.0.5
:toclevels: 6


include::../common/opsi_terms.asciidoc[]

[[opsi-manual-uefi]]
== opsi with UEFI / GPT


[[opsi-manual-uefi-preconditions]]
=== Preconditions for working with UEFI / GPT

This module currently is a
http://www.opsi.org/en/opsi-extensions[co-funded opsi extension]. +
Some preconditions are required to work with that module, which is to get a suitable modules file to unlock the feature. You can get this unlock file by purchasing the extension module. For evaluation you can get a time limited modules unlock file without charge. ( -> mail to info@uib.de). +
////
For further details see <<opsi-manual-modules>>.
////

Technical requirements are opsi 4.0.5 with packet versions:

.required packets
[options="header"]
|==========================
|opsi packet|version
|Netboot products|>=4.0.5
|opsi server packets|>=4.0.5
|==========================


[[opsi-manual-uefi-introduction]]
=== Introduction

Recent PCs, tablets and server often are equpped with an UEFI BIOS. Often there is a legacy mode available to support the old features including PXE boot. But more and more devices come with an UEFI only BIOS (especially tablets). So they cannot be managed with the previous opsi environment.

To integrate these devices into opsi and to be able to use the advantages of UEFI, the uib gmbh developed the opsi extension for UEFI support.

[[opsi-manual-uefi-whatisuefi]]
=== What is UEFI and what is different about it?

UEFI is the abbreviation of 'Unified Extensible Firmware Interface' and is the follow-up to the classic PC-BIOS (MBR-BIOS).

For detailled information on UEFI there are some links listed below.

UEFI has much more features than the old BIOS. Basically UEFI is a small operating system by itself. But in this place, we just consider some features, that are of special interes to the system administrator:

* The recent (by January 2014) implementations of UEFI by the hardware manufacturers have not developed any clear standards yet. As soon as the system is to be booted from any other device but the hard disc, you face the utter chaos. Often UEFI and classic BIOS are implemented both, sometimes they can be deactivated individually, or sometimes not. UEFI can be implemented with the Compatibility Support Module (CSM), or without. Netboot might work, or might not. +
Especially the availability of netboot is essential for structurd client management.

* With the classic PC-BIOS the BIOS and its configuration usually are separated from the operating system. So BIOS configurations like the boot sequence cannot be changed by the operating system. +
This is different with UEFI. The operating system can change the boot sequence (and usually it does). This has consequences for a client management that relies on netboot.

* The UEFI Bios comes with its own boot manager, which not only can be used by the operating systems to change the boot sequence, but also contains the start entries for the operating systems themselves. This is to support the parallel installation of different operating systems, so that there is no conflict with the different boot loaders.

* The UEFI BIOS can be implemented for 32 or 64 bit, which also presets a 32 or 64 bit operating system. So there cannot be installed a 32 bit OS on a 64 bit UEFI system.

* Secureboot (not supported yet by opsi)

* partitioning with GPT and additional partitions for the bootloader:

** 1. partition: EFI system partition (ESP) 100 - 260 MByte ; VFAT
** 2. partition: Microsoft reserved (MSR) 32 - 128 MB; NTFS
** following the actual OS partitions



Links : 

http://de.wikipedia.org/wiki/Unified_Extensible_Firmware_Interface

[[opsi-manual-uefi-whatisgpt]]
=== What is different about GPT

GPT (GUID Partition Table) id the follow-up for the previous MBR partition tables. GPT is part of the UEFI specification. 

The main features for the sysadmin are::

* overriding the 2 Terabyte limit (now it is 8 Zebibyte)

* almost unlimited number of primary partitions

* changed partition types / GUIDs

* new: partition GUIDs

* new: partition attributes (hidden, read only, ...)

* different tools: gdisk

Basically GPT can be used without UEFI. But UEFI depends on GPT. With UEFI there are up to two additional partitions:

. the EFI system partition (ESP) with the bootloaders

. Microsoft reserved (MSR)

Links : 

http://de.wikipedia.org/wiki/GUID_Partition_Table

[[opsi-manual-uefi-uefiboot]]
=== UEFI Boot

In contrary to the old BIOS the boot sequence not only can be defined for devices, but also can be set for different bootloaders on the EFI system partition. Furthermore the sequence can be changed by a running operating system. So if you set netboot as the first boot priority, this setting will not survive the first OS installation.

[[opsi-manual-uefi-uefinetboot]]
=== UEFI Netboot

Unfortunately early UEFI implementations do not support netboot at all, but netboot support is increasing. 

Meanwhile there are a lot of UEFI bootloader (like grub2 or elilo), but mostly without netboot support. 

With the UEFI support extension module uib gmbh has developed a succesfull UEFI netboot support for integrating UEFI clients into opsi. Because the UEFI standard is still under development and changing, in future the opsi UEFI module will continue to adapt to the technical changes, which might require structural redesigns of the module.

[[opsi-manual-uefi-opsiuefinetboot]]
=== opsi support for UEFI netboot

The opsi support for UEFI is based on several components:

* adaption of the netboot UEFI bootloader ELILO to the opsi / client-management requirements.

* new opsipxeconfd, which also supports config files for the opsi-ELILO (in addition to the PXE config).

* new (64 bit) opsi-linux-bootimage with the tools for UEFI- and GPT management

* redesigned netboot products for OS installation (Windows/Linux) with additional support of UEFI/GPT (of course only for OS that support UEFI). 

* client setting on the opsi-server whether to be treated as UEFI client or not.  (clientconfig.dhcpd.filename=linux/pxelinux.cfg/elilo.efi)

* support of a software triggered switch to UEFI netboot. +
The label of the UEFI netboot entry of the Bios can be saved on the opsi-server (clientconfig.uefinetbootlabel), as far as the BIOS supports it (so there is an activatable netboot entry in the Bios). This allows opsi-product to enbale netboot selective for the next reboot. This technique is implemented in several opsi products. An important example is the product `opsi-uefi-netboot`: +
This product tries to configure the Bios for netboot and then triggers a reboot. If there is no `uefinetbootlabel` or it is a non UEFI client, just a reboot is triggered. +
This product is available for Windows and for Linux.

[[opsi-manual-uefi-install]]
=== Installation

Alle notwendigen Pakete sind ab der opsi Version 4.0.5 automatisch installiert.

[[opsi-manual-uefi-dhcpd]]
=== Konfiguration des DHCP Servers

Beispiel aus einer Konfiguration eines Linux isc-dhcp-server:

----
filename "linux/pxelinux.0";

# Das ist die UEFI Detection:
if substring (option vendor-class-identifier , 19,1 ) = "0" {
        log (info, "pxe client");
        filename "linux/pxelinux.0";
}
else if substring (option vendor-class-identifier , 19,1 ) = "6" {
        log (info, "efi32 client");
        filename "linux/pxelinux.cfg/elilo32.efi";
}
else if substring (option vendor-class-identifier , 19,1 ) = "7" {
        log (info, "efi64 client");
        filename "linux/pxelinux.cfg/elilo.efi";
}
else {
        log (info, concat ( "Unhandled vendor class Arch: ", substring (option vendor-class-identifier , 19,1 )));
}
----

http://docs.fedoraproject.org/en-US/Fedora/17/html/Installation_Guide/s1-netboot-pxe-config.html

[[opsi-manual-uefi-goodbios]]
=== Kriterien für ein 'gutes' BIOS

Ob ein UEFI BIOS für die Anforderungen eines Client-Management-Systems wie opsi geeignet ist, hängt von verschiedenen Kriterien ab. Diese Kriterien sagen nichts  über die Qualität des Gerätes als solches aus, sondern nur über seine Wartbarkeit per Netboot-Anbindung. Es geht hier also um die BIOS-Funktionen zum UEFI Netboot. Hier ein beispielhafter Vergleich :

.Beispiele für UEFI BIOS Unterschiede
[options="header"]
|==========================
||Lenovo Twist|MS-Surface|Dell Venue 11
|UEFI pur|√|√|√
|UEFI + CSM|√|x|√
|Legacy|√|x|√
|Both|√|x|x
|UEFI Netboot|√|√|√
|Aktivierbarer Eintrag|√|x|√
|Netboot ohne Interaktion|√|x|√
|==========================

Unter 'Aktivierbarer Eintrag' verstehen wir, das sich per Standard-Software ein Netboot für den nächsten Reboot aktivieren läßt. 'Netboot ohne Interaktion' bedeutet, dass ein aktivierter Netboot-Eintrag beim Reboot ausgeführt wird und dazu keine Interaktion (drücken von Tastenkombinationen, F12-Taste, ...) nötig sind. Sind diese Vorausetzungen gegeben können bestimmte opsi Produkte einen Netboot auslösen. Dies ist für die automatisierung von Abläufen von großer Bedeutung. Ein Produkt in dem dies implementiert ist ist das Localbootprodukt für Windows und Linux `opsi-uefi-netboot`.

[[opsi-manual-uefi-technical]]
=== Technisches

Die folgenden Unterkapitel dienen als Wissensbasis zu dem händigen oder gescripteten Umgang mit UEFI / GPT. Zum Vertändnis wie opsi mit UEFI/GPT arbeitet sind sie nicht erforderlich.

[[opsi-manual-uefi-technical-uefi]]
==== Technisches zu UEFI

Manipulation der UEFI Bootloader Einträge passiert unter Linux mit dem Programm `efibootmgr`. +
Liste der Booteinträge:

[source,prompt]
----
efibootmgr -v
BootCurrent: 000D
Timeout: 0 seconds
BootOrder: 0012,0011,000D,0010,000B,0009,0007,0008,000A,000C
Boot0000  Setup	
Boot0001  Boot Menu	
(..)
Boot0007* USB CD	030a2400d23878bc820f604d8316c068ee79d25b86701296aa5a7848b66cd49dd3ba6a55
Boot0008* USB FDD	030a2400d23878bc820f604d8316c068ee79d25b6ff015a28830b543a8b8641009461e49
Boot0009* ATA HDD0	030a2500d23878bc820f604d8316c068ee79d25b91af625956449f41a7b91f4f892ab0f600
Boot000D* PCI LAN	030a2400d23878bc820f604d8316c068ee79d25b78a84aaf2b2afc4ea79cf5cc8f3d3803
Boot0010* ubuntu	HD(1,800,31801,faffb7b9-bdf9-4767-b475-0b8aee68d3ac)File(\EFI\ubuntu\grubx64.efi)
Boot0011* opsitempwinpe	HD(4,3c72800,7cf801,dc1cea68-a296-4fb8-a97a-263227ed86f4)File(\EFI\boot\bootx64.efi)
Boot0012* Windows Boot Manager	HD(1,800,31801,5e4ffde2-3e25-42dd-b0f7-fcb7ee5d2b20)File(\EFI\Microsoft\Boot\bootmgfw.efi)WINDOWS.........x...B.C.D.O.B.J.E.C.T.=.{.9.d.e.a.8.6.2.c.-.5.c.d.d.-.4.e.7.0.-.a.c.c.1.-.f.3.2.b.3.4.4.d.4.7.9.5.}...a................
----

Manipulation der UEFI Bootloader Einträge passiert unter Windows mit dem Programm `bcdedit`. +
Liste der Booteinträge:


[source,prompt]
----
bcdedit /enum firmware 

Start-Manager für Firmware
- - - - - - - - - - - - - - -
Bezeichner              {fwbootmgr}
displayorder            {bootmgr}
                        {99a9f9be-9a98-11e3-b22f-806e6f6e6963}
                        {11a8b97e-99df-11e3-ae5c-b888e3e3cbb4}
                        {11a8b986-99df-11e3-ae5c-b888e3e3cbb4}
Windows-Start-Manager
- - - - - - - - - - - - - - -
Bezeichner              {bootmgr}
device                  partition=\Device\HarddiskVolume1
path                    \EFI\Microsoft\Boot\bootmgfw.efi
Firmwareanwendung (101fffff)
- - - - - - - - - - - - - - -
Bezeichner              {11a8b971-99df-11e3-ae5c-b888e3e3cbb4}
description             Setup
Firmwareanwendung (101fffff)
- - - - - - - - - - - - - - -
Bezeichner              {11a8b972-99df-11e3-ae5c-b888e3e3cbb4}
description             Boot Menu
(...)
Firmwareanwendung (101fffff)
- - - - - - - - - - - - - - -
Bezeichner              {11a8b978-99df-11e3-ae5c-b888e3e3cbb4}
description             USB CD
Firmwareanwendung (101fffff)
- - - - - - - - - - - - - - -
Bezeichner              {11a8b979-99df-11e3-ae5c-b888e3e3cbb4}
description             USB FDD
Firmwareanwendung (101fffff)
- - - - - - - - - - - - - - -
Bezeichner              {11a8b97a-99df-11e3-ae5c-b888e3e3cbb4}
description             ATA HDD0
Firmwareanwendung (101fffff)
- - - - - - - - - - - - - - -
Bezeichner              {11a8b97e-99df-11e3-ae5c-b888e3e3cbb4}
description             PCI LAN
Firmwareanwendung (101fffff)
- - - - - - - - - - - - - - -
Bezeichner              {99a9f9be-9a98-11e3-b22f-806e6f6e6963}
device                  partition=X:
path                    \EFI\boot\bootx64.efi
description             opsitempwinpe
----

Mit beiden Programmen lassen sich Einträge erstellen, löschen, der 'nextboot' setzen und die Reihenfolge manipulieren.

Beispiel: Eintrag für den nächsten Boot setzen:

Linux
[source,prompt]
----
efibootmgr /bootnext <hexId>
----

Windows
[source,prompt]
----
bcdedit /set {fwbootmgr} bootsequence <GUID>
----

[[opsi-manual-uefi-technical-gpt]]
==== Technisches GPT

GPT Partitionen kennen 'neue' Partitionstypen. Diese sind an die bisher bekannten angelehnt. So wird aus dem Partitionstyp für NTFS `07` unter GPT `0700`. Analog wird aus den Linux Partitionstypen `82` und `83` entsprechend `8200` und `8300`.

Die Liste der bekannten Partitionstypen kann man sich anzeigen lassen:
[source,prompt]
----
# sgdisk -L
0700 Microsoft basic data  0c01 Microsoft reserved    2700 Windows RE
4100 PowerPC PReP boot     4200 Windows LDM data      4201 Windows LDM metadata
7501 IBM GPFS              7f00 ChromeOS kernel       7f01 ChromeOS root
7f02 ChromeOS reserved     8200 Linux swap            8300 Linux filesystem
8301 Linux reserved        8302 Linux /home           8400 Intel Rapid Start
8e00 Linux LVM             a500 FreeBSD disklabel     a501 FreeBSD boot
a502 FreeBSD swap          a503 FreeBSD UFS           a504 FreeBSD ZFS
a505 FreeBSD Vinum/RAID    a580 Midnight BSD data     a581 Midnight BSD boot
a582 Midnight BSD swap     a583 Midnight BSD UFS      a584 Midnight BSD ZFS
a585 Midnight BSD Vinum    a800 Apple UFS             a901 NetBSD swap
a902 NetBSD FFS            a903 NetBSD LFS            a904 NetBSD concatenated
a905 NetBSD encrypted      a906 NetBSD RAID           ab00 Apple boot
af00 Apple HFS/HFS+        af01 Apple RAID            af02 Apple RAID offline
af03 Apple label           af04 AppleTV recovery      af05 Apple Core Storage
be00 Solaris boot          bf00 Solaris root          bf01 Solaris /usr & Mac Z
bf02 Solaris swap          bf03 Solaris backup        bf04 Solaris /var
bf05 Solaris /home         bf06 Solaris alternate se  bf07 Solaris Reserved 1
bf08 Solaris Reserved 2    bf09 Solaris Reserved 3    bf0a Solaris Reserved 4
bf0b Solaris Reserved 5    c001 HP-UX data            c002 HP-UX service
ea00 Freedesktop $BOOT     eb00 Haiku BFS             ed00 Sony system partitio
ef00 EFI System            ef01 MBR partition scheme  ef02 BIOS boot partition
fb00 VMWare VMFS           fb01 VMWare reserved       fc00 VMWare kcore crash p
fd00 Linux RAID
----

Tatsächlich sind diese hiergezeigten Partitionstypen nur 'Abkürzungen' für die eigentlich verwendeten GUID's welche dem Partitionierungsschema den Namen gegeben haben.

Also:
`0700` steht für `Microsoft basic data` und für die GUID `EBD0A0A2-B9E5-4433-87C0-68B6B72699C7`

Eine Liste der GUID's findet sich z.B. bei Wikipedia:

https://de.wikipedia.org/wiki/GUID_Partition_Table#Partitionstyp-GUIDs

https://en.wikipedia.org/wiki/GUID_Partition_Table#Partition_type_GUIDs

Weiterhin kennt das Werkzeug gdisk (und sgdisk, ...) eine interne Ersetzungstabelle für unbekannte Partitionstypen. So gibt es für den 'alten' Partionstyp für vfat32 `0b` keine Entsprechung als `0b00`. Übergibt man aber trotzdem `0b00` als Typ an sgdisk so wird ohne jede Meldung hieraus `0700`. Dies passiert wohl nach der Überlegung: vfat32 - das wird schon eine Microsoft Daten Partition sein... 

GPT Partitionen kennen Atribute.

Liste der z.Zt. bekannten Attribute

|==========================
|Wert|Beschreibung|Attributwert (sgdisk --info / diskpart gpt attribute)
|nix|nix																						|0000000000000000
|0 	|Systempartition (system partition)             |0000000000000001
|1 	|Verstecke die Partition vor EFI (hide from EFI)|0000000000000002
|2 	|Legacy Bootflag (legacy BIOS bootable)         |0000000000000004
|60 |Nur lesen (read-only)                          |1000000000000000
|62 |Versteckt (hidden)                             |4000000000000000
|63 |Nicht Einhängen (do not automount)             |8000000000000000
|==========================

Die attribute werden unter Linux bei sgdisk über die Option `-A, --attributes` unter Verwendung der Kurzform  und unter Windows über diskpart mit dem Befehl `gpt attributes` unter Verwendung der Langform gesetzt.

Beispiele:
[source,prompt]
----
select disk 0
select partition 1
gpt attributes=0x0000000000000000
----

[source,prompt]
----
sgdisk -t 1:0700 --attributes 1:clear:63 --attributes 1:set:62 -p /dev/sda
----

Anzeigen der Partitionstabelle mit `-p , --print`:
[source,prompt]
----
sgdisk -p /dev/sda
----

Anzeigen der Detailinfos zu einer Partition (1) mit `--info=`:
[source,prompt]
----
sgdisk --info=1 /dev/sda
----

[[opsi-manual-uefi-roadmap]]
==== opsi UEFI/GPT Roadmap

* UEFI 32 Bit Unterstützung

* Andere netbootfähige UEFI Bootloader (grub2)

* Secureboot

