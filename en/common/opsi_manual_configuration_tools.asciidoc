////
; Copyright (c) uib gmbh (www.uib.de)
; This documentation is owned by uib
; and published under the german creative commons by-sa license
; see:
; http://creativecommons.org/licenses/by-sa/3.0/de/
; http://creativecommons.org/licenses/by-sa/3.0/de/legalcode
; english:
; http://creativecommons.org/licenses/by-sa/3.0/
; http://creativecommons.org/licenses/by-sa/3.0/legalcode
; 
; credits: http://www.opsi.org/credits/
////

:Author:    uib gmbh
:Email:     info@uib.de
:Date:      20.7.2011
:Revision:  4.0.1
:toclevels: 6


include::../common/opsi_terms.asciidoc[]


[[opsi-manual-configuration-tools]]
== opsi configuration and tools

[[opsi-manual-configuration-tools-introduction]]
=== Overview

The configuration of opsi requires some data management. All non-server components are using a web service for data exchange with the opsi server. They exchange data via the 'opsiconfd', and the 'opsiconfd' forwards the data to the backend manager which passes the data into the selected backend.

opsi supports different backends: Backends:

* File based
* LDAP based
* MySQL based

Using the file backend the data are stored in ini like text files.

.Scheme: opsi with file backend
image::../images/opsi_with_file_backend.png["Scheme: opsi with file backend", width=432]

Using the mysql or ldap backend the data are stored in specific data objects.

.Scheme: opsi with SQL / LDAP backend
image::../images/opsi_with_sql_ldap_backend.png["Scheme: opsi with SQL / LDAP backend", width=430]


More details you will find at 
////
<<opsi-manual-backends>>.
////

.Scheme: backend layers and access control
image::../images/opsibackend_configuration_layers.png["Scheme: backend layers and access control", width=400]

The in opsi 3 used directory `/etc/opsi/backendManager.d` isn't used in opsi 4 anymore.

The configuration files in `/etc/opsi/backends` define the backends.

Which backend is used for which data, is configured in the file
`/etc/opsi/backendManager/dispatch.conf`.

The file `/etc/opsi/backendManager/acl.conf` defines who has access to which
methods.

Below the directory `/etc/opsi/backendManager/extend.d` there could be files
which defines extended opsi methods. So you will find here for example the files which define the old opsi 3 'legacy' methods by mapping them to the new opsi 4 methods (`/etc/opsi/backendManager/extend.d/20_legacy.conf`).

A more detailed reference of these configuration files you will find at 
////
<<opsi-manual-important-files-etc>>.
////

[[opsi-manual-configuration-tools-opsi-setup]]
=== Tool: opsi-setup

This program is something like the 'swiss army knife' of the opsi configuration. It is used by the opsi installation scripts and can be also called separately for maintanace and repair purpose.

The tasks of opsi-setup are:

* register a opsi-server as depot server
* correct file access rights
* initialize data storage backends
* upgrade backend (from 3.4 to 4.0)
* setup of the MySQL-backend
* edit the default configurations
* cleanup the current backend(s)
* configure the essential samba shares
* configure the essential dhcp entries


The command `opsi-setup --help` shows the program options:

[source,prompt]
----
opsi-setup --help

Usage: opsi-setup [options]

Options:
   -h, --help  show this help
   -l          log-level 0..9

   --log-file <path>          path to log file
   --ip-address <ip>          force to this ip address (do not lookup by name)
   --register-depot           register depot at config server
   --set-rights [path]        set default rights on opsi files (in [path] only)
   --init-current-config      init current backend configuration
   --update-mysql             update mysql backend
   --update-ldap              update ldap backend
   --update-file              update file backend
   --configure-mysql          configure mysql backend
   --edit-config-defaults     edit global config defaults
   --cleanup-backend          cleanup backend
   --auto-configure-samba     patch smb.conf
   --auto-configure-dhcpd     patch dhcpd.conf  
----

The functions and options in detail:

* `--ip-address <ip>` +
Sets the ip-address for '{opsi-server}' and do not resolve by name.

* `--register-depot` +
This option is used to register a '{opsi-server}' as depot server to a other '{opsi-server}' ('{opsi-configserver}'). For details see
////
<<opsi-manual-multidepot-installation>>. 
////

* `--set-rights [path]` +
Sets the file access rights in all opsi directories:
+
** `/tftpboot/linux`
** `/home/opsiproducts`
** `/var/log/opsi`
** `/var/lib/opsi`
** `/opt/pcbin/install`
** `/etc/opsi`
+
You may give a directory name as argument to set only the access rights below this directory. +
e.g. +
`opsi-setup --set-rights /opt/pcbin/install/winxppro/drivers` 

* `--init-current-config` +
initialize the configured backend. Should be always called after changing the file +
`/etc/opsi/backendManager/dispatch.conf` 

* The three commands: +
`--update-mysql` +
`--update-ldap` +
`--update-file` +
 are used to upgrade the backends from one opsi release to the next one. +
For details see the 'releasenotes-upgrade-manual'.

* `--configure-mysql` +
does the first time database setup. +
////
See <<opsi-manual-backends-mysql-initializing>>.
////

* `--edit-config-defaults` +
To edit the default values of some configuration data like in the 'server configuration' of the opsi-configed.





* `--edit-config-defaults` +
To edit the default values of some configuration data like in the 'server
configuration' of the '{opsi-configed}'.
+
.Dialog: `opsi-setup --edit-config-defaults`
image::../images/opsi-setup_editconfigdefaults.png["Dialog: opsi-setup --edit-config-defaults", width=400]
+
e.g.:
+
clientconfig.depot.id :: The name of the default depot server.
+
license-management.use :: Defines if netboot products should get license keys from license management or from product properties.
+
product_sort_algorithm :: Defines the algorithm which is used to calculate the product installation sequence.

* `--cleanup-backend` +
Check the current backend(s) for entries which are not needed anymore and
referential integrity

* `--auto-configure-samba` +
Creates the opsi share entries in the `/etc/samba/smb.conf` configuration file

* `--auto-configure-dhcpd` +
Creates the by opsi needed entries in the `/etc/dhcp3/dhcpd.conf. +
Don't use this if you not plan to use the dhcpd on the opsi server. +
More details in the 'opsi-getting-started' manual

[[opsi-manual-configuration-tools-opsi-configed]]
=== Tool: Management Interface: '{opsi-configed}'

[[opsi-manual-configuration-tools-opsi-configed-preconditions]]
==== Requirements and operation

The '{opsi-configed}' requires Java 1.6 and a running `opsiconfd` on the server.

If you are running the '{opsi-configed}' on a Linux based machine, so make sure that your Java is the 'Sun' Java Version. The often installed OpenJDK or other versions may lead to subtil errors. So you have to install the Sun Java and configure it as the default Java:

[source, prompt]
----
update-alternatives –config java 
----

The command

[source, prompt]
----
java -version
----

should lead to the following output: 

[source, prompt]
----
java version "1.6....
Java(TM) SE Runtime Environment ...
----

Most times the opsi-configed will be called as applet in the browser via:
`https://<servername>:4447/configed`


The '{opsi-configed}' as application is also part of the opsi product 'opsi-adminutils' and may then be started via the windows start menue. At the server the '{opsi-configed}' is installed as part of the opsi-server installation. It may be started using the menue entry or with the command `/usr/bin/opsi-configed`.

If you in the correct directory, it also can be started with `java -jar configed.jar`.

The help option `java -jar configed.jar --help` shows the available command line options.

[source, prompt]
----
P:\install\opsi-adminutils>java -jar configed.jar --help
starting configed
default charset is windows-1252
server charset is configured as UTF-8

configed [OPTIONS]...

Options:
     -l, --locale    Set locale (format: <language>_<country>)
     -h, --host      Configuration server to connect to
     -u, --user      Username for authentication
     -p, --password  Password for authentication
     -d, --logdirectory Directory for the log files
         --help      Show this text
----

[[opsi-manual-configuration-tools-opsi-configed-login]]
==== Login

.'{opsi-configed}': login mask
image::../images/opsi-configed-login.png["opsi-configed: login mask", width="90mm"]

At login time the opsi-configed tries to connect the opsi server via https. The login is done with the given parameters 'opsi server[:Port]' (default port 4447 – opsiconfd) and the User/Password of the '{opsi-configserver}' account. For a successful login the provided user has to be a member of the unix-group 'opsiadmin'.

[[opsi-manual-configuration-tools-opsi-configed-copy]]
==== Copy & Paste, Drag & Drop

You may copy the selected entries from nearly every section of the '{opsi-configed}' to the clipboard using the standard key combinations ('Strg-Insert', 'Strg-C'). This may be used to transfer interesting data to other programs. For the most tables you may also use 'Drag & Drop' to copy the data to programs like 'Excel'.

NOTE: Since Java version 1.6.24 Oracle has deactivated the 'Copy & Paste' to and from the system clipboard from a not signed Java Applet for security reasons. The opsi configed applet is delivered with signature since version 4.0.1.11, and has now full system access.


[[opsi-manual-configuration-tools-opsi-configed-mode-selection]]
==== Client configuration / server configuration / license management

To switch between the different views of the '{opsi-configed}', use the buttons in the upper right corner.

.{opsi-configed}:  Buttons for (from left to right): Client configuration, Server configuration, License management
image::../images/opsi-configed-mode-selection.png["{opsi-configed}:  Buttons for (from left to right): Client configuration, Server configuration, License management", width="50mm"]

[[opsi-manual-configuration-tools-opsi-configed-depot-selection]]
==== Depot selection

All '{opsi-depot}s' integrated with your server are listed in the upper left corner of the '{opsi-configed}'. By default the '{opsi-depot}' on your '{opsi-config-server}' is selected and the clients belonging to this '{opsi-depot}' are shown. If you select multiple '{opsi-depot}s' (in the usual manner of multi-item-selection in a list , eg. with shift/ctrl + click) you have to 'reload all data' (from the File menu) for getting any effects. If the selected server set is not synchronous (and can therefore not be handled on common grounds) your are told so. Otherwise the client list of the combined depots is shown, and their configurations may be edited. 

.'{opsi-configed}': depot selection
image::../images/opsi-configed-mode-depotselection.png["{opsi-configed}: depot selection", width="52mm"]


[[opsi-manual-configuration-tools-opsi-configed-client-selection]]
==== Single client selection and group configuration

After a successful login the main window pops up and shows the tab 'Client selection'. 
This tab shows a list of known clients from the selected '{opsi-depot}' resp. the clients 
which are selected using the 'treeview control' on the left side of the '{opsi-configed}'.
////
<<opsi-manual-configuration-tools-opsi-configed-treeview>>
////


.'{opsi-configed}': client selection mask
image::../images/opsi-configed-clientselection.png["{opsi-configed}: client selection mask", width=400]


You may select a line of the list not only by manual scrolling and selecting but also 
by a String search. This requires that you enter a String into the search field at the top of the list 
In der Liste kann eine Zeile auch über die Suche nach einem Stringwert ausgewählt werden. 

How the search works is determined by the selected elements in two drop down lists:

Via field selection you decides if 

* all fields (more precisely, all fields that are occuring as columns) are searched (default), or

* only one field  (and which one) is searched.

Concerning the method of search you have to choose if a hit is defined 

* as occurrence of the search string anywhere in a field value (partial String search, default),

* as occurrence of the search string at the beginning of a field value

* as a pattern match in a regular expression search where the search string serves as the pattern (for experts, based 
on the java pattern matching).

The enter key leads to the next search hit. More selection functions based on String search are shown in the context menu 
of the search field.

.'{opsi-configed}': Search function in the client selection list 
image::../images/opsi-configed-clientselection-search.png["{opsi-configed}: Client search", width=200 ]



[[opsi-manual-configuration-tools-opsi-configed-client-selection-table]]
===== The clients list

The clients list has per default the columns 'client name', 'description', 'on', 'IP address'   and 'last seen'. 

* 'client name' is the 'full qualified hostname' which is the client name including the domain name

* 'description' is a free selectable description which you can edit in the right top part of the window

* 'On' shows after clicking the button 'Check wich clients are connected' the result of this query.


.'{opsi-configed}': Button 'Check which clients are connected'
image::../images/opsi-configed-connected.png["{opsi-configed}: Button: Check which clients are connected", width="40"]


* 'IP address' shows the IP number to which the opsi server resolves the client name. 

* 'last seen' shows the date and a time of the last client connect to the opsiconfd web service

Some columns are deactivated by default:

* 'session infos' (data as retrieved from the operating system running on the specific client)

* 'Inventory No' (displaying some optionally entered data)

* 'created' (date and time of client creation)

* 'opsi mac address' (hardware address of the client as used by opsi)

You may activate these columns using the context menu. The configuration which columns are activated may be changed using the entry 'configed.host_displayfields' in the
server configuration.

.'{opsi-configed}': change the default for visible columns in the clients list
image::../images/opsi-configed-config-host-displayfields.png["{opsi-configed}: change the default for visible columns in the clients list", width="82mm"]

Adding the column 'session infos' enables the button "request session infos from all clients" in the button panel.

.'{opsi-configed}': Button 'Sessioninfo?'
image::../images/opsi-configed-sessioninfo.png["{opsi-configed}: Button SessionInfo?", width="40"]


When this button is clicked  the '{opsiconfd}' tries to connect to all clients and to retrieve data of the 
active user sessions. From the result, the account names are shown in the column 'session infos'.
Instead of using the button you may start the request only for the selected clients via the context menu
or the main menu entry 'OpsiClient'. By this, waiting for the network timeouts is avoided.

Since the search function for the client list works (if not configured otherwise) on all displayed columns
you may now find out which is the client belonging to a logged in user (with known account name).






To sort the clients by a certain column click on the top header of that column.


[[opsi-manual-configuration-tools-opsi-configed-client-selection-selecting]]
===== Selecting clients

You can select one or multiple clients to work with. The client view can be restricted to the selected clients by clicking the funnel icon or from the menu by 'Grouping / Show only selected clients'.

A selected client group can be saved with the icon 'Save grouping' or from the menu by 'Grouping / save group' with a free selectable name.

You can use the mouse to add the selected clients to an existing group (by dragging them to an existing group which is displayed in the tree view).

In the client selection dialog (as called via menu 'Selection / Define search') clients can be selected using a variety of criteria  based on their configurations.

.'{opsi-configed}': Auswahldialog
image::../images/configed_clientselection.png["{opsi-configed}: Define Client Search Window", width="73mm"]

E.g., it is possible to search for opsi installed products as well as software as found by the opsi software audit. You may as well search for 
PCs satisfying certain hardware conditions. Criteria may be combined by logical 'and' or 'or' operations and may be negated. 
Search strings can be given as fixed strings combined with asterisks '*' as wildcard symbols. 

Search definitions can be saved and then again used via the menu item 'Selection/Use saved search definition'. 

.'{opsi-configed}': Saved Search
image::../images/configed_clientselection2.png["{opsi-configed}: Saved Searches"]

It is also possible to run a saved search from the command line when the opsi-configed editor is started.  By including the flag "-qs" and the name of the saved search, the configuration editor will start 
with the saved search results.  If the name is omitted, then a list of available searches will be displayed.  


[[opsi-manual-configuration-tools-opsi-configed-treeview]]
==== Client selection and hierarchical groups using the treeview

Since opsi 4.0 it is possible to manage groups and clients using a tree view control on the left side of the '{opsi-configed}'. A second enhancement is the possibility of hierarchical groups (groups in groups). This tree view feature is part of a co-funding project and runs only with a valid  activation file. A activation costs 500 €. For evaluation please contact info@uib.de.
The tree view control has base node 'ALL' with all groups and clients beyond..


[[opsi-manual-configuration-tools-opsi-configed-treeview-principle]]
===== Basic concepts

The tree view control has base node 'ALL' with all groups and clients beyond. Ther is a other node 'Groups' which is the bas group for all other self defined groups.

.'{opsi-configed}': Treeview with clients and groups
image::../images/opsi-configed-treeview1.png["{opsi-configed}: Treeview with clients and groups", width="66mm"]

There is a additional group 'REPORTED_FAILURES' which contains all clients, which have a action result 'failed'.

Every known client is alwas in the group 'ALL'. Add itionally a client may be in one or more other groups. You may build up different group trees which represent different order critiras like administrative structure, hardware or typical software inventory.

If you select a client, all groups where the selected client belog to get colored marked icons.

[[opsi-manual-configuration-tools-opsi-configed-treeview-howto]]
===== How to ...

By a click one a node (or a group) all clients beyond this node will be shown in the 'Clients' tab, but none of these clients is selected for processing.

By a click one a client, this client will be shown in the 'Clients' tab and selected for processing. You may also use this way to change the selected client while you are in a other tab like product configuration without coming back to the clients tab.

You may use Ctrl-click and Shift-click to select multiple clients.
This tree view control show the groups which are created according the chapter 
////
<<opsi-manual-configuration-tools-opsi-configed-client-selection-selecting>>.
////
You may also create groups by using the context menu above 'ALL' or any existing group. 

.'{opsi-configed}': Using the context menu to create a new subgroup
image::../images/opsi-configed-treeview-generate-group.png["{opsi-configed}: Using the context menu to create a new subgroup", width="49mm"]

You will be asked for the new groups name.

.'{opsi-configed}': Dialog: Group name
image::../images/opsi-configed-treeview-groupname.png["{opsi-configed}: Dialog: Group name", width="46mm"]

A group can be populated with clients using Drag&Drop by

* copying clients from the 'Clients' tab to the group in the tree view 
(left mouse button)
* copying clients from the tree view control below the node 'ALL' to group in the tree view (left mouse button)
* moving clients from a group in the tree view control to a other group in the tree view (left mouse button)
* copying clients from a group in the tree view control to a other group in the tree view (Ctrl-left mouse button)

[[opsi-manual-configuration-tools-opsi-configed-client-editing]]
==== Client processing / Client actions

Using the menu 'OpsiClient' or the context menu in the 'Clients' tab you may choose from a lot of client specific operations

.'{opsi-configed}': : context menu 'Clients' Tab
image::../images/opsi-configed-client-contextmenu.png["{opsi-configed}: : context menu 'Clients' Tab", width="51mm"]

[[opsi-manual-configuration-tools-opsi-configed-client-editing-wakeonlan]]
===== WakeOnLan ('Wake selected clients')
Choosing this menu entry, you will send the selected clients a WakeOnLan signal.

[[opsi-manual-configuration-tools-opsi-configed-client-editing-ondemand]]
=====  Fire 'on_demand' event (Push Installation)

This menu entry is used to send to the '{opsi-client-agent}' on the selected clients a command to fire the event 'on_demand'. This event will start the processing of the current set action request immediately. All messages will be shown on the active desktop. If the client isn't reachable, you will get a message.

What happens exactly if you fire the event 'on_demand' can be configured in the event 'on_demand' configuration.

[[opsi-manual-configuration-tools-opsi-configed-client-editing-send-message]]
===== Sending messages ('Show popup message')

Choosing the menu entry 'Show popup message' you will get a small edit window where you can type in your message.

.'{opsi-configed}':  opsi message edit mask
image::../images/opsi-configed-client-message-editing.png["{opsi-configed}:  opsi message edit mask", width="51mm"]

By clicking on the red tick you will send the message to the selected clients.

At the selected clients a message window will appear.

.'{opsi-configed}':  opsi message display dialog
image::../images/opsi-configed-client-message-reading.png["{opsi-configed}:  opsi message display dialog", width="53mm"]

[[opsi-manual-configuration-tools-opsi-configed-client-remotecontrol]]
===== Call external remote control tools for selected clients

The option 'Remote Control Software call' in the client context menu as well as the client main menu (since '{opsi-configed}' version 4.0.1.11) is very powerful. It can be used
to use any command that the operating system offers, parametrized e.g. by the client name. 

As an example there are configurations automatically generated which can be used to send a `ping` to the selected client: one
`ping` command that works in Windows environment and one command that requires a Linux X environment. Please observe:
  '{opsi-configed}' calls obviously the command in its environment, i.e., we need the Linux command when the  '{opsi-configed}'
  is running in Linux.
 
.'{opsi-configed}': Choice of Remote Control  call
image::../images/opsi-configed-client-remotecontrol-choice.png["{opsi-configed}: Choice of Remote Control call", width="52mm"]

The selection window has three parts. The upper part lists the names of the existing commands. It follows a line, which shows
the selected command and offers the chance to edit it (if this is allowed). Additionally, the line contains the buttons 
to execute or abandon the action. The third 
text area of the window captures any messages that are returned by the operating system when
calling the command.

These calls offer a quasi infinite range of opportunities. For example, a command can be configured to open
a Remote Desktop connection to the selected client (if it allows such connections). On a Windows system, such a command 
is

`cmd.exe /c start mstsc /v:%host%`

In a Linux environment the following command can be used:

`rdesktop  -a 16 %host%`

In these examples serves `%host%` as a variable, which '{opsi-configed}' automatically replaces
by the value for the selected host. Other variables that can analogously used in the commands are
`%ipaddress%` and `%inventorynumber%`.

If the command is marked by the additional server configuration entry  'editable'  as `true`,
then the command line allows ad hoc editing. For example, you may add a requested password or vary 
the command as needed.

If more than one client is selected the command will be executed in a own thread for each client.

The list of remote control commands 
is editable via server configuration entries (cf. 
<<opsi-manual-configuration-tools-opsi-configed-hostproperties>>).


To define a command `example`, at minimum an entry `configed.remote_control.example` 
(or `configed.remote_control.example.command`) must be generated. The value of property has to be the command
(in which the variables `%host%`, `%ipaddress%` etc. can be used). Additionally, an entry `configed.remote_control.example.description`
can be defined. The value of this entry will be shown as tooltip (if not existing, the command itself will serve as tooltip content). 
Furthermore, a Boolean entry `configed.remote_control.example.editable` can be added. If its value is set to `false` the command 
cannot be edited in the selection window.


.'{opsi-configed}': Editing of remote control commands in the server properties editor
image::../images/opsi-configed-properties-remotecontrol.png["{opsi-configed}: Editing of remote control commands in the server properties editor ", width="110 mm"]



[[opsi-manual-configuration-tools-opsi-configed-client-editing-shutdown]]
===== Shutdown / reboot of selected clients

You may send the selected clients a shutdown or reboot signal. You have to confirm this command at the opsi-configed.

CAUTION: If the client received the signal, it will going down with out any more questions.

[[opsi-manual-configuration-tools-opsi-configed-client-editing-manage]]
===== Delete, create, rename and move clients

You may delete the selected clients from the '{opsi-server}'.

If you choose to create a client, an input mask opens. There you enter or confirm the required data – client name without domain specification, domain name, depot server name. You may add a textual description for this client and notes on this client.

.'{opsi-configed}':  creating a client
image::../images/opsi-configed-client-new.png["{opsi-configed}:  creating a client", width="54mm"]

The mask also contains fields for an optional declaration of the IP-number and the ethernet (MAC) address of a client. If the backend is activated for the configuration of a local dhcp-server (which is not the default setting), this information will be used to make the new client known to the dhcp-server. Otherwise the MAC address will be saved in the backend and the IP-number will be discarded.

You may rename a selected client, you will be asked for the new name.

Moving a client to a different depot-server. If clicked the following windows appears with a list of existing depot-servers 

.'{opsi-configed}': change the depot of a client
image::../images/opsi-configed-client-change-depot.png["{opsi-configed}: change the depot of a client", width="53mm"]

[[opsi-manual-configuration-tools-opsi-configed-productconfiguration]]
==== Product configuration

Switching to the tab 'Product configuration' you get a list of available software packets with its installation status and action status for the selected clients.

.'{opsi-configed}': product configuration mask
image::../images/opsi-configed-localbootproducts.png["{opsi-configed}: product configuration mask", width=400]

If there is a different status for the selected clients this will be marked grey ('undefined'). The list of the selected clients is shown at right on top.

You can also sort the product list by clicking at the column header.
 
This are the columns:

* 'Status' is the last announced state of the product and can hold the values 'installed', 'not_installed', 'unknown'. The table shows an empty cell if the value is 'not_installed'  to improve the usability of the view. The cell becomes grey if a multitude of selected clients is selected and does not share a common value (grey coloring represents the pseudo value 'mixed').

* 'Report' informs about the progress or the result of the last action using the pattern <action result> (<last action>). During an installation process there may be indicated 'installing', afterward e. g. 'failed(setup)' or 'success (uninstall)'.

* The column 'Requested action' holds the information which action is to be executed. Possible values are 'none' (shown by an empty cell) and the action types for which scripts are defined in the product package (possible values are 'setup', 'uninstall', 'update', 'once', 'always', 'custom').

* The field 'Version'  displays the software version number combined  with the opsi package number of the software package installed on the client.

There are two more columns which can be activated via the context menu:

* 'Priority class' displays a priority value that is assigned to the product (highest priority +100, lowest priority -100). It influences the product order when products are installed (by virtue of the product_sort_algorithm)

* The 'position' column displays the product ordering forecast for installation sequences. 

Choose a software product to get more product information in the right part of the window like:

* 'Complete product name': full product name of that software package.

* 'Software/package version': 'software version'-'version of the opsi package'  of the software package (specified in the opsi installation package).

* 'Product description': free text to describe the software.

* 'Hints': free text with advices and caveats for handling the package.

* 'Requirements': A list of other products which the selected product (say 'A') depends on combined with the type of dependency: 'required' means that A requires the other product ('B'), but it doesn't matter whether B is installed before or after A. 'pre-required' means B has to be installed before A. 'post-required' means B needs to be installed A. 'on deinstall' means this action should take place if A be de-installed.

* 'Configuration for client': It is possible to define additional properties for a product. Their values can be evaluated in a setup script to configure the product per client. Because of the intrinsic complexity of a property definition there is a specific GUI element for displaying and editing the table of properties:

[[opsi-manual-configuration-tools-opsi-configed-property-editing]]
==== Property tables with list editor windows

A property table is a two-column table. In each row, the first column contains a property name,  the second column displays the assigned property value(s).

It may be configured that a tool tip is displayed showing some information on the meaning of the property and the default value.

.'{opsi-configed}': property table with tooltip 
image::../images/opsi-configed-editlist1.png["{opsi-configed}: property table with tooltip ", width="63mm"]


If you click at a value a window pops up: the 'list editor' for this property. It shows a value resp. a list of preconfigured values with the current value as selected.

.'{opsi-configed}':  list editor, selection list
image::../images/opsi-configed-editlist2.png["{opsi-configed}:  list editor, selection list", width="55mm"]


Clicking a new value changes the selection.

If the property value list is editable (new values may be added to the existing list resp. existing values changed) the window comes up with an edit field for the new or modified values. 

.'{opsi-configed}': list editor, edit field
image::../images/opsi-configed-editlist3.png["{opsi-configed}: list editor, edit field", width="55mm"]

The most comfortable way to get a new value that is a variant of an existing one is double clicking the existing value in the list. This copies it into the edit field where it can be modified.

As soon as the edit field contains a new value – not yet occuring in the value list – the plus button is activated by which the new value can be added to the list of values.

If multiple values are allowed – as it should be e.g. for the property 'additional drivers' – a value may be added to the set of selected values by Strg-Click . The very same action removes the value from the set. The minus button (since opsi-configed version 4.0.2) clears the selection completely.

When the list has been edited the green check mark turns to red as usual in the opsi-configed. Clicking it takes the new selection as new property value (and finishes editing). Clicking the blue cancel button stops editing and resets the original value.

[[opsi-manual-configuration-tools-opsi-configed-netbootproducts]]
==== Netboot products

The products on tab 'Netboot products' are mainly used to install the client OS (operating system) and are listed and configured like the products on tab 'Product configuration'. 

If for the selected client(s) a netboot product is set to 'setup', the correspondent bootimage will be loaded and executed at the next client reboot.

.'{opsi-configed}': mask to start the bootimage
image::../images/opsi-configed-netbootproducts.png["{opsi-configed}: mask to start the bootimage", width=400]

This is usually done to initiate an OS installation or any other bootimage task (like a memory test etc.) 

[[opsi-manual-configuration-tools-opsi-configed-hardwareinformation]]
==== Hardware information

With this tab you get the last detected hardware information for this client (only available if a single client is selected).

.'{opsi-configed}': Hardware informations for the selected client
image::../images/opsi-configed-hardwareinformation.png["{opsi-configed}: Hardware informations for the selected client", width=400]

[[opsi-manual-configuration-tools-opsi-configed-softwareinventory]]
==== Software inventory

With this tab you get the last known software information for this client (only available if a single client is selected).

.'{opsi-configed}': Software information for the selected client
image::../images/opsi-configed-softwareinventory.png["{opsi-configed}: Software information for the selected client", width=400]


[[opsi-manual-configuration-tools-opsi-configed-logfiles]]
==== Logfiles: Logs from client and server

The client specific log files are stored on the server and visible with the opsi-configed via the Tab 'log files'.

It's also possible to search in the log file (to continue the search press 'F3' or 'n').


.'{opsi-configed}': Display of the log file in the opsi-configed
image::../images/opsi-configed-logfiles.png["{opsi-configed}: Display of the log file in the opsi-configed", width=400]


[[opsi-manual-configuration-tools-opsi-configed-hostproperties]]
==== Host parameters at client and server configuration



There are many configuration options for the opsi server and the opsi clients
that may be set or changed via the tab 'Host parameters'. Theryby, server defaults are 
set in the mode 'server configuration', client specific values 
in the mode 'client configuration' plus manual selection of the 'Host parameters' tab
(see also <<opsi-manual-configuration-tools-opsi-configed-mode-selection>>).

On principle, these configuration entries ('config objects' of the '{opsi-server}') 
are conceived as lists of values. Therefore they are 
edited via the list editor tool (cf. 
<<opsi-manual-configuration-tools-opsi-configed-property-editing>>).

Depending on the specific definition of a configuration object

- the values of a list can be of type text (`Unicode`) or of type `Boolean` (i.e. `true`/`false`);

- the list may have only one element or may be a true list with several members;

- the set of values from which list elements are selected may be fixed or extendible.

New configuration entries of types unicode (extendible) and boolean (fixed) may be created 
via the context menu. It offers also the option to remove existing entries.

The relationship of server and client entries is complicated.

- Server entries hold the defaults for client entries.

- When a server entry (a config object) is deleted the depending client entries (config states) vanish as well.

- Creation of a client entry via '{opsi-configed}' entails the automatic creation of an adequate server default.

- Deletion of a client entry via '{opsi-configed}' removes only the client specific value (if existing) but 
leaves the server default (which will be valid for the client).

- In the moment the  '{opsi-configed}'  does not indicate if a specific client value exists or if the server 
default is used for the client.

- There are configurations objects for which client values may be created and edited but only the server 
objects are used (e.g. the entries for the '{opsi-configed}', starting with 'configed.').



.'{opsi-configed}': Tab Host parameters (Server- and Client configuration)
image::../images/opsi-configed-hostparameters.png["{opsi-configed}: Tab Host parameters (Server- and Client configuration)", width=400]

[[opsi-manual-configuration-tools-opsi-configed-depotconfiguration]]
==== Depot configuration

In the mode 'Properties of depots' you will see the tab 'Depots'. There is a drop down menu to select the depot. After selecting the depot you may change the properties of the '{opsi-depot}'.

see also:
////
<<opsi-manual-configuration-tools-opsi-configed-mode-selection>>)
////

.'{opsi-configed}': Tab Depot configuration
image::../images/opsi-configed-depotconfiguration.png["{opsi-configed}: Tab Depot configuration", width=400]

[[opsi-manual-configuration-tools-opsi-package-manager]]
=== Tool: opsi-package-manager: (de-)installs opsi-packages

The `opsi-package-manager` is used for (de-)installing {opsi-product-packages} on an opsi-server. 

In order to install a {opsi-product-package}, this {opsi-product-package} must be readable for the opsi system user opsiconfd. Therefore it is strongly recommended to install those packages from the directory /home/opsiproducts (or a sub directory).

The log file of the 'opsi-package-managers' you will find at '/var/log/opsi/package.log'.

Install a package (asking no questions):

[source, prompt]
----
opsi-package-manager -i softprod_1.0-5.opsi'
----

Install a package (asking questions):

[source, prompt]
----
opsi-package-manager -p ask -i softprod_1.0-5.opsi
----

Install a package (and switch required action to setup where installed):

[source, prompt]
----
opsi-package-manager -S -i softprod_1.0-5.opsi
----

Deinstall a package (asking no questions):

[source, prompt]
----
opsi-package-manager -r softprod
----

Extract and rename a package:

[source, prompt]
----
opsi-package-manager -x opsi-template_<version>.opsi --new-product-id myprod
----

Calling `opsi-package-manager` with option `--help` gives a listing of possible options.

Please note:

* The option `-d` or `--depots` are reserved for the use in a multi-depot-server environment.

* Using option `-d` the opsi-package will be copied to the `/var/lib/opsi/repository` directory of the target server before installing. Please make sure that there is enough free space on this file system.

see also:
////
<<opsi-manual-multidepot>>
////


[source, prompt]
----
#opsi-package-manager --help

usage: opsi-package-manager [options] <command>                                                                                                          
                                                                                                                                                         
Manage opsi packages                                                                                                                                     
                                                                                                                                                         
Commands:                                                                                                                                                
  -i, --install      <opsi-package> ...      install opsi packages                                                                                       
  -u, --upload       <opsi-package> ...      upload opsi packages to repositories
  -l, --list         <regex>                 list opsi packages matching regex
  -D, --differences  <regex>                 show depot differences of opsi packages matching regex
  -r, --remove       <opsi-product-id> ...   uninstall opsi packages
  -x, --extract      <opsi-package> ...      extract opsi packages to local directory                                                                    
  -V, --version                              show program's version info and exit
  -h, --help                                 show this help message and exit

Options:
  -v, --verbose                    increase verbosity (can be used multiple times)
  -q, --quiet                      do not display any messages
  --log-file         <log-file>    path to debug log file
  -d, --depots       <depots>      comma separated list of depot ids to process
                                      all = all known depots
  -p, --properties   <mode>        mode for default product property values
                                      ask     = display dialog
                                      package = use defaults from package
                                      keep    = keep depot defaults (default)
  --purge-client-properties        remove product property states of the installed product(s)
  -f, --force                      force install/uninstall (use with extreme caution)
  -U, --update                     set action "update" on hosts where installation status is "installed"
  -S, --setup                      set action "setup" on hosts where installation status is "installed"
  -o, --overwrite                  overwrite existing package on upload even if size matches
  -k, --keep-files                 do not delete client data dir on uninstall
  -t, --temp-dir     <path>        tempory directory for package install
  --max-transfers    <num>         maximum number of simultaneous uploads
                                      0 = unlimited (default)
  --max-bandwidth    <kbps>        maximum transfer rate for each transfer (in kilobytes per second)
                                      0 = unlimited (default)
  --new-product-id   <product-id>  set a new product id when extracting opsi package
----

[[opsi-manual-configuration-tools-opsi-productupdater]]
=== Tool: `opsi-product-updater`
The command line utility `opsi-product-updater` is designed to download and install comfortable opsi packages from a repository or a other opsi server. Using the opsi-product-updater make it easy to keep the opsi server up to date. It may be also used in a cronjob to keep depot server in sync with the config server.

[source, prompt]
----
# opsi-product-updater --help

Usage: opsi-product-updater [options]
Options:
    -h    Show this help text
    -v    Increase verbosity (can be used multiple times)
    -V    Show version information and exit
    -c    Location of config file

----

The main features are:

* configurable repositories
* configurable actions

All configuration will be done at the configuration file `/etc/opsi/opsi-product-updater.conf`.

[[opsi-manual-configuration-tools-opsi-productupdater-repositories]]
==== configurable repositories

Repositories are the sources which will be used by the opsi-product-update to fetch new opsi packages

There are two kinds of repostories:

*Internet Repositories*

Example: download.uib.de +
This are repositories which are configured by:

- baseURL (z.B. http://download.uib.de)
- dirs ( A list of directories e.g.. opsi4.0/produkte/essential)
- and if needed username and password for password protected repositories (e.g. for the opsi patch management subscriptions)

You may also configure a proxy here.

*opsi-server*

This is (using a '{opsi-depotserver}') the central '{opsi-configserver}' will be used to fetch the opsi-packages.

The central configuration item is here:

- 'opsiDepotId'

This in most cases on a a '{opsi-depotserver}' the central '{opsi-configserver}'. So on any call of the 'opsi-product-updater' the '{opsi-product-packages}' wil be fechted from the '{opsi-configserver}'. This can be done for example by a cronjob.

[[opsi-manual-configuration-tools-opsi-productupdater-actions]]
==== configurable actions

For each repository you have to configure which actions to run:

* 'autoupdate': Newer versions of installed packages will be downloaded and installed

* 'autoinstall': Also packages which are not installed yet, will be downloaded and installed

* 'autoinstall': For all new installed packages and all clients on which these pacakages are installed the action request will be set to setup.

In addition it is possible to send all these clients a Wake-On-LAN signal to install the new software to the clients. Using the {opsi-product} 'shutdownwanted' you can make shure that the clients will be powered off after the installation.

* time window for autosetup: You can give time window which may be used to that client action requests to setup.

* Automatic WakeOnLan with shutdown: If there is new software Clients could be waked up and shutdown after installation automatically



[[opsi-manual-configuration-tools-opsi-admin]]
=== Tools: opsi-admin / 'opsi config interface'


[[opsi-manual-configuration-tools-opsi-admin-overview]]
==== Overview

opsi V3 introduced an opsi owned python library which provides an API for opsi configuration. The 'opsiconfd' provides this API as a web service, whereas 'opsi-admin' is the command line interface for this API.

Calling https://<opsi-server>:4447/interface in your browser gives you agraphical interface to the '{opsi-webservice}'. You have to login as a member of the unix group 'opsiadmin'.

.opsi config interface: Access to the web service via browser
image::../images/opsi-webinterface2.png["opsi config interface: Access to the web service via browser", width=400]

At the command line 'opsi-admin' provides an interface to the opsi-API. There is a interactive mode and a non interactive mode for batch processing from within scripts.

The help option `opsi-admin --help` shows a list of available command line options:

[source,prompt]
----
# opsi-admin --help

Usage: opsi-admin [options] [command] [args...]
Options:
  -h, --help           Display this text
  -V, --version        Display this text
  -u, --username       Username (default: current user)
  -p, --password       Password (default: prompt for password)
  -a, --address        URL of opsiconfd (default: https://localhost:4447/rpc)
  -d, --direct         Do not use opsiconfd
      --no-depot       Do not use depotserver backend
  -l, --loglevel       Set log level (default: 3)
                       0=nothing, 1=essential, 2=critical, 3=error, 4=warning
                       5=notice, 6=info, 7=debug, 8=debug2, 9=confidential
  -f, --log-file       Path to log file
  -i, --interactive    Start in interactive mode
  -c, --colorize       Colorize output
  -S, --simple-output  Simple output (only for scalars, lists)
  -s, --shell-output   Shell output
----
'opsi-admin' can use the opsi web service or directly operate on the data backend. To work with the web service you have to provide the URL and also an 'username' and 'password'. Due to security reasons you probably wouldn't like to do this from within a script. In that case you'd prefer direct access to the data base using the `-d` option: `opsi-admin -d`.

In interactive mode (start with `opsi-admin -d` or `opsi-admin -d -i -c` or short `opsi-admin -dic`) you get input support with the TAB-key. After some input, with the TAB-button you get a list or details of the data type of the next expected input.

The option `-s` or `-S` generates an output format which can be easily parsed by scripts.

There are some methods which are directly based on API-requests, and there are some 'tasks', which are a collection of function calls to do a more complex special job. 

[[opsi-manual-configuration-tools-opsi-admin-typical-usage]]
==== Typical use cases

[[opsi-manual-configuration-tools-opsi-admin-typical-usage-setup]]
===== Set a product to setup for all clients which have this product installed

[source,prompt]
----
opsi-admin -d task setupWhereInstalled "softprod"
----


[[opsi-manual-configuration-tools-opsi-admin-typical-usage-clientlist]]
===== List of all clients

[source,prompt]
----
opsi-admin -d method host_getIdents
----


[[opsi-manual-configuration-tools-opsi-admin-typical-usage-delete-client]]
===== Client delete

[source,prompt]
----
opsi-admin -d method host_delete <clientname>
----

e.g..:

[source,prompt]
----
opsi-admin -d method host_delete "pxevm.uib.local"
----


[[opsi-manual-configuration-tools-opsi-admin-typical-usage-create-client]]
===== Client create

[source,prompt]
----
opsi-admin -d method host_createOpsiClient <full qualified clientname>
----

e.g.:

[source,prompt]
----
opsi-admin -d method host_createOpsiClient "pxevm.uib.local"
----


[[opsi-manual-configuration-tools-opsi-admin-typical-usage-setProductActionRequest]]
===== Set action request

[source,prompt]
----
opsi-admin -d method setProductActionRequest <productId> <clientId> <actionRequest>
----

e.g.:

[source,prompt]
----
opsi-admin -d method setProductActionRequest win7 pxevm setup
----


[[opsi-manual-configuration-tools-opsi-admin-typical-usage-setHostDescription]]
===== Attach client description

[source,prompt]
----
opsi-admin -d method setHostDescription "dpvm02.uib.local" , "Client unter VMware"
----


[[opsi-manual-configuration-tools-opsi-admin-typical-setPcpatchPassword]]
===== set pcpatch password

[source,prompt]
----
opsi-admin -d task setPcpatchPassword
----

Set the password of user pcpatch for Unix, samba and opsi.


[[opsi-manual-configuration-tools-serverprocesses]]
=== Server processes: opsiconfd and opsipxeconfd

The 'opsipxeconfd' provides the 'named pipes' in the `tftpboot` directories. which are used to control the PXE boot process.

The configuration file is `/etc/opsi/opsipxeconfd.conf`

The log file is `/var/log/opsi/opsipxeconfd.log`.

The 'opsiconfd' provides the opsi API as JSON web service and have a lot of other important tasks. Therefore the 'opsiconfd' is the central opsi service and does all the communication to the clients.

Regarding this central rule, a tool to monitor this process gives a lot of information about load and possible problems. This tool is the 'opsiconfd' info page.

[[opsi-manual-configuration-tools-serverprocesses-info]]
==== 'opsiconfd' monitoring: opsiconfd info

Using the web address https://<opsi-server>:4447/info you will get a graphical chart of 'opsiconfd' load and cpu/memory usage in the last hour/day/month/year. This information is completed by tabulary information to the actual tasks and sessions.

.opsiconfd info: opsiconfd values from the last hour
image::../images/opsiconfd-info-hour.png["opsiconfd info: opsiconfd values from the last hour", width="120mm"]

.opsiconfd info: opsiconfd values from the last day
image::../images/opsiconfd-info-day.png["opsiconfd info: opsiconfd values from the last day", width="120mm"]






