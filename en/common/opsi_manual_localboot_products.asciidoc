////
; Copyright (c) uib gmbh (www.uib.de)
; This documentation is owned by uib
; and published under the german creative commons by-sa license
; see:
; http://creativecommons.org/licenses/by-sa/3.0/de/
; http://creativecommons.org/licenses/by-sa/3.0/de/legalcode
; english:
; http://creativecommons.org/licenses/by-sa/3.0/
; http://creativecommons.org/licenses/by-sa/3.0/legalcode
; 
; credits: http://www.opsi.org/credits/
////

:Author:    uib gmbh
:Email:     info@uib.de
:Date:      15.06.2011
:Revision:  4.0.1
:toclevels: 6


include::../common/opsi_terms.asciidoc[]

[[opsi-manual-localboot-products]]
== Localboot products: automatic software distribution with opsi

A 'localboot product' is a opsi product which will be installed by the '{opsi-client-agent}' after the client started it's default OS from the local hard disk. This diskriminate them form the 'netboot products' which will be described later 
////
<<opsi-manual-netboot-products>>.
////


[[opsi-manual-localboot-standardprodukte]]
=== opsi standard products

The following products are basic products which come with the 'opsi-server' installation.

[[opsi-manual-localboot-opsi-client-agent]]
==== '{opsi-client-agent}'

The 'opsi-client-agent' packet contains the installation and update mechanism of the '{opsi-client-agent}'.

[[opsi-manual-localboot-opsi-winst]]
==== '{opsi-winst}'

The '{opsi-winst}' packet is a special case. It includes the actual '{opsi-winst}' `winst32.exe`, which is updated by the '{opsi-client-agent}' packet itself. The '{opsi-client-agent}' checks the server for there is a different version of the `winst32.exe` and then copies the new '{opsi-winst}' (all it's files) to the client.
This automatic update do no more work for Windows 2000 since opsi 4.

[[opsi-manual-localboot-javavm]]
==== javavm: Java Runtime Environment

he product 'javavm' installs the required Java 1.6 runtime environment (required for '{opsi-configed}') on the clients.

[[opsi-manual-localboot-opsi-adminutils]]
==== 'opsi-adminutils'

The product 'opsi-adminutils' offers some utilities and a local installation of the '{opsi-configed}'.

[[opsi-manual-localboot-jedit]]
==== jedit

Java based editor with syntax highlighting for '{opsi-winst}' scripts

[[opsi-manual-localboot-swaudit_hwaudit]]
==== Swaudit and hwaudit: Products for hardware and software inventories

The products hwaudit and swaudit provide the hardware and software inventories.
The hardware data are acquired using WMI and written to the hardware inventory via 'opsi web service'.
The data for the software inventory are taken from the registry (HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall) and passed to the inventory server via 'opsi web service'.

[[opsi-manual-localboot-opsi-template]]
==== opsi-template

Template for you own opsi scripts.

You may extract this template with:
[source, prompt]
----
`opsi-package-manager -x opsi-template_<version>.opsi`
----
it is also possible to rename it at the same time:
[source, prompt]
----
`opsi-package-manager -x opsi-template_<version>.opsi --new-product-id myprod`
----

[[opsi-manual-localboot-xpconfig]]
==== xpconfig

Package for customizing the GUI and Explorer settings (not only) for XP.

[[opsi-manual-localboot-product-order]]
=== Manipulating the installation sequence by product priorities

Since opsi 4.0 the installation sequence will be calculated by regarding product dependencies and product priotities.

* product dependencies +
defines dependencies and needed installation sequence between opsi-packages. A typical example is the dependency between a java program and the java runtime environment (javavm).

* product priorities +
will be used to push some packages to the beginning of the installation sequence and other packages to the end. For example it is useful install service pack and hotfixes at the beginning of a installation sequence and software inventory at the end. +
Product priorities are numbers between 100 and -100 (0 is the default)

There are different possibilities how these two factors are used to calculate the installation sequence. According to this opsi provides two different algorithms.

You may switch between these algorithms:

* using the opsi-configed, in the 'Host parameter' Tab of the 'server configuration'

.'{opsi-configed}': server configuration
image::configed_serverconfiguration_en.png["opsi-configed: server configuration",width=500]

or you can do this on the commend line:
[source, prompt]
----
opsi-setup --edit-config-defaults
----

.Choose the sort algorithm: Part 1
image::opsi-setup-product_sort_algorithm.png["Choose the sort algorithm: Part 1",width=300]

.Choose the sort algorithm: Part 2
image::opsi-setup-product_sort_algorithm2.png["Choose the sort algorithm: Part 2",width=300]

[[opsi-manual-localboot-product-order-algorithm1]]
==== Algorithm1: product dependency above priority (default)

Using this algorithm, the product installation sequence at first will be calculated by the product priorities. In a second step it will be resorted to met the product dependencies. This algorithm may push products with low priority before products with higher priority to met the needs of product dependencies. But therefore you will not see installation problems as result of not resolved product dependencies.

[[opsi-manual-localboot-product-order-algorithm2]]
==== Algorithm2: product priority above dependency

The base philosophy of this algorithm is, that in practice there are three needed priority classes:

* Products which have to be installed at the beginning of a sequence, like OS-Patches. These products need a high priority (e.g. 100)

* "normal" products to install applications (default priority = 0)

* Products which have to be installed at the end of a installation sequence, like software inventory. These products need a low priority (e.g. -100)

Product dependicies will only resolved inside of priority class. This guarantees that products with a high priority will be installed very early. But is in your reponsibility that there are non product dependencies which go cross priority class borders.

[[opsi-manual-localboot-product-order-create]]
==== Defining product priorities and dependencies

Product priorities and dependencies belong to the meta data of a product. You will be asked for these meta data creating a new product using the command 
`opsi-newprod`.

These meta data will be stored in the product control file and may be edited there. After changing the control file you have create and install the package again.

For more details see at 'getting started' manual in the chapter creating a opsi-package.

[[opsi-manual-localboot-own_software]]
=== Integration of new software packets into the opsi software deployment.

The information about the 'Integration of new software packets into the opsi software deployment.' you will find in the 'opsi-getting-started' manual.

