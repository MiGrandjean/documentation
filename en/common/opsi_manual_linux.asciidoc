////
; Copyright (c) uib gmbh (www.uib.de)
; This documentation is owned by uib
; and published under the german creative commons by-sa license
; see:
; http://creativecommons.org/licenses/by-sa/3.0/de/
; http://creativecommons.org/licenses/by-sa/3.0/de/legalcode
; english:
; http://creativecommons.org/licenses/by-sa/3.0/
; http://creativecommons.org/licenses/by-sa/3.0/legalcode
; 
; credits: http://www.opsi.org/credits/
////

////
;***************************************************************************
; Subversion:
; $Rev$ $Author$
; $Date$
;***************************************************************************
////

:Author:    uib gmbh
:Email:     info@uib.de
:Date:      28.08.2015
:Revision:  4.0.6
:toclevels: 6


include::../common/opsi_terms.asciidoc[]

[[opsi-manual-linux]]
=== opsi Linux Support

include::../common/opsi_manual_supportmatrix-linclient.asciidoc[]

[[opsi-manual-linux-preconditions]]
==== Preconditions for using the opsi Linux Support


Technical precondition is opsi 4.0.5 with following packet versions:

.Required packets
[options="header"]
|==========================
|opsi packet|version
|opsi-linux-bootimage|>= 20140805-1
|==========================

The opsi support for Linux is based on a free Open Source component (the netboot products) and a co-funded component (the client-agent).

The opsi-linux-client-agent is a
http://www.opsi.org/en/opsi-extensions/[co-funded opsi extension module]. +
For using the opsi Linux extension module, an activation file is required, which can be acquired by buying the extension module. To obtain a temporary activation file for evaluation, please email to info@uib.de. +
For further details on handling extension modules refer to the opsi manual.
////
<<opsi-manual-modules>>.
////

[[opsi-manual-linux-introduction]]
==== Introduction

*A single management tool for Windows and Linux*

The objective of the opsi Linux extension module is to provide a homogenous management system for heterogenous environments. The focus is on integrating both worlds into the same management processes and tools

This means, that a Linux installation is triggered the same way as a Windows installation. The Linux opsi-client-agent is based on the same source code as the Windows client and provides (when applicable) the same opsiscript instruction sets. 

*Independent from Linux distribution*

The opsi Linux Support is designed to be independent from any special Linux distribution. +
The following distributions are supported:

* Debian
* Ubuntu
* OpenSuse / SLES (Suse Linux Enterprise Server)
* Fedora / RHEL (RedHat Enterprise Linux)
* CentOS


[[opsi-manual-linux-netboot-v406]]
==== Linux netboot products v406 based on the distibution installer

With opsi v405 the installation of Linux targets has been controlled by the netboot product. The opsi v406 Linux netboot products are based on installer of the respective distribution.

This is a fundamental change of the structure and behaviour of these products. +
Overview of the changes:

* Like with the unattended Windows installation, the Linux installer is equipped with an answer file to configure the unattended installation.

* The installer of a distribution is not like with Windows an executable program, but is a combination of the distribution kernel and initrd implementation.

* Die system installation including partitioning, LVM, all the basic software etc. is performed by the installers and not by the bootimage anymore.

* For the Suse and RedHat like distributios the installation sources have to be provided by you by putting the DVD as ISO-file on the depot share. This is comparable to the Windows installation, with the difference that the Windows installation files are stored ina a different place and stored as the content of the DVD and not as an ISO file.

* For the Debian like installations the installation sources are taken from the internet. Just the netboot versions of the distribution kernel with the associated initrd are placed on the depot share. These files are small, so they are included in the opsi package. +
Since opsi 4.0.7 it is also possible to provide for some netboot products a local http repository.

* For further maintenance of the installation the opsi-linux-client-agent can be installed with the basic installation.

Description of the automated installation process:

. The opsi-linux-bootimage boots, deletes the partition table and creates a small temporary partition.

. The opsi-linux-bootimage fetches the initrd for the distribution and unpacks it on the temporary partition.

. The opsi-linux-bootimage fetches the generic answer file, patches it (personalisation) and moves it to the initrd directory.

. The opsi-linux-bootimage creates some helper scripts and configuration files (e.g. for installing the opsi-linux-client-agent) and moves them to the initrd directory.

. The opsi-linux-bootimage packs the patched initrd directory

. The opsi-linux-bootimage boots the distribution kernel with the patched initrd per kexec.

. The distribution kernel with the patched initrd performs the unattended installation of the target system and finally installs the opsi-linux-client-agent.

Advantages:

* The installation is done as specified by the distributor, which is of special importance for providing support in the business context.

* The opsi integration of new releases is easier and faster available.

* For Suse and RedHat like distributions the installation is done from installation sources on the opsi-server, and thereby is faster and more stable than installing from internet repositories.

Disadvantages:

* Currently there is no UEFI support available. Die informationen about UEFI gets lost during kexec boot. We hope to fix this with a future bootimage.

[[opsi-manual-linux-netboot-v406-prepare]]
===== Providing the installation media on the server

For Suse and RedHat like distributions the installation media areprovided by an additional nfs share: `opsi_nfs_share`.

To configure this share, there must be a NFS server installed and configured on the opsi-server:

In opsi v406 stable this is done by the special package `opsi-linux-support`. This package is not installed by default and must be installed manually once, e.g.

----
apt-get install opsi-linux-support
----

The `opsi-linux-support` package performs the following tasks:

* Installation of the applicable nfs-server package on the opsi-server. For Debian, Ubuntu, Suse this is the package: nfs-kernel-server. For Centos, Fedora, Redhat it is the package nfs-utils.

* The share `opsi_nfs_share` is created and exported:

** Create directory: +
`mkdir -p /var/lib/opsi/depot/opsi_nfs_share`

** Add the share entry to /etc/exports: +
`/var/lib/opsi/depot/opsi_nfs_share *(ro,no_root_squash,insecure,async,subtree_check)` +

** Activate the export: +
`exportfs -r`

** Check the successful export: +
`showmount -e localhost` +
The output should be: +
`Export list for localhost: +
/var/lib/opsi/depot/opsi_nfs_share *`

* The share `opsi_nfs_share` has the following directory structure: +
`opsi_nfs_share/<productId>/<arch>/<dvd>.iso` +
example: +
`opsi_nfs_share/opensuse13-2/64/openSUSE-13.2-DVD-x86_64.iso` +
The installation file must have extension `.iso`, the name of the file does not matter. If there a several `.iso` files in the same directory, it is not specified which one to use.

* Copy the installation DVD to the `opsi_nfs_share` and execute: +
`opsi-set-rights /var/lib/opsi/depot/opsi_nfs_share` +
IMPORTANT: use the standard installation DVDs of the distribution. Modified installation DVDs might have a different structure and thereby cannot be used in this context.

* If for any reasons the directory `/var/lib/opsi/depot/opsi_nfs_share` cannot be exported by the opsi-server per NFS (for instance because the depot share is already a NAS NFS share), so the NFS share to be used can be specified by a server config. Like `clientconfig.opsi_nfs_share=172.16.166.1:/var/lib/opsi/depot/opsi_nfs_share`

The opsi v406 netboot products for Debian and Ubuntu do not get their installation files from an ISO file. They are provided by opsi with the standard netboot kernel and initrd. All further packages are taken from the internet. To relieve the network connection, using an apt-cache might be useful. +
See chapter <<opsi-manual-linux-debproxy>>

[NOTE]
.Start order of involved services for SLES 11
=============================================

It may occur that the `showmount` command exits with an error message
as following:

[source,prompt]
----
# showmount -e localhost
clnt_create: RPC: Program not registered
----

Please make sure that after installing the NFS-server a reboot has been done.
Then the services 'rpcbind' and 'nfsserver' need to be started in that exact order.

The services can be restarted by the following commands:
[source,prompt]
----
# service rpcbind restart
# service nfsserver restart
----

Then showmount works as expected:

[source,prompt]
----
# showmount -e localhost
Export list for localhost:
/var/lib/opsi/depot/opsi_nfs_share *
----

=============================================

[[opsi-manual-linux-netboot-v406-generalproperties]]
===== Common properties of the opsi v406 Linux netboot products

The following properties are available with all v406 netboot products to configure the Linux installation:

* `askbeforeinst`: +
Starting an installation has to be confirmed from the client console?  (Default='true')

* `architecture`: +
architecture selection, which affects the selection of bootimages and the installation architecture.  (Default='64bit')

* `language` or `locale`: +
Which language / locale is to be installed.  (Default=distribution dependent / 'de')

* `console_keymap`: +
keyboard layout to be installed.  (Default=distribution dependent / 'de')

* `timezone`: +
Timezone to be installed?. (Default='Europe/Berlin')

* `root_password`: +
root password.  (Default='linux123')

* `user_password`: +
user passwort.  (Default='linux123')

* `online_repository`: +
distribution repository for the installation. (only for the Debian/Ubuntu family) (Default=distribution dependent)

* `proxy`: +
Proxystring (if required) as: `http://<ip>:<port>`. (Default=pass:[''])

* `install_opsi-client-agent`: +
Install the Linux opsi-client-agent (co-funded project: a module file is required for activation. (Default='true')

* `setup_after_install`: +
Which opsi products shall be installed after the installation of the operating system (opsi products set to setup). (Default='')


[[opsi-manual-linux-netboot-v406-special-ubuntu14-04]]
===== The products debian7, debian8 and ubuntu14-04

The basic OS installation files are taken from the internet.

This product has the state productive.

This product has the following additional properties:

----
name: encrypt_password
multivalue: False
editable: True
description: Password for disk encryption (only if encrypt_logical_volumes=true)
values: ["linux123"]
default: ["linux123"]

name: partition_disk
multivalue: False
editable: True
description: Disk to use first or complete device path
values: ["first", "/dev/sda", "/dev/sdb"]
default: ["first"]

name: partition_method
multivalue: False
editable: False
description: regular: use the usual partition types for your architecture / lvm: use LVM to partition the disk / crypto: use LVM within an encrypted partition
values: ["regular", "lvm", "crypto"]
default: ["lvm"]

name: partition_recipe
multivalue: False
editable: False
description: atomic: all files in one partition / home: separate /home partition / multi: separate /home, /usr, /var, and /tmp partitions
values: ["atomic", "home", "multi"]
default: ["atomic"]

name: desktop_package
multivalue: True
editable: False
description: Desktop package to install (standard = no desktop)
values: ["ubuntu-desktop", "kubuntu-desktop", "lubuntu-desktop", "xubuntu-desktop", "ubuntu-gnome-desktop"]
default: ["standard"]

name: language_packs
multivalue: True
editable: False
description: language packages to install
values: ["ar", "bg", "by", "cf", "de", "dk", "en", "es", "et", "fa", "fi", "fr", "gr", "il", "it", "kg", "kk", "lt", "mk", "nl", "no", "pl", "ro", "ru", "sg","sr", "ua", "uk", "us", "wo"]
default: ["de"]
----

.Videos (time lapse)

* http://download.uib.de/press-infos/videos/opsi-linux/centos70_406_1fps.mp4

* http://download.uib.de/press-infos/videos/opsi-linux/debian8_406_1fps.mp4

* http://download.uib.de/press-infos/videos/opsi-linux/ubuntu14-04_406_1fps.mp4

[[opsi-manual-linux-netboot-v406-special-opensuse13-02]]
===== The product opensuse13-2


This product has the following additional properties:

----
name: install_unattended
description: If false then do interactive installation
default: True
----

The property:
----
name: networkdevice
multivalue: False
editable: True
description: interface to conigure (vbox:enp0s3 / esxi:ens32)
values: ["eno1", "ens1", "ens32", "enp0s1","enp0s2","enp0s3"]
default: ["enp0s3"]
----
exists for backward compatibility reasons only and will be ignored by current bootimages ( >= 20150818),
for the automated detection of 'predictable network interface names' is working with new bootimages.

.Videos (time lapse)

* http://download.uib.de/press-infos/videos/opsi-linux/opensuse13-2_406_1fps.mp4

[[opsi-manual-linux-netboot-v406-special-sles12]]
===== The product sles12

This product has the following additional properties:

----
name: productkey
multivalue: False
editable: True
description: email:regcode-sles for suse_register. Is only used if the  host parameter  `license-management.use` is set to  false . If it set to  True  the license key will be get from the license management module. / La clé de licence pour l'installation. Est utilisée uniquement si dans "Réseau et paramètres supplémentaires" `license-management.use` est défini à false (faux) . Si c'est réglé sur True (vrai) la clé de licence sera obtenue du module de gestion des licences.
values: ["", "myemail@example.com:xxxxxxxxxxxxxx"]
default: [""]

name: suse_register
description: set to false, if you don't want to register your system online, if you set this to false you have to give local repositories
default: True

name: local_repositories
multivalue: True
editable: True
description: list of local repositories to use. Syntax: "repository description", example entry: "http://sles.example.com/suse/repo NameForRepo"
values: [""]
default: [""]

name: install_unattended
description: If false then do interactive installation
default: True
----

The property:
----
name: networkdevice
multivalue: False
editable: True
description: interface to conigure (vbox:enp0s3 / esxi:ens32)
values: ["eno1", "ens1", "ens32", "enp0s1","enp0s2","enp0s3"]
default: ["enp0s3"]
----
exists for backward compatibility reasons only and will be ignored by current bootimages ( >= 20150818),
for the automated detection of 'predictable network interface names' is working with new bootimages.

.Videos (time lapse)

* http://download.uib.de/press-infos/videos/opsi-linux/sles12_406_1fps.mp4

[[opsi-manual-linux-netboot-v406-special-redhat70]]
===== The products redhat70 and centos70

This product has the following additional properties:

----
name: install_unattended
description: If false then do interactive installation
default: True

name: selinux_mode
multivalue: False
editable: False
description: In which mode should SELinux run ?
values: ["enforcing", "permissive", "disabled"]
default: ["permissive"]

name: partition_method
multivalue: False
editable: False
description: plain: Regular partitions with no LVM or Btrfs. / lvm: The LVM partitioning scheme. / btrfs: The Btrfs partitioning scheme. / thinp: The LVM Thin Provisioning partitioning scheme. 
values: ["plain", "lvm", "btrfs", "thinp"]
default: ["lvm"]

name: productkey
multivalue: False
editable: True
description: email:regcode for subscription_register. Is only used if the  host parameter  `license-management.use` is set to  false . If it set to  True  the license key will be get from the license management module. / La clé de licence pour l'installation. Est utilisée uniquement si dans "Réseau et paramètres supplémentaires" `license-management.use` est défini à false (faux) . Si c'est réglé sur True (vrai) la clé de licence sera obtenue du module de gestion des licences.
values: ["", "myemail@example.com:xxxxxxxxxxxxxx"]
default: [""]

name: subscription_register
description: set to false, if you don't want to register your system online, if you set this to false you have to give local repositories
default: True
----

.Videos (time lapse)

* http://download.uib.de/press-infos/videos/opsi-linux/centos70_406_1fps.mp4

* http://download.uib.de/press-infos/videos/opsi-linux/redhat70_406_1fps.mp4



[[opsi-manual-linux-netboot-405]]
==== Linux v405 netboot products without distribution installer

*Basic OS installation per netboot*

For installing Linux on a client, at first the standard opsi-linux-bootimage is booted per netboot. It is the same image as being used for the Windows installation. +
The bootimage automatically performs the partitioning and formatting of the hard disc (/ and swap). Next the installation of the basic Linux Operating System is performed (including network and ssh, but without X11). The installation process itself is quite different for the individual distributions, but has in common, that the installation is performed directly from the original distribution packets.

The basic Linux installation can be extended with optional opsi packets, for instance to turn the system into an opsi-Server (a new depotserver for instance). +
Also the opsi-client-agent for Linux can be installed, which enables the automated installation and configuration of further software packets.

The opsi-client-agent for Linux is available as a co-funded opsi extension module, the required opsi netboot products for Linux installation are available as free Open Source modules.

Because the base installation is done from the Standard opsi-linux-bootimage, there ar some distribution dependent differences, that have to be installed and configured after the first reboot of the installed system. This is for example the SELinux installation of the 'RedHat like' or the keyboard configuration of the 'Debian like' systems. These after boot installations and patches are done by the standard localboot produkt `l-os-postinst`.

[[opsi-manual-linux-netboot-generalproperties-405]]
===== Common properties of the v405 Linux netboot products

The following properties for controlling the Linux installation are available with all netboot products:

* `askbeforeinst`: +
confirm start of the new installation on the client? (default='true')

* `architecture`: +
architecture selection - affects the selection of the bootimage and the installation architecture. (default='64bit')

* `system_partition_size`: +
size of the system partition - the size may be given as percent of the harddisk size or as absolute size (G=Gigabyte). If you choose another value than 100%, the remaining rest will be used as data_partition. (default='100%')

* `swap_partition_size`: +size of the swap partition. (default='2000M')

* `data_partition_create`: +
create a data partition if there is some space left. (true/false) (default='true')

* `data_partition_preserve`: +
preserve an existing data partition? +
*always* = cancel the installation in case the preservation of an existing partition with the label 'data' is not possible with the given partition data. +
*if_possible* = an existing partition with the label 'data' is preserved if possible according to the given partioning parameters. Otherwise it will be deleted. +
*never* = a new partition table will be created. (default='never')

* `language`: +
language / locale to be installed (default='de')

* `console_keymap`: +
keyboard layout to be used (default = distribution dependent / 'de')

* `timezone`: +
time zone to be configured (default='Europe/Berlin')

* `root_password`: +
root password  (default='linux123')

* `user_password`: +
user password (default='linux123')

* `install_opsi_server`: +
install opsi server packages (default='false')


* `online_repository`: +
repository to use for installation -
repository of the Linux distribution to be used for installation (not for SLES) (default = distribution dependent)

* `opsi_online_repository`: +
repository for opsi-server installation -
repository for the opsi-server packets (default = distribution dependent)

* `proxy`: +
proxystring (if required) as: `http://<ip>:<port>` (default=pass:[''])

* `additional_packages`: +
additional packets to install. Packet names separated by blanks. (default=pass:[''])

* `wget_and_execute`: +
fetch a file via wget and execute it -
URL (http) of a file to be executed at the end of installation. (default=pass:[''])

* `install_opsi-client-agent`: +
install the Linux opsi-client-agent (cofunding project: has to be activated by the /etc/opsi/modules) (default='false')

* `release`: +
(Debian and Ubuntu only) +
which release of the distribution is to be installed? (default = distribution dependent)

* `setup_after_install`: +
opsi product(s) to be installed after the OS installation is done 
(opsi products to be set to 'setup') (default='l-os-postinst')

[[opsi-manual-linux-netboot-special]]
===== Netboot products for Linux distributions

[[opsi-manual-linux-netboot-special-ubuntu]]
====== ubuntu

The basic installation is performed per debootstrap directly from the network.

This product has the status 'productive'.

It is UEFI/GPT compatible (tested for release=trusty).

For this product applicable opsi-server packets are available, that can be installed by setting 'install_opsi_server=true'.


[[opsi-manual-linux-netboot-special-debian]]
====== debian

The basic installation is performed per debootstrap directly from the network.

This product has the status 'productive'.

It is UEFI/GPT compatible (tested for release=wheezy).

For this product applicable opsi-server packets are available, that can be installed by setting 'install_opsi_server=true'.


[[opsi-manual-linux-clientagent]]
==== opsi-linux-client-agent

The opsi-client-agent for Linux ist part of the co-funding project 'Linux Agent', which is liable to pay costs.

The opsi-client-agent for Windows is based on two components:

. the service `opsiclientd`

. the action processor `opsi-script / opsi-script-nogui`

The opsi-client-agent for Linux is based on the Linux port of the Windows client agent.

The `opsiclientd` is  recently not poted to all supported Linux distributions.
If no `opsiclientd` is available, it is suplemented by a direct `opsiscriptstarter` call. +
A Linux `opsiclientd`  is available for: 

* Debian 7 / 8
* Ubuntu 12.04 / 14.04 / 16.04
* openSuse 13.2 / 42.1
* SLES 12 / 12SP1
* UCS 4.0 / 4.1

If there is no `opsiclientd`, so it is replaced by the `opsiscriptstarter`, which performs the following `opsiclientd` tasks at system start:

* connect to the opsi-server: check whether actions are to be performed
* mount the depot share
* start the action processor
* unmount the depot share
* transfer the logfile to the server

The Linux action processor is named opsi-script and is built from the same sources as the Windows opsi-winst. So on Linux the same scripting syntax is available as on Windows. All common features, that are not Windows specific, are available, as there are e.g.: 

* file handling
* string and stringlist functions
* executing external scripts and programs
* communication with the opsi-Server
* patching config files

Of course Windows specific features (like patching the Windows registry) are not available on Linux, but there are some additional Linux specific functions like e.g.:

* getLinuxDistroType
* getLinuxVersionMap

Logging of the opsi-script ist available (like with the opsi-winst on Windows).

Linux opsi-script is available as a grafical version for working with X-Windows and a noGUI version for systems without grafical user interface.

[[opsi-manual-linux-clientagent-installation-servicesetup]]
===== opsi-linux-client-agent: Installation: service_setup.sh

This method is the first choice for installations on a single computer.  service_setup.sh can also be used for repair purposes. For mass roll-out, see the chapter below.

. login to the Linux client with root privileges
. mount the shared directory on the opsi server at \\<opsiserver>\opsi_depot to any mountpoint
. change to directory `opsi-linux-client-agent` at the mountpoint
. start as this place the script `./service_setup.sh`
. The script connects to the opsi-webservice in order to create the server side client information and to get the pckey. The connection requires the user/password combination registered in the config.ini. If the connection fails, a login window pops up (or commandline questions), where the user can fill in a URL, user, and password. The provided user has to be a member of the group '{opsiadmin}'.

WARNING: During installation, the client reboots without notice!

[[opsi-manual-linux-clientagent-installation-opsideploy]]
===== opsi-linux-client-agent: Installation: opsi-deploy-client-agent

The `opsi-deploy-client-agent` script installs the opsi-client-agent directly from the {opsi-server} to the clients. Requirements for the clients are:

* ssh access as root or as a user that has the possibillity to run sudo without entering the password 

The script creates the client on the server, then copies the installation files and the configuration information including the pckey to the client.  After copying the necessary information, `opsi-deploy-client-agent` starts the installation on the client.


Mit dem `opsi-deploy-client-agent` Skript kann auch eine ganze Liste von Clients bearbeitet werden.
Dazu können entweder beliebig viele Clients als letzter Parameter übergeben werden oder mit der Option '-f' die Clients aus einer Datei eingelesen werden.
Bei der Verwendung einer Datei, muss in jeder Zeile ein Client stehen.

Das Script kann mit IP-Adressen, Hostnamen und FQDNs arbeiten. Es wird versuchen automatisch zu erkennen welche Art von Adresse übergeben wurde.

Das Skript findet sich unter '/var/lib/opsi/depot/opsi-linux-client-agent' +
Führen Sie das Script mit 'root' Rechten aus. +
Evtl. müssen Sie zunächst das Script ausführbar machen: +
`chmod u+x /var/lib/opsi/depot/opsi-linux-client-agent/opsi-deploy-client-agent`


[source,prompt]
----
bonifax:/var/lib/opsi/depot/opsi-linux-client-agent# ./opsi-deploy-client-agent --help
usage: opsi-deploy-client-agent [-h] [--version] [--verbose]
                                [--debug-file DEBUGFILE] [--username USERNAME]
                                [--password PASSWORD]
                                [--use-fqdn | --use-hostname | --use-ip-address]
                                [--ignore-failed-ping]
                                [--reboot | --shutdown | --start-opsiclientd]
                                [--hosts-from-file HOSTFILE]
                                [--skip-existing-clients]
                                [--threads MAXTHREADS]
                                [--keep-client-on-failure | --remove-client-on-failure]
                                [host [host ...]]

Deploy opsi client agent to the specified clients. The clients must be
accessible via SSH. The user must be allowed to use sudo non-interactive.

positional arguments:
  host                  The hosts to deploy the opsi-client-agent to.

optional arguments:
  -h, --help            show this help message and exit
  --version, -V         show program's version number and exit
  --verbose, -v         increase verbosity (can be used multiple times)
  --debug-file DEBUGFILE
                        Write debug output to given file.
  --username USERNAME, -u USERNAME
                        username for authentication (default: root). Example
                        for a domain account: -u "<DOMAIN>\\<username>"
  --password PASSWORD, -p PASSWORD
                        password for authentication
  --use-fqdn, -c        Use FQDN to connect to client.
  --use-hostname        Use hostname to connect to client.
  --use-ip-address      Use IP address to connect to client.
  --ignore-failed-ping, -x
                        try installation even if ping fails
  --reboot, -r          reboot computer after installation
  --shutdown, -s        shutdown computer after installation
  --start-opsiclientd, -o
                        start opsiclientd service after installation
  --hosts-from-file HOSTFILE, -f HOSTFILE
                        File containing list of clients (one hostname per
                        line). If there is a space followed by text after the
                        hostname this will be used as client description for
                        new clients.
  --skip-existing-clients, -S
                        skip known opsi clients
  --threads MAXTHREADS, -t MAXTHREADS
                        number of concurrent deployment threads
  --keep-client-on-failure
                        If the client was created in opsi through this script
                        it will not be removed in case of failure. (DEFAULT)
  --remove-client-on-failure
                        If the client was created in opsi through this script
                        it will be removed in case of failure.
----

[[opsi-manual-linux-clientagent-installation-netboot]]
===== opsi-linux-client-agent: Installation: Via opsi netboot product

If you install a Linux via opsi netboot product, you only have to switch the property `install_opsi-client-agent` to 'true' (which is the default) in order to install the opsi-linux-client-agent.

[[opsi-manual-linux-clientagent-opsiclientd-configuration]]
===== opsi-linux-client-agent: opsiclientd configuration

The `opsiclientd` for Linux is a port of the `opsiclientd` for Windows.
So it works withe similar configuration file which is located at: 
`/etc/opsi-client-agent/opsiclientd.conf`.

A detailed description of this file you will find at the chapter for the opsi-client-agent for Windows:  <<opsi-manual-clientagent-configuration>>

At the moment there are not all of the features and events available on Linux. +
Available are:

* Start at boot time (or via explicit start of the service `opsiclientd`). At Linux is the name of this event `opsiclientd_start` (not `gui_startup`)
* `event_on_demand`
* The `event_timer` but only with the configuration: `super = default`


Not available are:

* Everything that is related to local caching ('WAN-Extension').
* Modification of events via `preconditions`.
* The `opsiclientd notifier`
* The `event_net_connection`
* The `event_on_shutdown`
* The `event_silent_install`


[[opsi-manual-linux-clientagent-places]]
===== opsi-linux-client-agent: installation paths

As usual on Linux, the linux-opsi-client-agent is spread to several directories:

the binaries:

`/usr/bin/opsi-script` (X11)

`/usr/bin/opsi-script-nogui` (without X11)

`/usr/bin/opsiscriptstarter` (preliminary opsiclientd replacement)

`/usr/bin/opsiclientd`

auxiliary files:

`/usr/share/opsi-client-agent/opsi-script/skin`

`/usr/share/locale/`<LANG>`/LC_MESSAGES/opsi-script.po`


config files:

`/etc/opsi-client-agent/opsiclientd.conf` (configuration of the opsiscriptstarter/opsiclientd)

`/etc/opsi-client-agent/opsi-script.conf` (under construction)

logfiles / temporary files:

`/var/log/opsi-client-agent`

[[opsi-manual-linux-clientagent-knownbugs]]
==== opsi-linux-client-agent: Known Bugs

Copy a bundle of files via Files section from a smb share may fail according to the Samba version
This problem was reported from some samba3 Versions but seems to be vanished in samba4.

Workaround:
Instead of:
[source,winst]
----
[Files_copy_netboot]
copy -s "%scriptPath%/installfiles/*" "$target$/installfiles/"
----
you may use:
[source,winst]
----
[ShellInAnIcon_opsi_copy_netboot]
set -x
export PATH=/usr/local/bin:/usr/bin:/bin:/usr/local/sbin:/usr/sbin:/sbin
cd "%scriptPath%"
tar cf - installfiles | ( cd "$target$/installfiles/" ; tar xf - )
----

[[opsi-manual-linux-scriptexample]]
===== Script examples

For software deployment on Windows clients there can be said: the installation of software itself is as important as the subsequent configuring of the software. +
On Linux most packets are available from the distribution repositories. So the installation part is less, but the configuration part stays the same. Also there are applications, that are not available from the standard repositories. 
In this case special repositories or installation sources have to be added to the system. The important feature is, that all installation and configuration settings can be managed and logged on the opsi-server. 

Here are some example snippets for an opsi-linux-client-agent opsi-script:

* exit in case the script detects a non Linux system
* detecting the distribution type (to use `apt-get`, `zypper` or `yum`)
* detecting the Linux version
* installing a packet
* adding a repository

Example: exit in case the script detects a non Linux system:

[source,winst]
----
[Actions]
requiredWinstVersion >= "4.11.4.1"
ScriptErrorMessages=off

DefVar $OS$

set $OS$ = GetOS

if not($OS$ = "Linux")
	LogError "Wrong OS: Product: " + $ProductId$ + "is only for Linux"
	isFatalError "Wrong OS"
endif
----

Example: detecting the distribution type:

[source,winst]
----
[Actions]
requiredWinstVersion >= "4.11.4.1"
ScriptErrorMessages=off

DefVar $distrotype$

set $distrotype$ = getLinuxDistroType

if $distrotype$ = 'debian'
	ShellInAnIcon_Upgrade_deb
else
	LogError "Wrong Distro: This Product is for Debian/Ubuntu only"
	isFatalError "Wrong distro"
endif

if not("0" = getLastExitCode)
	Message "failed ShellInAnIcon_Upgrade"
	LogError "failed ShellInAnIcon_Upgrade"
	isFatalError "failed Upgrade"
endif


[ShellInAnIcon_Upgrade_deb]
set -x
export DEBIAN_FRONTEND=noninteractive
apt-get --yes install aptitude
apt-get update
apt-get --yes dist-upgrade
exit $?
----


Example: detecting the Linux version and installing a packet:

[source,winst]
----
[Actions]
requiredWinstVersion >= "4.11.4.1"
ScriptErrorMessages=off

DefVar $distCodeName$
DefVar $distroName$
DefVar $distRelease$
DefVar $desktop$

DefStringList $linuxInfo$

set $linuxInfo$ = getLinuxVersionMap
set $distCodeName$ = getValue("Codename", $linuxInfo$)
set $distRelease$ = getValue("Release", $linuxInfo$)
set $distroName$  = getValue("Distributor ID", $linuxInfo$)

set $desktop$ = GetProductProperty("desktop", "kde")


if $distrotype$ = 'suse'
	if $desktop$ = "unity"
		Message " No Unity on SUSE - fallback to KDE ..."
		set $desktop$ = "kde"
	endif ; unity

	
	if $desktop$ = "kde"
		if ($distroName$ = 'openSUSE project')
			ShellInAnIcon_kde_suse
		endif
		if ("SUSE LINUX" = $distroName$) and ($distRelease$ = "11")
			ShellInAnIcon_kde_sles11
		endif
		if not("0" = getLastExitCode)
			LogError "failed ShellInAnIcon"
			Message "failed kde"
			isFatalError "failed kde"
		endif
	endif ; kde
endif; suse type

[ShellInAnIcon_kde_suse]
set -x
zypper --no-gpg-checks --non-interactive install patterns-openSUSE-kde4 patterns-openSUSE-kde4_basis
zypper --no-gpg-checks --non-interactive install splashy-branding-openSUSE
exit $?

[ShellInAnIcon_kde_sles11]
set -x
zypper --no-gpg-checks --non-interactive install --auto-agree-with-licenses -t pattern kde
exit $?
----


Example: adding a repository:
[source,winst]
----
[Actions]
requiredWinstVersion >= "4.11.4.1"
ScriptErrorMessages=off

DefVar $distCodeName$
DefVar $distroName$
DefVar $distRelease$
DefVar $desktop$

DefStringList $linuxInfo$

set $linuxInfo$ = getLinuxVersionMap
set $distCodeName$ = getValue("Codename", $linuxInfo$)
set $distRelease$ = getValue("Release", $linuxInfo$)
set $distroName$  = getValue("Distributor ID", $linuxInfo$)

set $desktop$ = GetProductProperty("desktop", "kde")


if $distroName$ = 'Ubuntu'

	if $desktop$ = "cinnamon"
		set $desktopPackage$ = $desktop$
		ShellInAnIcon_ubuntu_cinnamon
		if not("0" = getLastExitCode)
			Message "failed ShellInAnIcon_ubuntu_cinnamon"
			LogError "failed ShellInAnIcon_ubuntu_cinnamon"
			isFatalError "failed cinnamon"
		endif
	endif ; cinnamon
endif; ubuntu

[ShellInAnIcon_ubuntu_cinnamon]
set -x
export DEBIAN_FRONTEND=noninteractive
# we need to get the add-apt-repository command
apt-get --yes --force-yes install python-software-properties
# the cinnamon repository
add-apt-repository ppa:gwendal-lebihan-dev/cinnamon-stable
apt-get update
apt-get --yes install ubuntu-desktop
exit $?
----

[[opsi-manual-linux-localboot]]
==== Linux localboot products

Here some localboot products that are part of the standard opsi Linux support.

[[opsi-manual-linux-localboot-l-os-postinst]]
===== l-os-postinst

This product installs and configures those parts of the base installation, that cannot be done from the bootimage in a proper way.

This is for the different distributions:

* Fedora / CentOS: 

** installation of SELinux

* Fedora: 

** installation of SELinux

This product has a dependency to the product 'l-system-update' which is executed before running 'l-os-postinst'. +
This product has a high priority, so it is executed before common products.

[[opsi-manual-linux-localboot-l-desktop]]
===== l-desktop

The product l-desktop installs a desktop packet on the computer.

The property `desktop` selects the desktop to be installed. Not all of the desktops are available for every distribution. For instance 'Unity' is available for Ubuntu only. If the selected desktop is not available, the distribution specific default desktop will be installed. Furthermore the scope of the desktop packets differs according to the distribution and the selected desktop. It can be just the actual desktop software, or might also contain some base products like libreoffice, firefox, PDF Reader etc.

The property `desktop` can have the following values:

* Gnome +
Default for Debian, Fedora, CentOS, RHEL. +
Available for all distributions.

* KDE +
Default für SLES, OpenSuse.
Available for all distributions.

* Unity +
Available for Ubuntu only.

* Cinnamon +
Available for Ubuntu only.

* xfce4 +
Available for Ubuntu, Debian, Fedora.

* lxde +
Available for Ubuntu, Debian.


[[opsi-manual-linux-localboot-l-system-update]]
===== l-system-update
This product updates the system.

[[opsi-manual-linux-localboot-l-swaudit]]
===== l-swaudit
Software inventory, based on the packet manager

[[opsi-manual-linux-localboot-l-hwaudit]]
===== l-hwaudit

Hardware inventory. +
The hardware inventory currently is based on the Python implemented method as also used by the bootimage. Therefore the packet `python-opsi` from the opsi-repository of the distribution must be installed. So if there is no opsi-repository available for this distribution, the hardware inventory fails.

[[opsi-manual-linux-localboot-l-jedit]]
===== l-jedit

Java based editor with syntax highlighting for opsi-script. If Java is missing on the system, it will be installed automatically.


[[opsi-manual-linux-inventory]]
==== Inventory

To create an inventory, the data are collected on the client and sent to the server. The hardware inventory is based on the methods implemented in the bootimage. 

The software inventory is based on the data from the packet management of the deployed Linux distribution.

[[opsi-manual-linux-uefi]]
==== UEFI / GPT support

Some of the opsi 4.0.5  Linux netboot products are UEFI/GPT compatible. 

The 4.0.6 Linux netboot products are not UEFI/GPT compatible. At the moment they loose their information about the uefi environment at the kexec boot of the detribution kernel. We hope to fix this later.

For details refer to the list of netboot products above or see at the UEFI chapter of the opsi-manual.

[[opsi-manual-linux-roadmap]]
==== Roadmap

Linux support is a brand new opsi feature. Therefore not all of the planned features have been implemented yet with the first release. +
Planned features to follow are:

* configurable partitioning
* logical volume management
* patching XML files
* patching hierarchical configuration files like dhcpd.conf


[[opsi-manual-linux-debproxy]]
==== Proxy for deb packets

Instructions for installation and use of local deb packets:

German: 

* http://wiki.ubuntuusers.de/Lokale_Paketquellen/Apt-Cacher-ng

* http://www.gambaru.de/blog/2011/10/26/apt-cacher-ng-ein-proxy-server-fur-debian-und-ubuntu/

English: 

* https://help.ubuntu.com/community/Apt-Cacher-Server

* http://www.distrogeeks.com/install-apt-cacher-ng-ubuntu/

* http://manpages.ubuntu.com/manpages/gutsy/man1/apt-cacher.1.html


