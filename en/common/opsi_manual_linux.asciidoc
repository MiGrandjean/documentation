////
; Copyright (c) uib gmbh (www.uib.de)
; This documentation is owned by uib
; and published under the german creative commons by-sa license
; see:
; http://creativecommons.org/licenses/by-sa/3.0/de/
; http://creativecommons.org/licenses/by-sa/3.0/de/legalcode
; english:
; http://creativecommons.org/licenses/by-sa/3.0/
; http://creativecommons.org/licenses/by-sa/3.0/legalcode
; 
; credits: http://www.opsi.org/credits/
////

////
;***************************************************************************
; Subversion:
; $Rev$ $Author$
; $Date$
;***************************************************************************
////

:Author:    uib gmbh
:Email:     info@uib.de
:Date:      28.08.2014
:Revision:  4.0.5
:toclevels: 6


include::../common/opsi_terms.asciidoc[]

[[opsi-manual-linux]]
== opsi Linux Support


[[opsi-manual-linux-preconditions]]
=== Preconditions for using the opsi Linux Support


Technical precondition is opsi 4.0.5 with following packet versions:

.Required packets
[options="header"]
|==========================
|opsi packet|version
|opsi-linux-bootimage|>= 20140805-1
|==========================

The opsi support for Linux is based on a free Open Source component (the netboot products) and a co-funded component (the client-agent).

The opsi-linux-client-agent is a
http://www.opsi.org/en/opsi-extensions/[co-funded opsi extension module]. +
For using the opsi Linux extension module, an activation file is required, which can be acquired by buying the extension module. To obtain a temporary activation file for evaluation, please email to info@uib.de. +
For further details on handling extension modules refer to the opsi manual.
////
<<opsi-manual-modules>>.
////

[[opsi-manual-linux-introduction]]
=== Introduction

*A single management tool for Windows and Linux*

The objective of the opsi Linux extension module is to provide a homogenous management system for heterogenous environments. The focus is on integrating both worlds into the same management processes and tools

This means, that a Linux installation is triggered the same way as a Windows installation. The Linux opsi-client-agent is based on the same source code as the Windows client and provides (when applicable) the same opsiscript instruction sets. 

*Independent from Linux distribution*

The opsi Linux Support is designed to be independent from any special Linux distribution. +
The following distributions are supported:

* Debian
* Ubuntu
* OpenSuse / SLES (Suse Linux Enterprise Server)
* Fedora / RHEL (RedHat Enterprise Linux)
* CentOS


[[opsi-manual-linux-netboot]]
=== Linux Netboot products

*Basic OS installation per netboot*

For installing Linux on a client, at first the standard opsi-linux-bootimage is booted per netboot. It is the same image as being used for the Windows installation. +
The bootimage automatically performs the partitioning and formatting of the hard disc (/ and swap). Next the installation of the basic Linux Operating System is performed (including network and ssh, but without X11). The installation process itself is quite different for the individual distributions, but has in common, that the installation is performed directly from the original distribution packets.

The basic Linux installation can be extended with optional opsi packets, for instance to turn the system into an opsi-Server (a new depotserver for instance). +
Also the opsi-client-agent for Linux can be installed, which enables the automated installation and configuration of further software packets.

The opsi-client-agent for Linux is available as a co-funded opsi extension module, the required opsi netboot products for Linux installation are available as free Open Source modules.

Because the base installation is done from the Standard opsi-linux-bootimage, there ar some distribution dependent differences, that have to be installed and configured after the first reboot of the installed system. This is for example the se-linux installation of the 'RedHat like' or the keyboard configuration of the 'Debian like' systems. These after boot installations and patches are done by the standard localboot produkt `l-os-postinst`.

[[opsi-manual-linux-netboot-generalproperties]]
==== Common properties of the Linux netboot products

The following properties for controlling the Linux installation are available with all netboot products:

* `askbeforeinst`: +
confirm start of the new installation on the client? (default='true')

* `architecture`: +
architecture selection - affects the selection of the bootimage and the installation architecture. (default='64bit')

* `system_partition_size`: +
size of the system partition - the size may be given as percent of the harddisk size or as absolute size (G=Gigabyte). If you choose another value than 100%, the remaining rest will be used as data_partition. (default='100%')

* `swap_partition_size`: +size of the swap partition. (default='2000M')

* `data_partition_create`: +
create a data partition if there is some space left. (true/false) (default='true')

* `data_partition_preserve`: +
preserve an existing data partition? +
*always* = cancel the installation in case the preservation of an existing partition with the label 'data' is not possible with the given partition data. +
*if_possible* = an existing partition with the label 'data' is preserved if possible according to the given partioning parameters. Otherwise it will be deleted. +
*never* = a new partition table will be created. (default='never')

* `language`: +
language / locale to be installed (default='de')

* `console_keymap`: +
keyboard layout to be used (default = distribution dependent / 'de')

* `timezone`: +
time zone to be configured (default='Europe/Berlin')

* `root_password`: +
root password  (default='linux123')

* `user_password`: +
user password (default='linux123')

* `install_opsi_server`: +
install opsi server packages (default='false')


* `online_repository`: +
repository to use for installation -
repository of the Linux distribution to be used for installation (not for SLES) (default = distribution dependent)

* `opsi_online_repository`: +
repository for opsi-server installation -
repository for the opsi-server packets (default = distribution dependent)

* `proxy`: +
proxystring (if required) as: `http://<ip>:<port>` (default=pass:[''])

* `additional_packages`: +
additional packets to install. Packet names separated by blanks. (default=pass:[''])

* `wget_and_execute`: +
fetch a file via wget and execute it -
URL (http) of a file to be executed at the end of installation. (default=pass:[''])

* `install_opsi-client-agent`: +
install the Linux opsi-client-agent (cofunding project: has to be activated by the /etc/opsi/modules) (default='false')

* `release`: +
(Debian and Ubuntu only) +
which release of the distribution is to be installed? (default = distribution dependent)

* `setup_after_install`: +
opsi product(s) to be installed after the OS installation is done 
(opsi products to be set to 'setup') (default='l-os-postinst')

[[opsi-manual-linux-netboot-special]]
==== Netboot products for Linux distributions

[[opsi-manual-linux-netboot-special-ubuntu]]
===== Ubuntu

The basic installation is performed per debootstrap directly from the network.

This product has the status 'productive'.

It is UEFI/GPT compatible (tested for release=trusty).

For this product applicable opsi-server packets are available, that can be installed by setting 'install_opsi_server=true'.


[[opsi-manual-linux-netboot-special-debian]]
===== Debian

The basic installation is performed per debootstrap directly from the network.

This product has the status 'productive'.

It is UEFI/GPT compatible (tested for release=wheezy).

For this product applicable opsi-server packets are available, that can be installed by setting 'install_opsi_server=true'.

[[opsi-manual-linux-netboot-special-opensuse]]
===== OpenSuse

The basic installation is performed by using the products embedded RPM files.
Therefore each release requires a corresponding product.

.OpenSuse 12.3

This product has the status 'productive'.

This product is *not* UEFI compatible.

For very new releases the opsi-server packets might not be available yet. In this case using the property 'install_opsi_server=true' might cause some errors.

.OpenSuse 13.1

This product has the status 'productive'.

This product is *not* UEFI compatible.

For this product applicable opsi-server packets are available, that can be installed by setting 'install_opsi_server=true'.

Known Bugs: At some Hardware (eg. VMWare ESXi) the prediction of the network interface fails and the machine starts with unconfigured network interface.

[[opsi-manual-linux-netboot-special-sles]]
===== SLES

The basic installation is performed by using the products embedded RPM files.
Therefore each release requires a corresponding product.

The SLES product contains some RPMs which are not available as Open Source, so we cannot provide this product for public download. But we can provide the packet for our customers at no charge ( -> mail to info@uib.de).
  
This product has the status 'productive'.

For very new releases the opsi-server packets might not be available yet. In this case using the property 'install_opsi_server=true' might cause some errors.

This product is *not* UEFI compatible.

This product has additional properties:

* `use_gpt` +
when set to `true`, the hard disc (also in MBR-BIOS mode) will be partitioned as GPT. This requires a boot partition. In case the property `boot_partition_size` is set to 0, nevertheless a boot partition of size 1 GB will be created.

* `boot_partition_size` +
size of the boot partition - in case of 0 no boot partition will be created.

* `kernel_modules` +
blank separated list of additional kernel modules to be loaded (e.g. for special hard disc controller).

* `suse_register` +
In case of `true` the server will be registered online. This requires the email address and the product key (registration key) in form of `email:productkey`. The key is retrieved (depending on the host parameter `license-management.use`) from the license management or from the property `productkey`. +
In case of `false` the property `local_repositories` must contain at least one suitable repository server.

* `productkey` +
email address and registration key in form of `email:productkey` (if no license management used).

* `local_repositories` +
blank separated list of repositories to be integrated per zypper, in form of: "http://myserver.local description"

The property `online_repository` is omitted.

[[opsi-manual-linux-netboot-special-centos]]
===== CentOS

The basic installation is performed by using the products embedded RPM files.
Therefore each release requires a corresponding product.

This product has the status 'under development'.
Outstanding features are: localisation.

For this product applicable opsi-server packets are available, that can be installed by setting 'install_opsi_server=true'.

This product is *not* UEFI compatible.

.CentOS 7

This product is not available yet.

[[opsi-manual-linux-netboot-special-fedora]]
===== Fedora

The basic installation is performed by using the products embedded RPM files.
Therefore each release requires a corresponding product.

.Fedora 20

This product has the status 'testing'.

For new releases the opsi-server packets might not be available yet. In this case using the property 'install_opsi_server=true' might cause some errors.

This product is *not* UEFI compatible.

[[opsi-manual-linux-netboot-special-rhel]]
===== RHEL

This product is not available yet.

[[opsi-manual-linux-clientagent]]
=== opsi-linux-client-agent

The opsi-client-agent for Linux ist part of the co-funding project 'Linux Agent', which is liable to pay costs.

The opsi-client-agent for Windows is based on two components:

. the service `opsiclientd`

. the action processor `opsi-winst / opsi-script`

The opsi-client-agent for Linux is based on the Linux port of the Windows client agent.

With the first release of opsi Linux, the Linux port of the `opsiclientd` has not been completed yet, so it is replaced by the `opsiscriptstarter`, which performs the following `opsiclientd` tasks at system start:

* connect to the opsi-server: check whether actions are to be performed
* mount the depot share
* start the action processor
* unmount the depot share
* transfer the logfile to the server

The Linux action processor is named opsi-script and is built from the same sources as the Windows opsi-winst. So on Linux the same scripting syntax is available as on Windows. All common features, that are not Windows specific, are available, as there are e.g.: 

* file handling
* string and stringlist functions
* executing external scripts and programs
* communication with the opsi-Server
* patching config files

Of course Windows specific features (like patching the Windows registry) are not available on Linux, but there are some additional Linux specific functions like e.g.:

* getLinuxDistroType
* getLinuxVersionMap

Logging of the opsi-script ist available (like with the opsi-winst on Windows).

Linux opsi-script is available as a grafical version for working with X-Windows and a noGUI version for systems without grafical user interface.

[[opsi-manual-linux-clientagent-knownbugs]]
=== opsi-linux-client-agent: Known Bugs

Copy a bundle of files via Files section from a smb share may fail according to the Samba version

Workaround:
Instead of:
[source,winst]
----
[Files_copy_netboot]
copy -s "%scriptPath%/installfiles/*" "$target$/installfiles/"
----
you may use:
[source,winst]
----
[ShellInAnIcon_opsi_copy_netboot]
set -x
export PATH=/usr/local/bin:/usr/bin:/bin:/usr/local/sbin:/usr/sbin:/sbin
cd "%scriptPath%"
tar cf - installfiles | ( cd "$target$/installfiles/" ; tar xf - )
----


[[opsi-manual-linux-clientagent-places]]
==== opsi-linux-client-agent: installation paths

As usual on Linux, the linux-opsi-client-agent is spread to several directories:

the binaries:

`/usr/bin/opsi-script` (X11)

`/usr/bin/opsi-script-nogui` (without X11)

`/usr/bin/opsiscriptstarter` (preliminary opsiclientd replacement)

auxiliary files:

`usr/bin/winstskin/`

config files:

`/etc/opsi-client-agent/opsiclientd.conf` (configuration of the opsiscriptstarter/opsiclientd)

`/etc/opsi-client-agent/opsi-script.conf` (under construction)

logfiles / temporary files:

`/var/log/opsi-client-agent`

[[opsi-manual-linux-scriptexample]]
==== Script examples

For software deployment on Windows clients there can be said: the installation of software itself is as important as the subsequent configuring of the software. +
On Linux most packets are available from the distribution repositories. So the installation part is less, but the configuration part stays the same. Also there are applications, that are not available from the standard repositories. 
In this case special repositories or installation sources have to be added to the system. The important feature is, that all installation and configuration settings can be managed and logged on the opsi-server. 

Here are some example snippets for an opsi-linux-client-agent opsi-script:

* exit in case the script detects a non Linux system
* detecting the distribution type (to use `apt-get`, `zypper` or `yum`)
* detecting the Linux version
* installing a packet
* adding a repository

Example: exit in case the script detects a non Linux system:

[source,winst]
----
[Actions]
requiredWinstVersion >= "4.11.4.1"
ScriptErrorMessages=off

DefVar $OS$

set $OS$ = GetOS

if not($OS$ = "Linux")
	LogError "Wrong OS: Product: " + $ProductId$ + "is only for Linux"
	isFatalError "Wrong OS"
endif
----

Example: detecting the distribution type:

[source,winst]
----
[Actions]
requiredWinstVersion >= "4.11.4.1"
ScriptErrorMessages=off

DefVar $distrotype$

set $distrotype$ = getLinuxDistroType

if $distrotype$ = 'debian'
	ShellInAnIcon_Upgrade_deb
else
	LogError "Wrong Distro: This Product is for Debian/Ubuntu only"
	isFatalError "Wrong distro"
endif

if not("0" = getLastExitCode)
	Message "failed ShellInAnIcon_Upgrade"
	LogError "failed ShellInAnIcon_Upgrade"
	isFatalError "failed Upgrade"
endif


[ShellInAnIcon_Upgrade_deb]
set -x
export DEBIAN_FRONTEND=noninteractive
apt-get --yes install aptitude
apt-get update
apt-get --yes dist-upgrade
exit $?
----


Example: detecting the Linux version and installing a packet:

[source,winst]
----
[Actions]
requiredWinstVersion >= "4.11.4.1"
ScriptErrorMessages=off

DefVar $distCodeName$
DefVar $distroName$
DefVar $distRelease$
DefVar $desktop$

DefStringList $linuxInfo$

set $linuxInfo$ = getLinuxVersionMap
set $distCodeName$ = getValue("Codename", $linuxInfo$)
set $distRelease$ = getValue("Release", $linuxInfo$)
set $distroName$  = getValue("Distributor ID", $linuxInfo$)

set $desktop$ = GetProductProperty("desktop", "kde")


if $distrotype$ = 'suse'
	if $desktop$ = "unity"
		Message " No Unity on SUSE - fallback to KDE ..."
		set $desktop$ = "kde"
	endif ; unity

	
	if $desktop$ = "kde"
		if ($distroName$ = 'openSUSE project')
			ShellInAnIcon_kde_suse
		endif
		if ("SUSE LINUX" = $distroName$) and ($distRelease$ = "11")
			ShellInAnIcon_kde_sles11
		endif
		if not("0" = getLastExitCode)
			LogError "failed ShellInAnIcon"
			Message "failed kde"
			isFatalError "failed kde"
		endif
	endif ; kde
endif; suse type

[ShellInAnIcon_kde_suse]
set -x
zypper --no-gpg-checks --non-interactive install patterns-openSUSE-kde4 patterns-openSUSE-kde4_basis
zypper --no-gpg-checks --non-interactive install splashy-branding-openSUSE
exit $?

[ShellInAnIcon_kde_sles11]
set -x
zypper --no-gpg-checks --non-interactive install --auto-agree-with-licenses -t pattern kde
exit $?
----


Example: adding a repository:
[source,winst]
----
[Actions]
requiredWinstVersion >= "4.11.4.1"
ScriptErrorMessages=off

DefVar $distCodeName$
DefVar $distroName$
DefVar $distRelease$
DefVar $desktop$

DefStringList $linuxInfo$

set $linuxInfo$ = getLinuxVersionMap
set $distCodeName$ = getValue("Codename", $linuxInfo$)
set $distRelease$ = getValue("Release", $linuxInfo$)
set $distroName$  = getValue("Distributor ID", $linuxInfo$)

set $desktop$ = GetProductProperty("desktop", "kde")


if $distroName$ = 'Ubuntu'

	if $desktop$ = "cinnamon"
		set $desktopPackage$ = $desktop$
		ShellInAnIcon_ubuntu_cinnamon
		if not("0" = getLastExitCode)
			Message "failed ShellInAnIcon_ubuntu_cinnamon"
			LogError "failed ShellInAnIcon_ubuntu_cinnamon"
			isFatalError "failed cinnamon"
		endif
	endif ; cinnamon
endif; ubuntu

[ShellInAnIcon_ubuntu_cinnamon]
set -x
export DEBIAN_FRONTEND=noninteractive
# we need to get the add-apt-repository command
apt-get --yes --force-yes install python-software-properties
# the cinnamon repository
add-apt-repository ppa:gwendal-lebihan-dev/cinnamon-stable
apt-get update
apt-get --yes install ubuntu-desktop
exit $?
----

[[opsi-manual-linux-localboot]]
=== Linux localboot products

Here some localboot products that are part of the standard opsi Linux support.

[[opsi-manual-linux-localboot-l-os-postinst]]
==== l-os-postinst

This product installs and configures those parts of the base installation, that cannot be done from the bootimage in a proper way.

This is for the different distributions:

* Fedora / CentOS: 

** installation of se-linux

* Fedora: 

** installation of se-linux

This product has a dependency to the product 'l-system-update' which is executed before running 'l-os-postinst'. +
This product has a high priority, so it is executed before common products.

[[opsi-manual-linux-localboot-l-desktop]]
==== l-desktop

The product l-desktop installs a desktop packet on the computer.

The property `desktop` selects the desktop to be installed. Not all of the desktops are available for every distribution. For instance 'Unity' is available for Ubuntu only. If the selected desktop is not available, the distribution specific default desktop will be installed. Furthermore the scope of the desktop packets differs according to the distribution and the selected desktop. It can be just the actual desktop software, or might also contain some base products like libreoffice, firefox, PDF Reader etc.

The property `desktop` can have the following values:

* Gnome +
Default for Debian, Fedora, CentOS, RHEL. +
Available for all distributions.

* KDE +
Default für SLES, OpenSuse.
Available for all distributions.

* Unity +
Available for Ubuntu only.

* Cinnamon +
Available for Ubuntu only.

* xfce4 +
Available for Ubuntu, Debian, Fedora.

* lxde +
Available for Ubuntu, Debian.


[[opsi-manual-linux-localboot-l-system-update]]
==== l-system-update
This product updates the system.

[[opsi-manual-linux-localboot-l-swaudit]]
==== l-swaudit
Software inventory, based on the packet manager

[[opsi-manual-linux-localboot-l-hwaudit]]
==== l-hwaudit

Hardware inventory. +
The hardware inventory currently is based on the Python implemented method as also used by the bootimage. Therefore the packet `python-opsi` from the opsi-repository of the distribution must be installed. So if there is no opsi-repository available for this distribution, the hardware inventory fails.

[[opsi-manual-linux-localboot-l-jedit]]
==== l-jedit

Java based editor with syntax highlighting for opsi-script. If Java is missing on the system, it will be installed automatically.


[[opsi-manual-linux-inventory]]
=== Inventory

To create an inventory, the data are collected on the client and sent to the server. The hardware inventory is based on the methods implemented in the bootimage. 

The software inventory is based on the data from the packet management of the deployed Linux distribution.

[[opsi-manual-linux-uefi]]
=== UEFI / GPT support

With opsi 4.0.5 an increasing number of Linux products are UEFI/GPT compatible. For details refer to the list of netboot products above.

[[opsi-manual-linux-roadmap]]
=== Roadmap

Linux support is a brand new opsi feature. Therefore not all of the planned features have been implemented yet with the first release. +
Planned features to follow are:

* opsiclientd Linux port
* configurable partitioning
* logical volume management
* patching XML- and JSON files
* patching hierarchical configuration files like dhcpd.conf


[[opsi-manual-linux-debproxy]]
=== Proxy for deb packets

Instructions for installation and use of local deb packets:

German: 

* http://wiki.ubuntuusers.de/Lokale_Paketquellen/Apt-Cacher-ng

* http://www.gambaru.de/blog/2011/10/26/apt-cacher-ng-ein-proxy-server-fur-debian-und-ubuntu/

English: 

* https://help.ubuntu.com/community/Apt-Cacher-Server

* http://www.distrogeeks.com/install-apt-cacher-ng-ubuntu/

* http://manpages.ubuntu.com/manpages/gutsy/man1/apt-cacher.1.html


