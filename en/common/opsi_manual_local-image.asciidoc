////
; Copyright (c) uib gmbh (www.uib.de)
; This documentation is owned by uib
; and published under the german creative commons by-sa license
; see:
; http://creativecommons.org/licenses/by-sa/3.0/de/
; http://creativecommons.org/licenses/by-sa/3.0/de/legalcode
; english:
; http://creativecommons.org/licenses/by-sa/3.0/
; http://creativecommons.org/licenses/by-sa/3.0/legalcode
; 
; credits: http://www.opsi.org/credits/
////

////
;***************************************************************************
; Subversion:
; $Rev$ $Author$
; $Date$
;***************************************************************************
////

:Author:    uib gmbh
:Email:     info@uib.de
:Date:      01.08.2014
:Revision:  4.0.5
:toclevels: 6

include::../common/opsi_terms.asciidoc[]

[[opsi-manual-localimage]]
== opsi extension 'opsi local image'

[[opsi-manual-localimage-preconditions]]
=== Preconditions for the opsi extension 'opsi local image'

This module currently is a 
http://www.opsi.org/en/opsi-extensions[cofunding project]. +
Some preconditions have to be met to use this module. So it requires a special modules file to unlock this feature. This module file can be obtained by buying the extension module. For evaluation we also provide a temporary modules file without charge ( -> mail to info@uib.de). +

////
Further details on extension modules can be found in <<opsi-manual-modules>>.
////

IMPORTANT: The sale of this extension is restricted. Please ask for an offer.

As a technical precondition opsi 4.0.3 is required with the packet versions:

.Required packets
[options="header"]
|==========================
|opsi packet|version
|opsi-linux-bootimage|>= 20130207-1
|==========================

[[opsi-manual-localimage-introduction]]
=== Introduction

Opsi is a good point to start the the automated installation and maintenance of Windows clients - especially when there is heterogenous hardware to be managed. But the opsi standard installation technique based on installation packets is not fast enough to restore class room workstations in short time, like during the break between two classes. So this module is introducing a new concept, by saving the result of the package based installation as an image on a second partition. From this partition the recovery can performed in short time.

. Initial installation with mit concluding local image backup
. Fast recovery based on different techniques
. System maintenance with concluding local image backup
. Integration of Linux clients into the Backup/Restore procedure.

[[opsi-manual-localimage-concept]]
=== Concept

The requirements of computer networks for education / trainings / class rooms differ from those of other networks. An important requirement, which will be discussed in the following, is the fast recovery of workstations to regain a clean and well known installation status, which has been spoiled by temporary use. This is required for workstations in class rooms, but also for computer pools at universities or any networks for commercial trainings. 

The restore must be completed within reliable short time (like the 15 minutes break between two classes) and should also be able to switch the workstations to a differnet base installation (like Win XP / Win 7 / Linux). Also the continuous system maintenance by installing security updates must be included.

opsi is a client management system, that features the packet based installation and maintenance of Windows systems. Its advantage, compared to image based concepts, is especially the handling of heterogenous hardware. The average installation time of two hours is not fast enough to meet the requirements stated above. Image based solutions can be much faster, but also might run into network problems when trying to restore the workstations for a whole class room at once. This problem can be solved by local buffered images. This concept is used for instance by the Linux based system LinBo (Source http://linbo.sourceforge.net/). But even with local buffered images the time limit of 15 minutes might be exceeded because on the hardware in use (like hard disc performance).

Another possible solution would be to lock the system state and redirect all write access to an external container, that can be discarded at system reset. For Linux this approach is used e.g. with FUSE file systems. For windows there exist some commercial products, that can be controlled from the command line and thereby could be used from opsi. But as far as we know, there are no Open Source products available for Windows. So this approach is not available for Open Source solutions.

The resulting solution, that is introduced here, is trying to combine the advantages of the different approaches, to avoid the disadvantages and to provide some scalability to support differing hardware performances. The main features of this combined concept are:

* Initial Windows installation per PXE boot, packet based with individual driver integration by using the opsi-Linux-Bootimage

* Storing the result of the initial installation as a backup image on another partition on the local disc by using the opsi-Linux-Bootimage

* Fast recovery of the installation by using the opsi-Linux-Bootimage

* Maintenance of the local installation (security updates) by using the opsi system and storing the updated system to the local backup-image by using the opsi-Linux-Bootimage

[[opsi-manual-localimage-concept-technical]]
=== Technical Concept

The workstation is being used with a static partition table of three or four partitions.:

* Partition 1 (System) +
holds the currently installed operating system (Windows / Linux). +
The size of this patition is set during partitioning by the product `opsi-local-image-prepare` according to the particular property state.

* Optional: Partition 2 (sysdata) +
These are user data that are to sustain during the restore. The format is NTFS. +
The size of this patition is set during partitioning by the product `opsi-local-image-prepare` according to the particular property state.

* Partition 3 (winpe / swap) +
The size of this partition is static and set to 4GB. +
With Windows XP this partition is not used. +
With NT6 (Windows 7) this partition is used during installation for the winpe (which is required for installation) and will not be visible during the operating state of the workstation. +
With Linux this partition is used as swap.

* Partition 4 (backup) +
This partition is for holding the backup images and their meta data. +
The size of this partition is whatever is left by the other partitions.

The netboot products for the operating system installation use the first two or three partitions (XP the first one only) and do not touch the last partiton. So the backup images on partiton four are still available after installating a new operating system.


[[opsi-manual-localimage-components]]
=== Components

The packet 'opsi-local-image' consists of several components:

The netboot products

* `opsi-local-image-prepare`
* `opsi-local-image-winxp`
* `opsi-local-image-win7`
* `opsi-local-image-win7-x64`
* `opsi-local-image-win8`
* `opsi-local-image-win8-x64`
* `opsi-local-image-win81`
* `opsi-local-image-win81-x64`
* `opsi-local-image-ubuntu`
* `opsi-local-image-backup`
* `opsi-local-image-restore`
* `opsi-local-image-delete`
* `opsi-local-image-capture`

The local boot products:

* `opsi-local-image-backup-starter`
* `opsi-local-image-sysprep`

and an extension of the opsi service methods.

[[opsi-manual-localimage-components-part]]
==== netboot product for partitioning
 
* `opsi-local-image-prepare` +
To create the static partitioning of the hard disc for all other products. +
The property `system_partition_size` defines the size of partition 1 (Default = 30G) 

The property `data_partition_size` defines the size of the partition 2. When set to '0G', no partition will be created for data (default = 0G).

The property `start_os_installation` selects a product for installing an operating system and to be started after the partitioning automatically.
When installing this product, the product properties 'imagefile' and 'imagefiles_list' of the product `opsi-local-image-restore` are deleted, for they have become invalid after the repartitioning.

IMPORTANT: Use this product only for the initial preparation of the disc for it deletes all existing images.

[[opsi-manual-localimage-components-win]]
==== netboot products for installing Windows

The special netboot products for installing Windows are derived from the opsi standard products for windows installation. Therefore the structure and the driver integration are the same as with the standard. For details please refer to the 'opsi-getting-started' manual.

* `opsi-local-image-winxp` +
Installation of Windows XP. Uses the first partition only.
Administrator password is empty.

* `opsi-local-image-win7` +
Installation of Windows7 32 Bit.
Administrator password = `nt123`.

* `opsi-local-image-win7-x64` +
Installation of Windows 7 64 Bit.
Administrator password = `nt123`.

* `opsi-local-image-win8` +
Installation of Windows 8 32 Bit.
Administrator password = `nt123`.

* `opsi-local-image-win8-x64` +
Installation von Windows 8 64 Bit.
Administrator password = `nt123`.

* `opsi-local-image-win81` +
Installation von Windows 8.1 32 Bit.
Administrator password = `nt123`.

* `opsi-local-image-win81-x64` +
Installation von Windows 8.1 64 Bit.
Administrator password = `nt123`.

The following products have special properties for 'opsi-local-image':

* 'backup_after_install' with default value 'true'. In this case this means, that after the OS installation at first the application software is being installed and then an image backup of the installation is generated. Furthermore the value of `imageFile` of the product `opsi-local-image-restore` will be deleted. So the generated backup will be named like the current netboot product (e.g. `opsi-local-image-win7`).

* 'setup_after_install' +
Here one or more products can be listed, that after the OS installation shall be set to 'setup'. This includes the dependencies of these products.

[[opsi-manual-localimage-components-linux]]
==== Netboot products for installing Linux

* `opsi-local-image-ubuntu` +
Installation of Ubuntu Linux 12.04/14.04 32Bit/64Bit. +
The installed system has 2 users: `root` and `user`. The password for 'root' will be set according to the product property `root_password` (default: `linux123`). For 'user' the password will be set according to `user_password` (default: `linux123`).
Details of the installation can be configured with some product properties. The main product properties are: 
** `askbeforeinst`: +
Has the start of the installation to be confirmed at the client? (default='true')
** `architecture`: +
architecture selection, affects the selection of the bootimage and the installation architecture  (default='64bit')
** `additional_packages`: +
list of additional packets to be installed, separated by blanks (default = pass:[''])
** `language`: +
language / locale to be installed  (default='de')
** `console_keymap` +
keyboard layout to be installed  (default='de-latin1-nodeadkeys')
** `timezone`: +
timezone to be set  (default='Europe/Berlin')
** `online_repository` +
the online repository to get the install packets from. Default is 'http://de.archive.ubuntu.com/ubuntu' 
** `proxy`: +
Proxystring (if required) with following syntax: `http://<ip>:<port>`  (default = pass:[''])
** `backup_after_install` +
('true'/'false') default = 'true'. If true, after the installation an image backup will be generated.
** `setup_after_install` +
Here one or more products can be listed, that are to be set to 'setup' and so will be installed after the OS installation. This also includes the dependencies of these products.
** `wget_and_execute`: +
Url (http) of a file to be fetched and executed at the end of the installation (default = pass:[''])
** `release`: +
Ubuntu release to be installed  (default="trusty")
** `install_opsi-client-agent`: +
The Linux opsi-client-agent is to be installed if 'true' (this is a co-funding project and requires activation by /etc/opsi/modules)  (default='false')


[[opsi-manual-localimage-components-backuprestore]]
==== Netboot product for backup and restore

* `opsi-local-image-backup` +
This product saves the OS which is installed on partition 1 as an image on partition 3. The image name will be set according to the property `imageFile`. If this is empty, the name of the opsi netboot product will be used, that currently is set to 'installed' (e.g. `opsi-local-image-winxp`). This name also is set as the product property 'imagefile' of the product `opsi-local-image-restore`, so that a following call of `opsi-local-image-restore` is going to restore this image. This name also will be added to the product property 'imagefiles_list' of the product `opsi-local-image-restore`. So this property holds the list of all available images. Furthermore (for Windows products) the current opsi product settings will be saved together with the image, so they also can be restored. +
The backup tool in use is partclone. +
Properties:
** `imagefile` +
name of the image file to be generated (default = empty = automated name setting). The name may include spaces, but no umlauts (like ä, ö, ü). (In case of spaces they will internally be treated as underscore. So 'my image' = 'my_image'.

* `opsi-local-image-restore` +
This product restores the image defined by the product property 'imagefile' to partition 1 and makes it bootable. Furthermore (for Windows products) the product settings connected with this image will be restored. +
Properties:
** `imagefile` +
Name of the image to be restored. The value of this property has been set automatically by the last backup. The list of available images is to be found in the property `imagefiles_list`.
** `imagefiles_list` +
List of all available images. This list is managed automatically by the backup product.
** `method` +
method to be used to restore images. Available methods are `partclone-image-restore` and `rsync-partclone-image`. The default is set to `rsync-partclone-image`. The method `rsync-partclone-image` requires that the operating system that had been backuped is residing on partition 1. So this method can be used for restoring minor changes of the currently installed operating system, but it cannot switch between several operating systems. The method `partclone-image-restore` generates a full image backup. The method `rsync-partclone-image` currently (10.7.2013) is available for Windows (NTFS file system). If the 'method' is set to `rsync-partclone-image` for a Linux image or for an image that has been generated from another Windows version as the one which is currently installed on the productive partition, it will automatically use the method `partclone-image-restore`. +
If the restore with the method `rsync-partclone-image` fails, the restore will continue automatically by using the method `partclone-image-restore`. +
The method `rsync-partclone-image` is advantageous in case of minor changes  on slow (IDE) discs. With state of the art (SATA) discs we generally recommend  using `partclone-image-restore`.
** `update_and_backup` +
('true'/'false') default = 'false'. If set to 'true', after the restore all localboot products, that have a different version on the server, will be set to `setup` and the product `opsi-local-image-backup-starter` will be set to `once`. This results in installing all available updates of the products and then automatically generating a backup.
** `setup_after_restore` +
can be set to one or multiple opsi products, that after the restore are to be set to 'setup', so that after the reboot they will execute automatically. The default is set to the product 'windomain' to add the restored client to the Windows domain again.

* `opsi-local-image-delete` +
This product deletes the image given by the product property 'imagefile' from the backup partition +
** `imagefile` +
Name of the image to be deleted (default = empty, results in an error when executing)

[[opsi-manual-localimage-components-helper]]
==== Localboot product for process control

* `opsi-local-image-backup-starter` +
This localboot product sets the Netboot product `opsi-local-image-backup` to 'setup' and reboots the client. This product has a very low priority of -98. This means, that all usual localboot products will be installed first. This feature can be used as follows: +
For a client the following products are set to `setup`: +
* The product `opsi-local-image-restore`
* all localboot products that are outdated
* The product `opsi-local-image-backup-starter`

This results in the following process order:

. restore of the image
. update of the restored operating system (all outdated products are updated)
. backup of the updated  operating system

[[opsi-manual-localimage-service-methods]]
=== Extended opsi service methods

With this extension the clients of a training classroom can be listed as a opsi-client group. The following extensions have been implemented to provide comfortable collective action management for all clients of a classroom:

* `setProductActionRequestForHostGroup` +
Parameter: `hostGroupId, productId, actionRequest` +
allows to start a defined action (like image restore) for all members of a group (e.g. clients of a training classroom).

* `setProductPropertyForHostGroup` +
Parameter: `productId propertyId propertyValue hostGroupId` +
allows to set a given product property (like which image is to be restored) for all members of a group (e.g. clients of a training classroom).

* `getPossibleImagefileValuesForHostGroup` +
Parameter: `groupId` +
gets the list of present imagefile names that have been generated by `opsi-local-image-backup` on all members of the group. If a special image (like `opsi-local-image-winxp`) is not available on one or more of the clients, it will not be on the returned list.

These methods will be integrated into the opsi standard packets at a later date. Until then these extensions are available by executing the file `40_groupActions.conf`, which is part of this release. Please copy it with  'root' rights to `/etc/opsi/backendManager/extend.d` and execute: 
`opsi-setup --set-rights /etc/opsi`.

[[opsi-manual-localimage-proceedings]]
=== Process steps

[[opsi-manual-localimage-proceedings-initial]]
==== Initial Installation

The product `opsi-local-image-prepare` first generates the required static partitioning.

.schema: static partitioning with opsi-local-image-prepare
image::oli-prepare.png["schema: static partitioning with opsi-local-image-prepare", width=332]

Then the products `opsi-local-image-winxp`, `opsi-local-image-win7`, `opsi-local-image-win7-x64` and `opsi-local-image-ubuntu` can install several operating systems with different client configuration and different application software. 

.schema: OS installation with opsi-local-image-win*
image::oli-os-install.png["schema: OS installation with opsi-local-image-win*", width=332]

Per default after the installation they will be backuped as image.

.schema: image backup with opsi-local-image-backup
image::oli-backup-1.png["schema: image backup with opsi-local-image-backup", width=332]


[[opsi-manual-localimage-proceedings-restore]]
==== Restoring an image

Executing the product `opsi-local-image-restore` per default restores the image that has been generated recently. In case a different image is to be restored, the name of the image has to be specified by the property `imagefile`.

.schema: image restore with opsi-local-image-restore
image::oli-restore-image.png["schema: image restore with opsi-local-image-restore", width=332]

[[opsi-manual-localimage-proceedings-update]]
==== Updating an image

By executing the product `opsi-local-image-restore` with the property setting `update_and_backup` = 'true' the given image will be restored, all application software will be updated (as updates are available on the server) and finally a backup is generated.

[[opsi-manual-localimage-proceedings-delete]]
==== Deleting an image

By executing the product `opsi-local-image-delete` the image that is specified by the property `imagefile` will be deleted.

[[opsi-manual-localimage-backuppartition]]
=== Backup partition

The backup partion is (with MBR BIOS without data partition) the third partition of disc one. +
It contains:

* The file `master.log` with information about all image operations performed. This logfile is transfered to the bootimage logs.
* The image files +
The image directories have the same name as the image and hold the image and the meta files of the image. +
To give an idea about file sizes, here as an example the sizes of different image files with OS and standard software (Libreoffice, Adobereader, firefox, thunderbird, javavm, flashplayer): 
* `opsi-local-image-ubuntu`: 3.6G
* `opsi-local-image-winxp`: 6.4G
* `opsi-local-image-win7`: 9.4G
* `opsi-local-image-win7-x64`: 13G

[[opsi-manual-localimage-wimcapture]]
=== Capture Images (WIM) generating and distribution

[[opsi-manual-localimage-wimcapture-introduction]]
==== Capture Images (WIM) Introduction

Starting with NT6 (Vista) Microsoft has introduced the new image format *Windows Imaging Format (WIM)* for installation.
A WIM image is not a disc or partition image anymore, but a file and meta archive. A WIM file can hold several images. The standard installation of a NT6 client is based on a setup.exe extracting an installation image from the file install.wim which is then to be configured and equipped with additional drivers.

From an existing client the Windows operating system including the installed software and configuration can be extracted and saved in form of a WIM. Then such a WIM can be the starting point for a new installation.

[[opsi-manual-localimage-wimcapture-components]]
==== Capture Images (WIM) Components

The packet 'opsi-local-image' consists of several components:

The netboot products:

* `opsi-local-image-capture`

The localboot products:

* `opsi-local-image-sysprep`
////
* `opsi-set-wim-imagenames`
* `opsi-del-wim-images`
////
* `opsi-client-agent` >= Version 4.0.4.5-3


[[opsi-manual-localimage-wimcapture-proceedings]]
==== Capture Images (WIM) Processing

*Generating the master client:* +
this will be generated with 'opsi-local-image' as client and can get software and configuration per opsi as well as manually.

*sysprep: depersonalisation of the master:* +
for that an image can be the starting point of an installation, at first it must be prepared. The client has to be depersonalised, so that the client has no identity anymore and so can be the template for new installations. But being depersonalised it can not be used as a working client anymore. +
So with the product 'opsi-local-image-sysprep' by special properties can be configured, whether there has to be created a backup before depersonalisation: 

`always_backup_before_sysprep` (true/false) default=true: always make a backup before starting the sysprep. 

`abort_on_no_backup` (true/false) default=true: check whether the backup partition has a backup for this product and abort if not. After the sysprep usually the actual capture will be started, which is performed by the netboot product 'opsi-local-image-capture'. Whether it starts automatically is set by the property: 

`startcapture` (true/false) default=true: set the product 

`opsi-local-image-capture` to 'setup' and reboot the client.

.capture images: configed: opsi-local-image-sysprep
image::oli-capture-configed-sysprep.jpg["capture images: configed: opsi-local-image-sysprep", width=500]

*capture: read the existing installation and provide for installation:* +
within this multi-stage process the existing client will be readout and integrated as WIM into an existing opsi Windows installation product. So there is a product property to define, in which product the image readout is to be integrated:

`target_product`: name of target product (default = pass:['']) 

IMPORTANT:  this property isn't smart, so it does not check whether the image matches the specified target. So you could by mistake integrate a Win7-32Bit into a Win81-64Bit product without getting an error or warning message. So you must take care not to do so! We recommend using special capture target products (like `opsi-local-image-win81-x64-capture`). 

The target product, like the standard product for Windows installation must be prepared. The target file within the target product is `install.wim` (`installfiles/sources/install.wim`), that also includes the images provided by Microsoft. Whether the image readout has to be appended to this file or a new `install.wim` has to be generated, is defined by the property:

`capture_mode` (append/always_create) default = 'append': +
with `append` the new image will be appended to the existing `install.wim`.

IMPORTANT: In case the `install.wim` contains an image with the same name it will be *deleted without notice*. With `always_create` a new `install.wim` will be created. 

The `install.wim` file is a container that can hold several images. The images have a name and a description. The name and the description of the new created images is set by these properties:

`imagename`  default = pass:[''] 

`image_description`  default = pass:['']

The property `start_after_capture` is a list of products, which have to be set to 'setup' after the capture. This could be for instance 'opsi-local-image-restore', which restores the client from the backup that had been generated before the sysprep.

.capture images: configed: opsi-local-image-capture
image::oli-capture-configed-capture.jpg["capture images: configed: opsi-local-image-capture", width=500]

.capture images: schema: sysprep
image::oli-capture-sheme-sysprep.png["capture images: schema: sysprep", width=500]

.capture images: opsi-local-image-sysprep 1 : start
image::oli-capture-sysprep1.jpg["capture images: opsi-local-image-sysprep 1 : start", width=350]

.capture images: opsi-local-image-sysprep 2 : backup before sysprep
image::oli-capture-sysprep1-backup.jpg["capture images: opsi-local-image-sysprep 2 : backup before sysprepp", width=350]

.capture images: opsi-local-image-sysprep 3 : deactivating the opsi-client-agent
image::oli-capture-sysprep2a.jpg["capture images: opsi-local-image-sysprep 3 : deactivating the opsi-client-agent", width=350]

.capture images: opsi-local-image-sysprep 4 : actual sysprep
image::oli-capture-sysprep2b.jpg["capture images: opsi-local-image-sysprep 4 : actual sysprep", width=350]

With the property `startcapture` the capture process can be started directly following the sysprep. +
The capture process basically consists of two phases: +
the actual capture process is performed by winpe on the disc. Therefore this must be prepared and this is phase one:

* Activating WinPE as bootable partition, generating the required boot records and, if necessary, deactivating the drive letter for other partitions.

* Reading the opsi meta data about installed products on the client and saving these date on the client in a temporary directory.

* Some cleanups on the readout system.

* Writing a command file, that initiates the capture process at the next start of WinPE.

* Providing some more files for the processing of WinPE like the list of products from the property `start_after_capture`

* Rebooting the client

.capture images: schema: capture 1
image::oli-capture-scheme-capture1.png["capture images: sSchema: capture 1", width=500]

During the second phase WinPE starts and executes the actual capture process. In detail: 

* mount the opsi_depot_rw share for writing.

* check the architecture of WinPE (32/64 bit) and start the opsi-script in the corresponding architecture.

* connect to the opsi-webservice

* reactivating the drive letters

* in case of `append` mode: check whether an image with this name exists and in case deletge this existing image.

* start the capture process. Doing so, depending on the Windows version of the WinPE, on Windows 7 the program imagex from the 'opsi-local-image-capture' product will be used. On Windows 8 the programm dism from WinPE will be used (with fallback to imagex).

* The resulting logfiles will be merged.

* check the list of images in the modified install.wim and set this list as the product property `Imagenames` of the target product, so that the new created image can be selected for installation.

* set the product `start_after_capture` to 'setup'.

* deactivate the WinPE partition and activate the system partition (Windows). Including activating UEFI netboot if possible.

* write the logfile to the server. It will be attached to the logfile from the 'opsi-local-capture' bootimage process.

* reboot

.capture images: schema: capture 2
image::oli-capture-scheme-capture2.png["capture images: schema: capture 2", width=500]

.capture images: capture: delete an existing image
image::oli-capture-del-existing-image.jpg["capture images: capture: delete an existing image", width=350]

.capture images: capture: capture and append the new image
image::oli-capture-append-image-dism.jpg["capture images: capture: capture and append the new image", width=350]

To rollout the generated image use the target product defined as `target_product`. Set the `imagename` to the name of the generated image and then the product can be installed like any other Windows installation. So all the standards like driver integration and installation of the opsi-client-agent are performed like with using the original Microsoft image. +
One important aspect has to be taken into account: if on the client the image has been generated from, software had been installed per opsi, these installation files are restored when installing the 'opsi-client-agent'. This results in the side effect, that, differing from the standard installation, not all the products that have been set to installed before the installation are set to setup. Because this standard feature would result in installing again all the products that have been integrated into the image. So in this case only those products will be installed, that have explicitely been set to 'setup' before the OS installation. 


[[opsi-manual-localimage-ubuntumirror]]
=== Creating an own Ubuntu 'proxy'
For a helpful manual for creating an own Ubuntu proxy refer to:

http://wiki.ubuntuusers.de/Lokale_Paketquellen/Apt-Cacher-ng

http://www.gambaru.de/blog/2011/10/26/apt-cacher-ng-ein-proxy-server-fur-debian-und-ubuntu/


