////
; Copyright (c) uib gmbh (www.uib.de)
; This documentation is owned by uib
; and published under the german creative commons by-sa license
; see:
; http://creativecommons.org/licenses/by-sa/3.0/de/
; http://creativecommons.org/licenses/by-sa/3.0/de/legalcode
; english:
; http://creativecommons.org/licenses/by-sa/3.0/
; http://creativecommons.org/licenses/by-sa/3.0/legalcode
;
; credits: http://www.opsi.org/credits/
////

:Author:    uib gmbh
:Email:     info@uib.de
:Date:      18.12.2015
:Revision:  4.0.6
:toclevels: 6


include::../common/opsi_terms.asciidoc[]

[[opsi-manual-configed]]
== opsi-Management GUI: 'opsi-configed'

[[opsi-manual-configed-preconditions]]
=== Requirements and operation

IMPORTANT:  The '{opsi-configed}' in version 4.0.6.x requires at least Java 1.7. 
It works with the data from a running `opsiconfd` at least of version 4.0.6.


You find the current version of the '{opsi-configed}' as an opsi-package for local installation on download.uib.de.
In non-opsi systems the  '{opsi-configed}' can be simply installed by copying the required jar archive files as contained e.g. in the opsi-package. 

The current stable version of the  '{opsi-configed}' is as well contained in the opsi-server installation and is maintained 
by means of the Linux distribution methods. This version of the program is identical in code with the corresponding local version, but is primarliy used  
as a Java Webstart application. It may be called  

* via the general server page https://<servername>:4447
* by the URL https://<servername>:4447/configed
* or by directly calling https://<servername>:4447/configed.jnlp 

It the server has a graphical desktop, the  '{opsi-configed}' can be started as well directly in the server via a desktop menu entry or 
in a shell by `/usr/bin/opsi-configed`. 
With non-gui servers you may only use the pure command line version using the option _querysavedsearch_ . 

If the required jar archives exist on every system the '{opsi-configed}' can be started with `java -jar configed.jar`.

With  `java -jar configed.jar --help` you get a listing of the command line options


Most times the opsi-configed will be called from the opsi server page with address

`https://<servername>:4447`

or, as applet, directly from

`https://<servername>:4447/configed`

The help option `java -jar configed.jar --help` shows the available command line options.

[source, prompt]
----
java -jar configed.jar --help

configed [OPTIONS]

Options:
     -l, --locale  LOC  Set locale LOC (format: <language>_<country>)
     -h, --host  HOST    Configuration server to connect to
     -u, --user  USER   Username for authentication
     -p, --password  PWD Password for authentication
     -d, --logdirectory DIR Directory for the log files
     -c, --client CLIENT Start with selected client CLIENT
     -g, --group GROUP Start with activated group GROUP
     -t, --tab X Start with selected tab X
     -qs, --querysavedsearch SAVEDSEARCH_NAME Give names of clients on commandline which are produced by this search
      -r, --refreshminutes MIN   Refresh client connect data every MIN (0 = never)
         --help    Show this text
         --gzip  [/y/n] Activate gzip transmission of data from opsi server (default yes)
         --sqlgetrows  Get data by method getRawData where implemented
         --version  Tell configed version
         --loglevel L	Set logging level to L

logging directory not yet set
regularly exiting app with code 0

----

==== Custom start values with Java Web Start

When starting via Java Web Start you can apply the same parameters  as when the configed is started as a local application 
but with a slightly different syntax. It has the form:

`javaws "https://<servername>:4447/configed.jnlp?optionname1=value1&optionname2=value2&..."`

E.g,, to pass the user name 'Roger' the following call must be applied:

`javaws "https://<servername>:4447/configed.jnlp?user=Roger"`

It is a standard http parameter syntax where the option names are used omitting the dashes.  


[[opsi-manual-configed-login]]
=== Login

.'{opsi-configed}': login mask
image::opsi-configed-login.png["opsi-configed: login mask", width="90mm"]

The  '{opsi-configed}' tries to connect to the opsi server via https. 
The login is done with the given parameters 'opsi server[:Port]' (default port 4447 – opsiconfd) 
and the user/password pair of the '{opsi-configserver}' account. For a successful login the provided user 
has to be a member of the unix group 'opsiadmin'.

In the local user profile, the '{opsi-configed}' saves some session infos in order to rebuild the essential working 
context after restart, in particular a selected client group.
Accordingly, if you work with several opsi servers (e.g. a productive one and a second one for experimental purposes), it produces the server/port of your last session as top most entry in the selection list. 

The gzip compression in HTTP protocol reduces the amount of data to be transferred at the expense of an extended processing time, 
this is due to the fact that the data must be compressed and uncompressed. 
It has been observed that the reaction times tend to be shorter without compression in the local network, 
as the effects normally surpass the prolonged processing time. For transmissions over the WAN, it tends to be the opposite.
In practice, little difference is noticed in LAN connections, but releveant differences in WAN connections, so the Gzip option is enabled by default.

The feature to 'check which clients are reachable' runs in the background and shows the results in the client table.
It can be enabled from the login screen mask or via command line parameter. 
The default refresh interval is 0 min (= deactivated). It should be observed that a too short refresh interval produces 
a lot of network waiting states which can slow down the opsi server.


[[opsi-manual-configed-copy]]
=== Copy & Paste, Drag & Drop

You may copy the selected entries from nearly every section of the '{opsi-configed}' to the clipboard using the standard key combinations ('Strg-Insert', 'Strg-C'). This may be used to transfer interesting data to other programs. 

For most of the tables you may also use 'Drag & Drop' to copy the data e.g. to  'Excel' or a 

[[opsi-manual-configed-mode-selection]]
=== {opsi-configed} modes Client configuration / server configuration / license management

To switch between the different usage modes  of the '{opsi-configed}', use the buttons
in the upper right corner of the '{opsi-configed}' frame. Since version 4.0.4, there six buttons.

.{opsi-configed}:  Usage modes
//image::opsi-configed-mode-selection.png["{opsi-configed}:  Buttons for (from left to right): Client configuration, Server configuration, License management", width="50mm"]
image::configed-masterbuttons2.png["{opsi-configed}: Button bar", width=400]


The first three buttons allow to change the editing target of the main window: client configuration,
server configuration. On the other hand, each of the buttons 'group actions', 'product actions' and 'licence management'
starts a special window for managing the specific objects or actions. 

These windows can as well be opened via the main menu item 'windows' (since '{opsi-configed}' version 4.0.7).



[[opsi-manual-configed-depot-selection]]
=== Depot selection

All opsi-depotservers integrated with your server are listed in the upper left corner
of the '{opsi-configed}'. By default the depot on your '{opsi-configserver}' 
is selected and the clients belonging to this '{opsi-depot}' are shown. 

You can select multiple Depots at the same time and edit their clients together.
However, only if the selected depots are synchronized with each other. 
Trying to edit clients from asynchronous depots together will be rejected with an 
appropriate warning and the corresponding error message.

As of version 4.0.5, there is no need to carry out a complete data-reload 
when changing to a different depot-server,
that means, when you select a depot its data is loaded immediately. 
In addition, there are the following buttons:

* (=+) : Marks all depots with identical product stocks.
* (++) : Marks all depots (you can also use _Ctrl-a_)

.'{opsi-configed}': depot selection
image::opsi-configed-mode-depotselection.png["{opsi-configed}: depot selection", width="52mm"]


[[opsi-manual-configed-client-selection]]
=== Single client selection and group configuration

After a successful login the main window pops up and shows the tab 'Client selection'.
This tab shows a list of known clients from the selected '{opsi-depot}' resp. the clients
which are selected using the 'treeview control' on the left side of the '{opsi-configed}'.

Since version 4.0.4, the '{opsi-configed}' saves on the local machine, for the current user,
the current depotserver and group selection. If the '{opsi-configed}' is restarted,
you can continue working at the point where you had been.

Observe that group selection is preserved when changing depot selection. In order to
see all clients in the other depot the group selection has to be changed appropriately.


////
<<opsi-manual-configed-treeview>>
////


.'{opsi-configed}': client selection mask
image::opsi-configed-clientselection.png["{opsi-configed}: client selection mask", width=400]


You may select a line of the list not only by manual scrolling and selecting but also
by a String search. This requires that you enter a String into the search field at the top of the list

How the search works is determined by the selected elements in two drop down lists:

Via field selection you decides if

* all fields (more precisely, all fields that are occuring as columns) are searched (default), or

* only one field  (and which one) is searched.

Concerning the method of search you have to choose if a hit is defined

* as occurrence of the search string anywhere in a field value (mode "full-text search", this is default),

* as occurrence of the search string at the beginning of a field value (mode "start-text search")

* as a pattern match in a regular expression search where the search string serves as the pattern (mode "regular expression", an option for experts, based
on the java pattern matching).

The enter key produces the next search hit. More selection functions based on String search are shown in the context menu
of the search field.

.'{opsi-configed}': Search function in the client selection list
image::opsi-configed-clientselection-search.png["{opsi-configed}: Client search", width=200 ]


[NOTE]
.Examples of Search Patterns
=========================================

All PCs which have a name or a description containing the character sequence _Miller_ with capital _M_ or with _m_ are found by using the pattern  

_.*iller.*_ 

The dot in " .* "  means "arbitrary character", the asterisk " * " means "arbitrary number of occurrences (of the beforehand designated element)". That is

_.*iller.*_  

matches, if  anything (any number of any characters) may come before _iller_ and anything come after _iller_. 
Since "any number" may be zero 

_Home of Miller_ 

matches where no character follows after _iller_.   

But to ensure that we do not mark _Tiller_ as correct a more precise pattern would be

_.*[Mm]iller.*_

Several characters enclosed in brackets are interpreted that the searched value must contain _one of the enumerated characters_. With this more precise pattern, every string is recognized which 
contains either _Miller_  oder  _miller_ but no other string.

 
Here is yet another example, a pattern search for products: 

_0.-opsi.*standard_ 

matches for all products which have a name beginning with "0", followed by an _arbitrary character_, followed by  _-opsi_, followed by  _arbitrary characters_ (in _arbitrary number_); finished by _standard_.

To ensure that the second character is a number symbol, i. e. one of the characters "0", "1", "2", "3", "4", "5" , "6", "7", "8", "9", one can write

_0[0123456789]-opsi.*standard_

As short hand for _[0123456789]_  one can use,  since it is a complete partial sequence of the sequence of all characters,  _[0-9]_. Thereby the search pattern reduces to 

_0[0-9]-opsi.*standard_


Matching products are e.g.

_03-opsi-abo-standard_

or

_05_opsi-linux_standard_

More informations on the topic can be found in the java api doc, key word 
"java.util.regex.Pattern".


=========================================



[[opsi-manual-configed-client-selection-table]]
==== The clients list

The clients list has per default the columns 'client name', 'description', 'on', 'IP address'   and 'last seen'.

* 'client name' is the 'full qualified hostname' which is the client name including the domain name

* 'description' is a free selectable description which you can edit in the right top part of the window

* 'On' shows after clicking the button 'Check wich clients are connected' the 
result of this query. This feature runs in the background and shows the results in the client table.
It can be enabled from the login screen mask or via command line parameter.
The default refresh interval is 0 min (= deactivated).

.'{opsi-configed}': Button 'Check which clients are connected'
image::configed_toolbar_icons_connected.png["{opsi-configed}: Button: Check which clients are connected"]

.'{opsi-configed}': Client reachable
image::opsi-configed-client-reachable.png["Client reachable",width=20]

.'{opsi-configed}': Client unreachable
image::opsi-configed-client-unreachable.png["Client unreachable",width=20]


* 'IP address' shows the IP number to which the opsi server resolves the client name.

* 'last seen' shows the date and a time of the last client connect to the opsiconfd web service

Some columns are deactivated by default:

* 'session infos' (data as retrieved from the operating system running on the specific client)

* 'Inventory No' (displaying some optionally entered data)

* 'created' (date and time of client creation)

* 'opsi mac address' (hardware address of the client as used by opsi)

You may activate these columns using the context menu. The configuration which columns are activated may be changed using the entry 'configed.host_displayfields' in the
server configuration.

.'{opsi-configed}': change the default for visible columns in the clients list
image::opsi-configed-config-host-displayfields.png["{opsi-configed}: change the default for visible columns in the clients list", width="82mm"]

Adding the column 'session infos' enables the button "request session infos from all clients" in the button panel.

.'{opsi-configed}': Button 'Sessioninfo'
image::configed_toolbar_icons_sessions.png["{opsi-configed}: Button SessionInfo"]


When this button is clicked  the '{opsiconfd}' tries to connect to all clients and to retrieve data of the
active user sessions. From the result, the account names are shown in the column 'session infos'.
Instead of using the button you may start the request only for the selected clients via the context menu
or the main menu entry 'OpsiClient'. By this, waiting for the network timeouts is avoided.

Since the search function for the client list works (if not configured otherwise) on all displayed columns
you may now find out which is the client belonging to a logged in user (with known account name).






To sort the clients by a certain column click on the top header of that column.


[[opsi-manual-configed-client-selection-selecting]]
==== Selecting clients

You can select one or multiple clients to work with. The client view can be restricted to the selected clients by clicking the funnel icon or from the menu by 'Grouping / Show only selected clients'.

A selected client group can be saved with the icon 'Save grouping' or from the menu by 'Grouping / save group' with a free selectable name.

You can use the mouse to add the selected clients to an existing group (by dragging them to an existing group which is displayed in the tree view).

In the client selection dialog (as called via menu 'Selection / Define search') clients can be selected using a variety of criteria  based on their configurations.

.'{opsi-configed}': Auswahldialog
image::configed_clientselection.png["{opsi-configed}: Define Client Search Window", width="73mm"]

E.g., it is possible to search for opsi installed products as well as software as found by the opsi software audit. You may as well search for
PCs satisfying certain hardware conditions. Criteria may be combined by logical 'and' or 'or' operations and may be negated.
Search strings can be given as fixed strings combined with asterisks '*' as wildcard symbols.

Search definitions can be saved and then again used via the menu item 'Selection/Use saved search definition'.

.'{opsi-configed}': Saved Search
image::configed_clientselection2.png["{opsi-configed}: Saved Searches"]

It is also possible to run a saved search from the command line when the opsi-configed editor is started.  By including the flag "-qs" and the name of the saved search, the configuration editor will start
with the saved search results.  If the name is omitted, then a list of available searches will be displayed.

To detect failed installations, the menu item _Selection_ offers _Failures with product_ and _Failures occurred_ (today, since yesterday, ...), since version 4.0.5 . +
Choose the first setting to get a list of all products. If you select a single product, all clients will be shown, where the installation of this product failed. +
When choosing for instance _Failures occured_ - _today_, all the clients will be marked, where an product installation failed today.

.'{opsi-configed}': Failed Actions
image::opsi-configed-failedactions-today_en.png["{opsi-configed}: Failed Actions - today", width=250]


[[opsi-manual-configed-treeview]]
=== Client selection and hierarchical groups using the treeview

Since opsi 4.0 it is possible to manage groups and clients using a tree view control 
on the left side of the '{opsi-configed}'. A second enhancement is the possibility of 
hierarchical groups (groups in groups).



[[opsi-manual-configed-treeview-principle]]
==== Basic concepts
 
The tree view control has three base nodes "groups", "directory" and "client list". 
Every known client is alwas in the group 'client list'.

Additionally a client may be in one or more groups. You may build up different group trees which may 
represent different ways to organize them, according to your own criteria. Like administrative structure, hardware or typical software inventory. +
If a client needs to be in one or more groups use the base node 'groups'. 
For clients that need to be exclusively in one group, use the 'directory' node.

If you select a client, all groups where the client belongs will get colored marked icons.

.'{opsi-configed}': Treeview with clients and groups
image::opsi-configed-treeview.png["{opsi-configed}: Treeview with clients and groups", width="66mm"]

[[opsi-manual-configed-treeview-howto]]
==== How to ...

By a click one a node (or a group) all clients beyond this node will be shown in the 'Clients' tab, but none of these clients is selected for processing.

By a click one a client, this client will be shown in the 'Clients' tab and selected for processing. You may also use this way to change the selected client while you are in a other tab like product configuration without coming back to the clients tab.

You may use Ctrl-click and Shift-click to select multiple clients.
This tree view control show the groups which are created according the chapter
////
<<opsi-manual-configed-client-selection-selecting>>.
////
You may also create groups by using the context menu above 'ALL' or any existing group.

.'{opsi-configed}': Using the context menu to create a new subgroup
image::opsi-configed-treeview-generate-group.png["{opsi-configed}: Using the context menu to create a new subgroup", width="49mm"]

You will be asked for the new groups name.

.'{opsi-configed}': Dialog: Group name
image::opsi-configed-treeview-groupname.png["{opsi-configed}: Dialog: Group name", width="46mm"]

A group can be populated with clients using Drag&Drop by

* copying clients from the 'Clients' tab to the group in the tree view
(left mouse button)
* copying clients from the tree view control below the node 'ALL' to group in the tree view (left mouse button)
* moving clients from a group in the tree view control to a other group in the tree view (left mouse button)
* copying clients from a group in the tree view control to a other group in the tree view (Ctrl-left mouse button)

[[opsi-manual-configed-client-editing]]
=== Client processing / Client actions

Using the menu 'OpsiClient' or the context menu in the 'Clients' tab you may choose from a lot of client specific operations

.'{opsi-configed}': : context menu 'Clients' Tab
image::opsi-configed-client-contextmenu.png["{opsi-configed}: : context menu 'Clients' Tab", width="51mm"]

[[opsi-manual-configed-client-editing-wakeonlan]]
==== WakeOnLan ('Wake selected clients')
Choosing this menu entry, you will send the selected clients a WakeOnLan signal. 

Since version 4.0.7 you can choose


* if the network signal is meant to be sent to the selected clients at once
* which delay should be between the waking of two clients 
* when the process shall start (via a scheduler).

If a client is assigned to a depot server which is not the configserver then the Wake On Lan signal is not directly sent to the client,
but the '{opsi-configed}' tries to establish a HTTPS connection to the 'opsiconfd' of the depot server which in turn sends the Wake On Lan packet to the client inside its network segment.

.'{opsi-configed}': Scheduler for Wake On Lan
image::opsi-configed-wake-on-lan-scheduler.png["{opsi-configed}: Scheduler for Wake On Lan", width="120mm"]

It should be observed that it is the '{opsi-configed}' which triggers the actions, therefore the program must not be shut down in the meantime. 


[[opsi-manual-configed-client-editing-ondemand]]
====  Fire opsiclientd event (Push Installation)

This menu entry is used to send to the '{opsi-client-agent}' on the selected clients a command to fire the event
which is selected in the submenu. The standard event is "on demand" which means the demanded action is started at once.
Be aware that this may have the effect that the client is rebooting without any warning.

To incorporate additional events (which should be configured in the opsiclientd.conf) into the submenu you have to edit the
config configed.opsiclientd_events via the tab (server) host parameters.

All messages will be shown on the active desktop. If the client isn't reachable, you will get a message.


What happens exactly if you fire the event 'on_demand' can be configured in the event 'on_demand' configuration.

[[opsi-manual-configed-client-editing-send-message]]
==== Sending messages ('Show popup message')

Choosing the menu entry 'Show popup message' you will get a small edit window where you can type in your message.

.'{opsi-configed}':  opsi message edit mask
image::opsi-configed-client-message-editing.png["{opsi-configed}:  opsi message edit mask", width="51mm"]

By clicking on the red tick you will send the message to the selected clients.

At the selected clients a message window will appear.

.'{opsi-configed}':  opsi message display dialog
image::opsi-configed-client-message-reading.png["{opsi-configed}:  opsi message display dialog", width="53mm"]

[[opsi-manual-configed-client-editing-sessioninfo]]
==== Session info for selected clients

The selected clients get the signal to communicte their session information. The data is shown in the session info column
(if visible).


[[opsi-manual-configed-host-actions-delete-package-caches]]
=== For WAN-Clients: Delete package cache

On WAN clients there are occasional problems with package cache synchronization. The function resets the cache.


[[opsi-manual-configed-client-remotecontrol]]
==== Call external remote control tools for selected clients

The option 'Remote Control Software call' in the client context menu as well as the client main menu (since '{opsi-configed}' version 4.0.1.11) is very powerful. It can be used
to use any command that the operating system offers, parametrized e.g. by the client name.

As an example there are configurations automatically generated which can be used to send a `ping` to the selected client: one
`ping` command that works in Windows environment and one command that requires a Linux X environment. Please observe:
  '{opsi-configed}' calls obviously the command in its environment, i.e., we need the Linux command when the  '{opsi-configed}'
  is running in Linux.

.'{opsi-configed}': Choice of Remote Control  call
image::opsi-configed-client-remotecontrol-choice.png["{opsi-configed}: Choice of Remote Control call", width="52mm"]

The selection window has three parts. The upper part lists the names of the existing commands. It follows a line, which shows
the selected command and offers the chance to edit it (if this is allowed). Additionally, the line contains the buttons
to execute or abandon the action. The third
text area of the window captures any messages that are returned by the operating system when
calling the command.

These calls offer a quasi infinite range of opportunities. For example, a command can be configured to open
a Remote Desktop connection to the selected client (if it allows such connections). On a Windows system, such a command
is

`cmd.exe /c start mstsc /v:%host%`

In a Linux environment the following command can be used:

`rdesktop  -a 16 %host%`

In these examples serves `%host%` as a variable, which '{opsi-configed}' automatically replaces
by the value for the selected host. Other variables that can be analogously used in the commands are:

- `%ipaddress%`
- `%hardwareaddress%`
- `%opsihostkey%`
- `%inventorynumber%`
- `%depotid%`
- `%configserverid%`

If the command is marked by the additional server configuration entry  'editable'  as `true`,
then the command line allows ad hoc editing. For example, you may supply a requested password or vary
the command as needed.

CAUTION: If there is some command declared as 'editable' then in fact 'any' program addressed
at the client computer can be called by changing the editable command.

If more than one client is selected the command will be executed in a own thread for each client.

The list of remote control commands
is editable via server configuration entries (cf.
<<opsi-manual-configed-hostproperties>>).


To define a command `example`, at minimum an entry `configed.remote_control.example`
(or `configed.remote_control.example.command`) must be generated. The value of property has to be the command
(in which the variables `%host%`, `%ipaddress%` etc. can be used). Additionally, an entry `configed.remote_control.example.description`
can be defined. The value of this entry will be shown as tooltip (if not existing, the command itself will serve as tooltip content).
Furthermore, a Boolean entry `configed.remote_control.example.editable` can be added. If its value is set to `false` the command
cannot be edited in the selection window.


.'{opsi-configed}': Editing of remote control commands in the server properties editor
image::opsi-configed-properties-remotecontrol.png["{opsi-configed}: Editing of remote control commands in the server properties editor ", width="110 mm"]



[[opsi-manual-configed-client-editing-shutdown]]
==== Shutdown / reboot of selected clients

You may send the selected clients a shutdown or reboot signal. You have to confirm this command at the opsi-configed.

CAUTION: If the client received the signal, it will going down with out any more questions.

[[opsi-manual-configed-client-editing-manage]]
==== Delete, create, rename and move clients

You may delete the selected clients from the '{opsi-server}'.

If you choose to create a client, an input mask opens. There you enter or confirm the required data – client name without domain specification, domain name, depot server name. You may add a textual description for this client and notes on this client.

.'{opsi-configed}':  creating a client
image::opsi-configed-client-new.png["{opsi-configed}:  creating a client", width="75mm"]

The mask also contains fields for an optional declaration of the IP-number and the ethernet (MAC) address of a client. If the backend is activated for the configuration of a local dhcp-server (which is not the default setting), this information will be used to make the new client known to the dhcp-server. Otherwise the MAC address will be saved in the backend and the IP-number will be discarded.

When creating clients you can directly for the new client specify to which group it should belong, 
as well as which netboot product should be directly set on setup. In addition, you can activate 
directly the Install by shutdown, UEFI Boot and the (standard) WAN configuration from the beggining.
These settings can easily be made in the Hosts-List. 
These configurations are only available since the version 4.0.5.8.1 .

Since opsi 4.0.4 it is possible to disable the options for creation and deletion of an opsi client.
This is used if the client creation should be managed by a different service, eg. the UCS service.

For the configuration of these options, a host parameter (config) is provided. It is named `configed.host_actions_disabled` and
offers the list values

* `add client`
* `remove client`

(multiple selection allowed). The default is the empty selection meaning that no option is disabled.

The default setting can be changed so that adding and removing clients from the  '{opsi-configed}' is disabled:

[source,prompt]
----
opsi-admin -d method config_createUnicode "configed.host_actions_disabled" "Disable host actions" ["add client","remove client"] ["add client","remove client"] false true
----




You may rename a selected client, you will be asked for the new name.

Moving a client to a different depot-server. If clicked the following windows appears with a list of existing depot-servers

.'{opsi-configed}': change the depot of a client
image::opsi-configed-client-change-depot.png["{opsi-configed}: change the depot of a client", width="53mm"]

[[opsi-manual-configed-productconfiguration]]
=== Product configuration

Switching to the tab 'Product configuration' you get a list of available software packets with its installation status and action status for the selected clients.

.'{opsi-configed}': product configuration mask
image::opsi-configed-localbootproducts.png["{opsi-configed}: product configuration mask", width=400]


Since opsi 4.0.4 a search function is added.

ith the search function products can be searched by product names and (if desired) in combination with special values in the fields of the product table (like searching the client table).
Therefore a search string can be entered. The search starts immediately and the first matching line is marked . If there is no match to be found (or characters are removed from the search string), the first line of the table is marked.

The context menu offers some more options.

.'{opsi-configed}': Product search with context menu
image::configed_productsearch.png["{opsi-configed}: Product search with context menu", width="300"]

To get a better overview, activating the filter function reduces the product view to the selected products only.
The selections stays active until the filter is disabled by clicking the filter button again.



If there is a different status for the selected clients this will be marked grey ('undefined'). The list of the selected clients is shown at right on top.

You can also sort the product list by clicking at the column header.

This are the columns:

* 'Status' is the last announced state of the product and can hold the values 'installed', 'not_installed', 'unknown'. The table shows an empty cell if the value is 'not_installed'  to improve the usability of the view. The cell becomes grey if a multitude of selected clients is selected and does not share a common value (grey coloring represents the pseudo value 'mixed').

* 'Report' informs about the progress or the result of the last action using the pattern <action result> (<last action>). During an installation process there may be indicated 'installing', afterward e. g. 'failed(setup)' or 'success (uninstall)'.

* The column 'Requested action' holds the information which action is to be executed. Possible values are 'none' (shown by an empty cell) and the action types for which scripts are defined in the product package (possible values are 'setup', 'uninstall', 'update', 'once', 'always', 'custom').

* The field 'Version'  displays the software version number combined  with the opsi package number of the software package installed on the client.

There are two more columns which can be activated via the context menu:

* 'Priority class' displays a priority value that is assigned to the product (highest priority +100, lowest priority -100). It influences the product order when products are installed (by virtue of the product_sort_algorithm)

* The 'position' column displays the product ordering forecast for installation sequences.

Choose a software product to get more product information in the right part of the window like:

* 'Complete product name': full product name of that software package.

* 'Software/package version': 'software version'-'version of the opsi package'  of the software package (specified in the opsi installation package).

* 'Product description': free text to describe the software.

* 'Hints': free text with advices and caveats for handling the package.

* 'Requirements': A list of other products which the selected product (say 'A') depends on combined with the type of dependency: 'required' means that A requires the other product ('B'), but it doesn't matter whether B is installed before or after A. 'pre-required' means B has to be installed before A. 'post-required' means B needs to be installed A. 'on deinstall' means this action should take place if A be de-installed.

* 'Configuration for client': It is possible to define additional properties for a product. Their values can be evaluated in a setup script to configure the product per client. Because of the intrinsic complexity of a property definition there is a specific GUI element for displaying and editing the table of properties:

[[opsi-manual-configed-property-editing]]
=== Property tables with list editor windows

A property table is a two-column table. In each row, the first column contains a property name,  
the second column displays the assigned property value(s).

It may be configured that a tool tip is displayed showing some information on the meaning of the property and the default value.

A property value that is a password should not be directy displayed.

Until this feature will be constructed as a special value type in some coming release since version 4.0.7 the hack is used that a property value 
will only be displayed if the user explicitly requests it in cases:

* the property key text contains the string 'password'
* the property key text starts with the string 'secret'

E.g., the value of the property 'root_password' in the Linux netboot products is displayed as a sequence of stars  (until the user does the edit click and explicitly confirms to showing the password). 


.'{opsi-configed}': property table with tooltip
image::opsi-configed-editlist1.png["{opsi-configed}: property table with tooltip ", width="63mm"]


If you click at a value a window pops up: the 'list editor' for this property. It shows a value resp. a list of preconfigured values with the current value as selected.

.'{opsi-configed}':  list editor, selection list
image::opsi-configed-editlist2.png["{opsi-configed}:  list editor, selection list", width="55mm"]


Clicking a new value changes the selection.

If the property value list is editable (new values may be added to the existing list resp. existing values changed) the window comes up with an edit field for the new or modified values.

.'{opsi-configed}': list editor, edit field
image::opsi-configed-editlist3.png["{opsi-configed}: list editor, edit field", width="55mm"]

The most comfortable way to get a new value that is a variant of an existing one is double clicking the existing value in the list. This copies it into the edit field where it can be modified.

As soon as the edit field contains a new value – not yet occuring in the value list – the plus button is activated by which the new value can be added to the list of values.

If multiple values are allowed – as it should be e.g. for the property 'additional drivers' – a value may be added to the set of selected values by Strg-Click . The very same action removes the value from the set. The minus button (since opsi-configed version 4.0.2) clears the selection completely.

When the list has been edited the green check mark turns to red as usual in the opsi-configed. Clicking it takes the new selection as new property value (and finishes editing). Clicking the blue cancel button stops editing and resets the original value.

[[opsi-manual-configed-netbootproducts]]
=== Netboot products

The products on tab 'Netboot products' are mainly used to install the client OS (operating system) and are listed and configured like the products on tab 'Product configuration'.

If for the selected client(s) a netboot product is set to 'setup', the correspondent bootimage will be loaded and executed at the next client reboot.

.'{opsi-configed}': mask to start the bootimage
image::opsi-configed-netbootproducts.png["{opsi-configed}: mask to start the bootimage", width=400]

This is usually done to initiate an OS installation or any other bootimage task (like a memory test etc.)

[[opsi-manual-configed-hardwareinformation]]
=== Hardware information

With this tab you get the last detected hardware information for this client (only available if a single client is selected).

.'{opsi-configed}': Hardware information for the selected client
image::opsi-configed-hardwareinformation.png["{opsi-configed}: Hardware information for the selected client", width=400]

==== Automatic driver upload

To simplify and automate the drivers of special clients and to upload them on the '{opsi-depot-server}', since version 4.0.5, the option to select the paths from the hardware information is possible, thus the opsi-configed via the Share delivers the above mentioned. 
The two offered byAudit driver paths are composed of the manufacturer and the product or the model, which are respectively read from the computer and the mainboard. By clicking the right button to upload a driver, a new window will be displayed to add more settings.

.'{opsi-configed}': Hardware information - driver upload
image::opsi-configed-hardwareinfo-treiberintegration.png["{opsi-configed}: Hardware information - driver upload", width=400]

If you open the '{opsi-configed}' on a Linux system, it is not directly possible to carry out a driver upload because the connection is carried out via a Share. This needs to be made manually. However, the methods or directory structures are an essential aspect of the drivers integration for linux users as well as for windows users.

Without further settings, the driver upload of a Windows computer, works only if the connection to the Share is enabled.

Among other things, information must be given in a new window, like to which Windows product should the driver be prepared, which drivers are to be uploaded and with which method or the directory in which the driver integration takes place. The target directory is accordingly changed with the selection of another method. The previously selected byAudit driver path can be found again by default in the selected method 'byAudit', that specifically integrates the selected driver for the type of machine.


Following methods and directories are possible:

 * 'standard': For the drivers which are found in `./drivers/drivers/`, the driver will be matched to the corresponding hardware using the PCI IDs (i.e. USB- or HD_Audio-ID) in the description file, and then integrated into the Windows setup as needed. It may be the case that the drivers found by opsi in this location do not necessarily work with your hardware. For the drivers which are found in `./drivers/drivers/`, the driver will be matched to the corresponding hardware using the PCI IDs (i.e. USB- or HD_Audio-ID) in the description file, and then integrated into the Windows setup as needed. This is the fallback directory for all clients.

 * 'preferred': In the case that you have to support special hardware, and you can find the additional drivers from the manufacturers, then use the following procedure to include them in the installation. Place the additional drivers in their own directory under: `./drivers/drivers/preferred` (the naming and depth of the directory structure is not important). Drivers that are found in the directory `./drivers/drivers/preferred` will be integrated into the Windows setup, assuming that opsi finds a suitable match to the drive hardware based off of the PCI IDs (i.e. USB or HD_Audo-ID) in the description file. Problems can occur when the same PCI ID of the drivers is found in `preferred`. In this case, a direct mapping of the drivers to the devices is needed.

 * 'excluded': It could be that manufacturers include different drivers for different operating systems (i.e. Vista vs. Win7) or different configurations (ie. SATA vs. SATA RAID).  The `create_driver_links.py` cannot make this distinction.  If you think the wrong driver has been installed, then move the driver to the 'drivers/exclude' directory and then call `create_driver_links.py` again.  Drivers in the directory 'drivers/exclude' are not used during the integration.

 * 'additional': When installing additional drivers based on the PCI-IDs or USB-IDs, they should be installed under the directory `./drivers/drivers/additional` (where name and depth of the directory structure is not important).  You can map one or more drivers to a client using the Product-Property 'additional_drivers' and a list of driver directories under `./drivers/drivers/additional`.  The directories specified by 'additional_drivers' are searched recursively until all drivers are found.  This method can be used to make a specific directory based on the client type (i.e. dell-optiplex-815).

 * 'byAudit': The previously described mechanisms that directly map drivers to devices is automated since the 4.0.2 Release 2 of opsi.  Opsi will search the directory `./drivers/drivers/additional/byAudit` for a director name that matches the field 'Vendor' that was given in the Hardware Inventory. This 'Vendor' directory will be search for a 'Model' directory that corresponds to what is seen in Hardware Inventory.   If this directory is found, then it will be manually assigned to the product property 'additional_drivers'. The directory name 'byAudit' is case sensitive.  The directory names for 'Vendor' and 'Model' are not case sensitive ('Dell' and 'dELL' are treated the same way).

Some manufacturers use model names that are very adverse to this method, since some special characters such as / are not allowed to be used in file or directory names.
An example for a model name could be: "5000/6000/7000".
A directory with this name is not allowed because of the special characters. Since the third Service Release from opsi 4.0.3 the following special characters: < > ? " : | \ / * were replaced internally with an underscore "_" character.
 With this change can the above example be replaced with: "5000_6000_7000" the directory will automatically be shown, even though the directory structure information in the hardware inventory are not visually the same.

IMPORTANT: After the driver upload please execute `create_driver_links` in the '{opsi-depotserver}'.

[[opsi-manual-configed-softwareinventory]]
=== Software inventory

With this tab you get the last known software information for this client (only available if a single client is selected).

.'{opsi-configed}': Software information for the selected client
image::opsi-configed-softwareinventory.png["{opsi-configed}: Software information for the selected client", width=400]


[[opsi-manual-configed-logfiles]]
=== Logfiles: Logs from client and server

The client specific log files are stored on the server and visible with the opsi-configed via the Tab 'log files'.

The level up to which the log lines are seen can be chosen by a slider (wheel mouse enabled), so that errors can be easily found.

It's also possible to search in the log file (to continue the search press 'F3' or 'Ctrl-L' = last search repeated).


.'{opsi-configed}': Display of the log file in the opsi-configed
image::opsi-configed-logfiles.png["{opsi-configed}: Display of the log file in the opsi-configed", width=400]


[[opsi-manual-configed-product-defaultproperties]]
=== Product default properties
To change the default values of the products for one or more opsi-depots, there is a tab, called _Product default-properties_.
This is only available if you select _Properties of depots_ (which is the second button at the top right hand side). +
In the main table, all products are listed with the product version as well as the package version.

If a product is selected, at the top of the right side (as is customary for the client product configuration) 
general information about the product packets is shown. Below is the list of all depots, 
that have installed the selected product. The table below with the property keys and values 
is also known from the client product configuration.

[[image-configed-product-defaultproperties]]
.'{opsi-configed}': product default properties
image::opsi-configed-produkt-defaultproperties-jedit-different-values_en.png["{opsi-configed}: Product default properties", width=400]

You can select a single depot or multiple depots to change the default values 
(which are also called the depot values) of the product. 
As the default, all available depots are preselected. With the usual shortcuts 
(_Ctrl-a_, _Ctrl-Click_ or _Shift-Klick_) multiple or all clients can be selected. +
If the property value is shown greyed (see <<image-configed-product-defaultproperties>> - ``gui_language''), 
the values for that property differ on the selected depots. 
On the right side of the depots are three buttons:

* (=+): Mark all depots that have identical values  +
All depots, that have the same default values, are marked.
* (++): All depots are marked.
* (globe): set the packet default values +
The original packet default values of the products will be set fot the selected depot(s).



[[opsi-manual-configed-hostproperties]]
=== Host parameters at client and server configuration



There are many configuration options for the opsi server and the opsi clients
that may be set or changed via the tab 'Host parameters'. Server defaults are
set in the mode 'server configuration', client specific values
in the mode 'client configuration' plus manual selection of the 'Host parameters' tab
(see also <<opsi-manual-configed-mode-selection>>).

On principle, these configuration entries ('config objects' of the '{opsi-server}')
are conceived as lists of values. Therefore they are
edited via the list editor tool (cf.
<<opsi-manual-configed-property-editing>>).

Depending on the specific definition of a configuration object

- the values of a list can be of type text (`Unicode`) or of type `Boolean` (i.e. `true`/`false`);

- the list may have only one element or may be a true list with several members;

- the set of values from which list elements are selected may be fixed or extendible.

New configuration entries of types unicode (extendible) and boolean (fixed) may be created
via the context menu. It offers also the option to remove existing entries.

The relationship of server and client entries is complicated.

- Server entries hold the defaults for client entries.

- When a server entry (a config object) is deleted the depending client entries (config states) vanish as well.

- Creation of a client entry via '{opsi-configed}' entails the automatic creation of an adequate server default.

- Deletion of a client entry via '{opsi-configed}' removes only the client specific value (if existing) but
leaves the server default (which will be valid for the client).

- If a specific client value exists and is not identical with the server default value it is printed in a bold font.

- There are configurations objects for which client values may be created and edited but only the server
objects are used (e.g. the entries for the '{opsi-configed}' in the category 'configed.').

Starting with {opsi-configed} version 4.0.3, the configurations objects are categorized in some (predefined)
groups. The groups are listed in a tree-like manner on the left part of the panel. The entry name/value pairs
belonging to the selected group are shown in the right part of the panel. Wheel mouse scrolling is enabled
as well on the left as on the right side.

.'{opsi-configed}': Tab Host parameters (Server- and Client configuration)
image::opsi-configed-hostparameters.png["{opsi-configed}: Tab Host parameters (Server- and Client configuration)", width=400]

[[opsi-manual-configed-depotconfiguration]]
=== Depot configuration

In the mode 'Properties of depots' you will see the tab 'Depots'. There is a drop down menu to select the depot. After selecting the depot you may change the properties of the '{opsi-depot}'.

see also:
////
<<opsi-manual-configed-mode-selection>>)
////

.'{opsi-configed}': Tab Depot configuration
image::opsi-configed-depotconfiguration.png["{opsi-configed}: Tab Depot configuration", width=400]

[[opsi-manual-configed-groupactions]]
=== Group actions

The button "group actions" in the main button bar (cf. <<opsi-manual-configed-mode-selection>>)
opens a window for group related functions.

At the moment, it provides only one function which is relevant for the opsi-localimage module.

* to search for an operating system, that had been installed on all of the clients of the selected group and therefore can be offered for all of the clients of that group.

.'{opsi-configed}': Group actions (for opsi-local-image)
image::configed_groupaction_localimage.png["{opsi-configed}: Group actions (for opsi-local-image)", width=400]


[[opsi-manual-configed-packageactions]]
=== Product actions

The button "product actions" in the main button bar (cf. <<opsi-manual-configed-mode-selection>>)
opens a window for functions related to products resp. packages.

Currently it offers two options:

* An .opsi file (opsi packet) can be selected or entered and can be uploaded to the opsi server; the default upload directory on the server is the network (samba) share named opsi_workbench. The button click starts installing the packet on the server, like invoking the opsi-package-manager.

* The WinPE files and install files for an Windows product (Windows Vista and above) can be uploaded to the server product directory (share opsi_depot), so that windows products do not have to be managed from the server side.

.'{opsi-configed}': packet  and product actions
image::configed_package-actions.png["{opsi-configed}: packet actions", width=400]
