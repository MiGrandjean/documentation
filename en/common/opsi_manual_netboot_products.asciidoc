////
; Copyright (c) uib gmbh (www.uib.de)
; This documentation is owned by uib
; Until we found a better license:
; All rights reserved.
; credits: http://www.opsi.org/credits/
////

:Author:    uib gmbh
:Email:     info@uib.de
:Date:      15.06.2011
:Revision:  4.0.1
:toclevels: 6


include::../common/opsi_terms.asciidoc[]

[[opsi-manual-netboot-products]]
== Netboot products

[[opsi-manual-netboot-bootimage-parameterization]]
=== Parameteters for the opsi linux boot image

The opsi linux boot image has some parameters which may be used to change the behaviour of the boot image. You will try this if the opsi linux boot images do not run properly with the standard parameters on your hardware (e.g. black screen). +
You may change these standard parameters by the '{opsi-configed}' choosing the Tab 'Hostparameter' and use there the entry 'opsi-linux-bootimage.append'.

Typical values are here (may be combined):

* +acpi=off+

* +noapic+

* +irqpoll+

A other important default is the password of the user root at the opsi linux boot image. This password is 'linux123' by default and you should change this for security reasons.

To do this change the 'opsi-linux-bootimage.append' entry at the 'server-configuration'.

The option you have to change is 'pwh' (password hash). As value to this option you have to give a new password hash, which will be loaded to the `/etc/shadow` at boot time.

The best way to get the correct password hash is to login via ssh to your bootimage:

[source,prompt]
----
ssh root@<client.domain.tld>
----

The old password is 'linux123'.

Now set a new password for root:

[source,prompt]
----
passwd
----

Get the new hash

[source,prompt]
----
grep root /etc/shadow
----

The output should look like this:

[source,prompt]
----
root:$6$344YXKIT$D4RPZfHMmv8e1/i5nNkOFaRN2oYNobCEjCHnkehiEFA7NdkDW9KF496OHBmyHHq0kD2FBLHZoTdr5YoDlIoWz/:14803:0:99999:7:::
----

Now copy from after the first colon until to the second colon and use this as value for 'pwh'.

So the option for 'opsi-linux-bootimage.append' may be:

[source,prompt]
----
pwh=$6$344YXKIT$D4RPZfHMmv8e1/i5nNkOFaRN2oYNobCEjCHnkehiEFA7NdkDW9KF496OHBmyHHq0kD2FBLHZoTdr5YoDlIoWz/
----


[[opsi-manual-netboot-unattended]]
=== Unattended automated OS installation


[[opsi-manual-netboot-unattended-overview]]
==== Overview


.Steps of a re-installation:

* Using PXE-Boot: 
** Choose the client which has to be installed with the utility opsi-configed or opsi-admin.
* At the next reboot, the client detects (via PXE-Bootprom) the re-installation request and loads the boot image from the opsi-server.

*Using CD-Boot:
** The client boots the boot image from the 'opsi-client-bootcd'.
*The boot image starts and asks for confirmation to proceed with the re-installation. This is the only interactive question. After confirming this, the installation proceeds without any further request for interaction.
* The boot image partitions and formats the hard disk.
* The boot image copies the required installation files and configuration information from the '{opsi-server}' to the client and initiates a reboot.
* After the reboot the client installs the OS according to the provided configuration information without any interaction.
* Next the '{opsi-client-agent}' is installed as the opsi installer for automated software distribution.
* The automated software distribution then installs all the software packages as defined in the client's configuration.

[[opsi-manual-netboot-unattended-requirements]]
==== Preconditions

The client PC has to be equipped with a bootable network controller. Most recent network controllers provide this functionality (PXE boot), also recent network controllers which are integrated on the PC's main board. The PXE software, which is stored in the 'bootprom' of the network controller, controls the boot process via network according to the BIOS boot device sequence. Usually the boot sequence has to be set in the BIOS, 'network-boot' has to be the first boot device.  If there is no possibility to use PXE you may boot from the opsi-client-bootcd.

The opsi installation package for the OS to be installed needs to be provided on the depot server. In the following we assume Windows XP to be the OS to install.

[[opsi-manual-netboot-unattended-netboot]]
==== PC-client boots via the network

The PXE firmware gets activated at startup of the PC. Part of the PXE implementation is a DHCP client.

.Step 1 during PXE-Boot
image::../images/netboot-pxe.png["Step 1 during PXE-Boot",width=300]

At first the PC only knows its hardware Ethernet address (MAC), consisting of six two-digit HEX characters.

The firmware initiates a 'DHCPDISCOVER' broadcast: “I need an IP address, who is my DHCP-Server?“ 

The DHCP-Server offers an address ('DHCPOFFER').

'DHCPREQUEST' is the response of the client to the server if the IP address is accepted. (This is not an obsolete step as there could be more than one server in the network.) 

The server sends a 'DHCPACK' to acknowledge the request. The information is sent to the client again.

You can watch this process on the display, for the PXE-BOOTPROM displays some firmware information and its 'CLIENT MAC ADDR'. The rotating pipe-symbol is displayed during the request. When an offer was made it is replaced by an '\' and you get the transmitted information (CLIENT IP, MASK, DHCP IP, GATEWAY IP).
A short while later you should get a response like this: 'My IP ADDRESS SEEMS TO BE ......'.

This process makes the PC a regular, fully configured member of the network.
The next step is to load the boot file (boot image) given in the configuration information. 

[[opsi-manual-netboot-pxelinux]]
==== Loading pxelinux

The boot image is loaded via trivial file transfer protocol (tftp). The displayed message is „LOADING“. tftp is a rather old and simple protocol to transfer files without authentication. In fact, all data available via tftp is available to everyone in the network. Therefore the tftp access is limited to one directory, which is usually '/tftpboot'. This directory is specified in inetd (internet daemon, /etc/inetd.conf), which will start the tftp daemon 'tftpd' if requested. The start command as noted in inetd.conf is something like +
`tftpd -p -u tftp -s /tftpboot`

The PXE boot-process is multi-stage:

Stage 1 is to load and start the file submitted as part of the address discovery process (usually /tftpboot/linux/pxelinux.0).

The program 'pxelinux.0' then looks for configuration and boot information in '/tftpboot/linux/pxelinux.cfg'. It first looks for a PC specific file with a name based on the hardware ethernet address (MAC) of the network controller with a leading 01. The filename for the controller with the hardware ethernet address 00:0C:29:11:6B:D2 would be 01-00-0c-29-11-6b-d2. If the file is not found, 'pxelinux.0' will start to shorten the filename (starting at the end) to obtain a match. If this process ends without result, the file 'default' will be loaded. This file only contains the instruction to boot from the local hard disk. In this case the PC won't install anything and will just start the current OS from hard disk. 

.Step 2 PXE-Boot
image::../images/netboot-pxelinux.png["Step 2 PXE-Boot",width=300]

To initiate the re-installation of a certain PC, a loadable file is prepared for the program 'pxelinux.0'. In order to do so, the opsipxeconfd creates a PC custom file in '/tftpboot/linux/pxelinux.cfg'. Part of this file is the command to load the installation boot image. Also this file contains the client key to decrypt the pcpatch password. This file is created as a 'named pipe' and therefore disappears after being read once. More details about this in the chapter on security of file shares.

Based on the information the 'pxelinux.0' got from the 'named pipe', the actual bootimage is loaded from the opsi depot server via tftp. The bootimage is based on a linux kernel (/tftpboot/linux/install) within an appropriate initrd file system (/tftpboot/linux/miniroot.gz) and has a size of approximately 65 MB.

[[opsi-manual-netboot-unattended-CD]]
==== PC-Client bootet von CD

Analog zu dem Bootvorgang per tftp mit Hilfe des PXE-bootproms kann das Installationsbootimage auch direkt von der opsi-bootcd geladen werden.

Diese Möglichkeit bietet sich bei folgenden Voraussetzungen an:

* der Client verfügt über kein PXE;
* es gibt kein dhcp;
* es gibt dhcp aber es sollen dort keine Einträge zu den Clients gemacht werden und die Hardwareadressen der Clients sind nicht bekannt;
* es gibt dhcp aber dieses ist nicht korrekt konfigurierbar

Entsprechend der unterschiedlichen Situationen müssen dem Bootimage auf der CD unterschiedlich viele Informationen interaktiv bereitgestellt werden. Im einfachsten Fall müssen überhaupt keine Angaben gemacht werden.

Lesen Sie hierzu auch das Kapitel 'Anlegen eines neuen opsi-Clients mit Hilfe der opsi-client-bootcd' in Getting-Started Handbuch.

[[opsi-manual-netboot-unattended-reinst]]
==== Das Linux Installationsbootimage bereitet die Reinstallation vor

Das Bootimage startet eine erneute dhcp-Anfrage und konfiguriert sich entsprechend sein Netzwerkinterface. Danach werden über den '{opsi-webservice}' die Konfigurationsdaten für diesen Client geladen.

.Ueber PXE-Boot geladenes Bootimage bereitet Festplatte zur Betriebssysteminstallation vor
image::../images/netboot-pxeos.png[width=300]

Ergänzt wird dieses Informationspaket durch Angaben aus der dhcp-Antwort (z.B. wer ist der tftp-Server) sowie mit über den Webservice ermittelte Informationen. Die gesammelten Informationen werden für die Weiterverarbeitung durch das eigentliche Installationsskript bereitgestellt.

Nun wird das Passwort des Installations-Users pcpatch mit Hilfe des übergebenen Schlüssels entschlüsselt und der angegebene Installationsshare gemountet. Jetzt kann das auf dem gemounteten Share liegende Installationsskript für das zu installierende Betriebssystem gestartet werden. Die Abläufe in diesem Skript sind abhängig von dem zu installierenden Betriebssystem. Im Folgenden werden beispielhaft die Abläufe für eine Windows-XP-Installation skizziert.

*Vorbereitung der Festplatte:* Auf der Platte wird eine 6 GB große FAT32 Partition angelegt, formatiert und bootfähig gemacht.

*Kopieren der Installationsdateien:* Die Dateien für die Installation des Betriebssystems werden von dem Installationsshare des Servers (z.B. /opt/pcbin/install/winxppro/i386) auf die lokale Platte kopiert. Das Gleiche gilt für das Setup-Programm des '{opsi-client-agent}'s zur Einrichtung der automatischen Softwareverteilung auf dem PC.

*Einpflegen der Konfigurationsinformationen:* Unter den auf die lokale Platte kopierten Dateien finden sich auch Konfigurations- und Steuerdateien, die Platzhalter enthalten. Durch ein spezielles Skript (patcha) werden diese durch entsprechende Parameter aus dem Informationspaket ersetzt (gepatcht), welches das Bootimage zuvor aus Konfigurationsdateien und dhcp-Antwort bereitgestellt hat. Ein Beispiel für eine zu patchende Datei ist die unattend.txt. Sie steuert das „unbeaufsichtigte“ Installieren von Windows 2003/XP.

*Reboot vorbereiten:* Der 'Bootloader' wird so konfiguriert, dass beim nächsten Boot der Rechner via 'ntloader' in das Windows Setup-Programm startet. Der Aufruf ist dabei mit der Option versehen, die gepatchte unattend.txt als Steuerdatei zu verwenden.


*Reboot:* Da in `/tftpboot/linux/pxelinux.cfg` nun keine PC-spezifische Datei mehr vorhanden ist, wird in Stufe 1 des PXE-Boots der Befehl hdboot aus der Datei default geladen. Damit wird der lokale Bootloader gestartet und die Betriebssysteminstallation gestartet.

Die beschriebenen Abläufe werden von dem für diese Installation angegebenen Python-Script gesteuert. Hierzu stellt das Bootimage eine Pythonbibliothek bereit, die im gesonderten opsi-bootimage Handbuch beschrieben ist.

[[opsi-manual-netboot-unattended-os]]
==== Die Installation von Betriebssystem und opsi-client-agent

Die Installation des Betriebssystems ist ein unattended Setup wie es von Microsoft vorgesehen ist. Dabei werden die Standardmöglichkeiten der Hardwareerkennung genutzt. Im Gegensatz zu einer normalen Installation von CD können auf der Installations-Partition schon aktualisierte Treiber und Servicepacks eingepflegt werden, damit diese schon direkt bei der Erstinstallation verwendet werden.

Zu einer unattended Installation gehört die Möglichkeit, nach Abschluss der eigentlichen Betriebssysteminstallation automatisch noch weitere Installationen starten zu können. Dieser Mechanismus wird genutzt, um das Setup des '{opsi-client-agent}'s auszuführen und damit die automatische Softwareverteilung einzubinden. In der Registry wird eingetragen, dass sich der Rechner immer noch im Reinstallationsmodus befindet.

Nach dem abschließenden Reboot starten nun vor einem Login die opsi-Programme
zur Softwareverteilung. Diese Software erkennt anhand der Registry den Reinstallationsmodus. Dieser Modus hat hier zur Folge, dass alle Softwarepakete, für welche der Installationsstatus 'installed' oder die angeforderte Aktion 'setup/update' ist, nun installiert werden. Auf diese Weise werden sämtlich Pakete, die vor der Reinstallation des Betriebssystems auf diesem PC waren, automatisch wieder eingespielt. Erst nach Abschluss aller Installationen wird der Reinstallationsmodus zum Standard-Bootmodus zurückgeschaltet. (Im Gegensatz zum Reinstallationsmodus, werden im Standard-Bootmodus nur Pakete installiert, bei denen die Angeforderte Aktion 'setup/update' ist.)
Damit ist der PC fertig installiert.

[[opsi-manual-netboot-unattended-patcha]]
==== Funktionsweise des patcha Programms

Wie oben erläutert werden vom Bootimage (genauer gesagt vom Programm
`/usr/local/bin/master.py`) die Konfigurationsinformationen aus dem '{opsi-webservice}' und dhcp gesammelt, um sie dann in entsprechende andere Konfigurationsdateien wie z.B. die `unattended.txt` einzupflegen. Das Einpflegen übernimmt das Programm `/usr/local/bin/patcha`.

Das Skript gleicht anhand eines Suchmusters '#@flagname(*)#' eine Konfigurationsdatei mit den Einträgen aus einer anderen Datei (hier cmdline) ab, die Einträge der Art "Flagname=Wert" enthalten muss und patcht diese bei Übereinstimmung des Suchmusters. Das Suchmuster kann nach dem Flagnamen einen "*" enthalten und muß einen oder beliebig viele "#" als Abschluß enthalten. Default wird `/proc/cmdline benutzt`.
Wenn man `patcha` ohne irgendwelche Optionen und ohne Dateiübergabe aufruft,
werden die "Flagname=Wert"-Paare aus der `/proc/cmdline` ausgegeben.

Wenn man `patcha <dateiname>` eingibt, patcht er die Datei mittels der `/proc/cmdline`.

Eine andere cmdline als /proc/cmdline, gibt man mit `patcha -f <andere_cmdline>` mit. Ohne zusätzlich mitgegebenen Dateinamen werden die Werte der andere_cmdline
ausgegeben, mit Dateiname wird die Datei mit den Werten aus andere_cmdline
gepatcht.

[source,prompt]
----
Usage: patcha [-h|-v] [-f <params file>] <patch file>

Fill placeholders in file <patch file>
Options:
-v Show version information and exit
-h Show this help
-f <params file> File containig key value pairs
If option not given key value pairs from kernel cmdline are used
----
`patcha` patcht nur einen Tag pro Zeile.

Der Platzhalter wird auf die Länge des zu ersetzenden Wertes getrimmt bzw erweitert und dann ersetzt. D.h unabhängig von der Länge des Platzhalters wird dieser durch den Wert ersetzt. Anhängende Zeichen bleiben anhängend. +
Beispiel:

Mit der Datei

[source,prompt]
----
cat try.in
tag1=hallohallohallo1 tag2=t2
----

und der Datei

[source,prompt]
----
cat patch.me
<#@tag1##########################>
<#@tag2##########################>
<#@tag1#>
<#@tag2#>
<#@tag1*##########################>
<#@tag2*##########################>
<#@tag1*#>
<#@tag2*#>
<#@tag1#><#@tag1#####>
<#@tag2*#######><#@tag1#>
----

ergibt

[source,prompt]
----
./patcha -f try.in patch.me
cat patch.me
<hallohallohallo1>
<t2>
<hallohallohallo1>
<t2>
<hallohallohallo1>
<t2>
<hallohallohallo1>
<t2>
<hallohallohallo1><#@tag1#####>
<t2><#@tag1#>
----

[[opsi-manual-netboot-unattended-products]]
==== Aufbau der Produkte zur unattended Installation

Die Informationen zum 'Aufbau der Produkte zur unattended Installation' finden Sie im Handbuch opsi-getting-started.

[[opsi-manual-netboot-unattended-driver]]
==== Vereinfachte Treiberintegration in die automatische Windowsinstallation

Die Informationen zum 'Vereinfachte Treiberintegration in die automatische
Windowsinstallation' finden Sie im Handbuch opsi-getting-started.

[[opsi-manual-netboot-nt6]]
=== Hinweise zu den NT6 Netbootprodukten (Vista / Win7 / 2008)

Die Netbootprodukte zur Installation von NT6 Betriebssystemen enthalten eine Fülle von Produktproperties, welche in Ihrer Funktion in der Folge erläutert werden sollen:

.NT6 Productproperties
image::../images/netboot-win-nt6-properties.png["NT6 Productproperties",width=200]

additional_drivers:: Liste von Verzeichnissen unterhalb von `<productid>\drivers\drivers\additional`. Alle Treiberverzeichnisse unterhalb der angegebenen Verzeichnisse werden unabhängig von der automatischen Treibererkennung zusätzlich in die Installation mit eingebunden.

askbeforeinst:: Soll vor Beginn der Installation gefragt werden.

boot_partition_label:: Label der 'boot_partition' (Bitlocker Partion)

boot_partition_letter:: Laufwerksbuchstabe der 'boot_partition' (Bitlocker Partion)

boot_partition_size:: Größe der 'boot_partition' (Bitlocker Partion). 0 = keine Erstellen

data_partition_label:: Label der Datenpartition, wenn eine erstellt wird.

data_partition_letter:: Laufwerksbuchstabe der Datenpartition, wenn eine erstellt wird.

fullname:: Vollständiger Name des Lizenznehmers wie er der Installation übergeben wird.

imagename:: Name der Variante des Betriebssystems das zu installieren ist.

.NT6 Imagenames
image::../images/netboot-win-nt6-properties-imagenames.png["NT6 Imagenames",width=200]

orgname:: Vollständiger Name der Firma / Organisation des Lizenznehmers wie er der Installation übergeben wird.

productkey:: Lizenzschlüssel zur Installation. Wird nur ausgewertet wenn der Hostparameter `license-management.use` auf 'false' steht. Ansonsten wird der Lizenzschlüssel aus dem Lizenzmanagement geholt.

system_keyboard_layout:: Sprachauswahl für die Tastatur.

.Sprachauswahl für die Tastatur
image::../images/netboot-win-nt6-properties-keyboards.png["Sprachauswahl für die Tastatur",width=200]

system_language:: Sprachauswahl für das System.

system_timezone:: Zeitzoneneinstellung

windows_partition_label:: Label der Partition (Festplatte C:) auf die das Betriebssystem installiert werden soll.

windows_partition_size:: Größe der Partition (Festplatte C:) auf die das Betriebssystem installiert werden soll. Die Angabe kann in Prozent der Festplatte oder in absoluten Zahlen (G=Gigabyte) erfolgen. Wird ein anderer Wert als 100% gewählt, so wird auf dem verbleibenden Rest der Fasplatte eine 'data_partition' angelegt.

.Größe der C: Partition
image::../images/netboot-win-nt6-properties-winpartionsize.png["Größe der C: Partition",width=200]

winpenetworkmode:: Soll die Betriebssysteminstallation über den gemounteten Netzwerkshare vom PE aus erfolgen (true) oder sollen alle Installationsdateien vorher auf die Festplatte kopiert werden (false).



[[opsi-manual-netboot-ntfs-image]]
=== Ntfs-images (write + restore)

Mit den Produkten 'ntfs-write-image' und 'ntfs-restore-image' können Sie Abbilder von Partitionen sichern bzw. wiederherstellen. Ziel bzw. Quelle der Imagedatei müssen auf dem '{opsi-depotserver}' liegen und werden per ssh (user pcpatch) erreicht und im Produktproperty angegeben.

Entsprechende Produkte zum Sichern und Wiederherstellen von NTFS-Partitionen gibt es auch auf der opsi-clientbootcd und sind in einem gesonderten Manual beschrieben.

[[opsi-manual-netboot-memtest]]
=== memtest

Das Produkt 'memtest' dient dazu einen Memory-Test des Clients durchzuführen.

[[opsi-manual-netboot-hwinvent]]
=== hwinvent

Das Produkt 'hwinvent' dient dazu eine Hardwareinventariserung des Clients
durchzuführen.

[[opsi-manual-netboot-wipedisk]]
=== wipedisk

Das Produkt 'wipedisk' überschreibt die gesamte Festplatte (partion=0) oder
einzelne Partitionen mit unterschiedlichen Mustern. Die Anzahl der Schreibvorgänge wird über das {product-property} 'iterations' gesteuert (1-25).



