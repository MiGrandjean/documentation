////
; Copyright (c) uib gmbh (www.uib.de)
; This documentation is owned by uib
; Until we found a better license:
; All rights reserved.
; credits: http://www.opsi.org/credits/
////

:Author:    uib gmbh
:Email:     info@uib.de
:Date:      26.01.2011
:Revision:  4.0
:toclevels: 6

// Include common opsi terms
include::../common/opsi_terms.asciidoc[]


[[opsi-manual-configuration-tools-opsi-productupdater]]
=== Werkzeug: 'opsi-product-updater'

Das Kommandozeilen Werkzeug `opsi-product-updater` dient dazu, komfortabel 
opsi-Produkte aus einem Repository zu laden und auf dem Server zu installieren. 
Daneben kann es auch per cronjob zeitgesteuert aufgerufen werden 
und so zur automatischen Synchronisation von opsi-Servern bzw. für automatische 
Updates verwendet werden.

[source, prompt]
----
# opsi-product-updater --help

Usage: opsi-product-updater [options]
Options:
    -h    Show this help text
    -v    Increase verbosity (can be used multiple times)
    -V    Show version information and exit
    -c    Location of config file

----

Die wesentlichen Features sind 'konfigurierbare Repositories' und 'konfigurierbare Aktionen'
(die Konfigurationseinstellungen werden in der `/etc/opsi/opsi-product-updater.conf` vorgenommen).

[[opsi-manual-configuration-tools-opsi-productupdater-repositories]]
==== Konfigurierbare Repositories 

Repositories sind die Quellen, von denen sich der {opsi-server} die Pakete holt.

Grundsätzlich gibt es zwei Arten von Repositories, 'Internet-Repositories' und 'opsi-Server':

*Internet-Repositories* 

Das wichtigste Beispiel ist das uib-Repository mit der URL http://download.uib.de 

Internet-Repositories sind gekennzeichnet durch die Parameter 

- 'baseURL' (z.B. http://download.uib.de)

-  'dirs' (Eine Liste von Verzeichnissen z.B. opsi4.0/produkte/essential)

-  sowie bei Bedarf 'username' und 'password' für Passwort-geschützte Repositories (z.B. für Abo-Kunden)

Bei Bedarf ist auch ein Proxy einzustellen.

*opsi-server*

Ein Repository hat den Typ 'opsi-server', wenn in der `/etc/opsi/opsi-product-updater.conf` 
in der Sektion des Repositorys ein Eintrag zum Punkt 

- 'opsiDepotId'

vorgenommen wird.

In der Regel ist bei einem '{opsi-depotserver}' an diese Steller der zentrale '{configserver}' einzutragen. 
Damit zieht der Depotserver seine Pakete per Aufruf des 'opsi-product-updater' 
bzw. automatisiert per Cronjob vom zentralen Server.

[[opsi-manual-configuration-tools-opsi-productupdater-actions]]
==== Konfigurierbare Aktionen 

Für jedes Repository kann eingestellt werden:

* 'autoupdate': Aktuellere Versionen installierter Pakete werden geholt und installiert.

* 'autoinstall': Auch bis jetzt nicht installierte Pakete werden geholt und installiert

* 'autosetup': Die geholten und installierten Pakete werden für alle Clients,
auf denen dieses Produkt installiert ist, auf 'setup' gesetzt. 

* 'onlyDownload': Die Pakete werden nur runtergeladen und ins lokale Repository `/var/lib/opsi/repository` abgelegt, aber nicht installiert. Dieser Schalter macht nur in Verbindung mit 'autoupdate' und 'autoinstall' sinn, nicht aber mit 'autosetup', da die Pakete nicht auf setup gesetzt werden sollten, wenn Sie nicht installiert werden.

Eine weitere zusätzliche Restriktion der Installation der Produkte auf dem Server, gibt die Möglichkeit der Sektion 'installation'. In dieser Sektion kann ein Zeitfenster mit Start- und Endzeitpunkt angegeben werden, der wiederum beeinflusst, ob die Pakete installiert werden oder nicht. Nur wenn der Download der neuen Pakete innerhalb des Zeitfensters geladen wurden, werden Sie auch installiert und bei 'autosetup' auch auf setup gesetzt. Diese Einstellung kann man durch die Option 'exceptProductIds' umgehen. Hier kann eine Kommaseparierte Liste von Produkt-Ids eingetragen werden, die auch installiert werden, auch wenn das Zeitfenster schon geschlossen ist.

[[opsi-manual-configuration-tools-opsi-productupdater-wol]]
==== WakeOnLAN Funktionalität

Zusätzlich ist es möglich, die Aktualisierung 
der Pakete auf den Clients über einen konfigurierbaren Wake-On-Lan-Mechanismus 
anzustoßen. 
In Verbindung mit dem {opsi-product} 'shutdownwanted' 
kann dafür gesorgt werden, 
dass die Clients nacheinander geweckt, die Software verteilt 
und die Clients danach wieder heruntergefahren werden. 
Hierdurch kann man seine Clients zum Beispiel 
außerhalb der Geschäftszeiten mit Updates und Software versorgen 
und die Anwender können am nächsten Morgen direkt mit der Arbeit beginnen.

Diese Funktionalität hängt ab, wie die Konfiguration des Repository und der Sektion 'installation' gewählt wurde. Wenn die Pakete durch Restriktionen im gewählten Zeitfenster nicht installiert wurden, wird auch kein WakeOnLan ausgeführt. Weiterhin werden nur Clients geweckt, für die mindestens ein Produkt durch den opsi-product-updater auf setup gesetzt wurden.

Auch hier gibt es die Möglichkeit, durch die Konfiguration 'excludeProductIds' in der Sektion 'wol', eine Kommaseparierte Liste von Produkt-Ids zu übergeben, die alleine kein WakeOnLan auslösen.

[[opsi-manual-configuration-tools-opsi-productupdater-extended-functions]]
==== Erweiterte Funktionen

Für eine Multidepot-Umgebung, bei der zum Beispiel der Configserver als Repository konfiguriert wird (über die Konfiguration 'opsiDepotId') gibt es erweiterte Funktionen.

Im Normalfall versucht der opsi-product-updater die Eigschaften vom Depot für ein Produkt vorher aus zu lesen, um Sie beim Upgrade von opsi-Paketen bei zu behalten. Besonders in großen Umgebungen, mit vielen Depotservern (die sich alle über den opsi-product-updater vom Configserver synchronisieren), kann es sinnvoll sein die Product-Properties vom Configserver auf die untergeordneten Depots zu replizieren. Dafür gibt es einen Mechanismus im opsi-product-updater, der dafür sorgt, dass man die diese zentralen Konfigurationen, bis auf den Client durchsetzen kann.

Folgende Konfigurationen stehen zur Verfügung:

* 'inheritProductProperties': Die Einstellungen der Produkt-Eigenschaften werden nicht vom lokalen opsiDepot eingesammelt, sondern werden vom Repository abgefragt und bei der Installation des opsi-Pakets mit übernommen.
* 'purgeClientProperties': Mit dieser Option kann man die Produkt-Eigentschaften, die für das betreffende opsi-Paket an den Clients des lokalen opsiDepots gesetzt wurden löschen. Würde man dies nicht tun, würden die Einstellungen, die vom Repository repliziert wurden, nicht an den Clients ankommen, die eigene Einstellungen gesetzt haben.
* 'excludeInheritProductProperties': Mit dieser Option kann man die zwei oben genannten Optionen für einzelne Produkte abschalten. Diese Einstellung wird als Kommaseparierte Liste von Produkt-Ids vorgenommen.

