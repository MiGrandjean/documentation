////
; Copyright (c) uib gmbh (www.uib.de)
; This documentation is owned by uib
; and published under the german creative commons by-sa license
; see:
; http://creativecommons.org/licenses/by-sa/3.0/de/
; http://creativecommons.org/licenses/by-sa/3.0/de/legalcode
; english:
; http://creativecommons.org/licenses/by-sa/3.0/
; http://creativecommons.org/licenses/by-sa/3.0/legalcode
;
; credits: http://www.opsi.org/credits/
////

:Author:    uib gmbh
:Email:     info@uib.de
:Revision:  1
:toclevels: 6
:toc:
:numbered:
:doctype:   book

opsi Directory Connector
========================

include::../common/manual_copyright.asciidoc[]

[[introduction]]
Einführung
----------

The opsi-AD-connector is a tool to transfer data from an directory service
to an opsi installation.
This avoids the need of maintaining data in two separate systems.

[[requirements]]
Anforderungen
-------------

The source directory must implement the LDAP protocol.

The target opsi server should run opsi 4.0.7 or newer.
Prior versions may work but have not been tested.

The machine running the connector must have access to the ones running
the directory and opsi over the network.

Hardware-Anforderungen
~~~~~~~~~~~~~~~~~~~~~~

These requirements are intended for a basic use in a small-sized environment
with up to 500 clients.
The requirements may change running the connector in larger environments
so please be aware that adjustments may be necessary.

* 256 MB of free RAM
* Network connection

Software-Anforderungen
~~~~~~~~~~~~~~~~~~~~~~

Auf der Maschine muss folgendes installiert sein.

* Python 3.4 oder neuer

Die folgenden Module für Python 3:

* ldap3
* requests

Durch die Verwendung standardisierter Protokolle zur Kommunikation werden
keine opsi- oder Verzeichnisdienst-spezifischen Komponenten benötigt.

[[configuration]]
Configuration
-------------

The connector features a variety of settings to fit into different
environments.

The configuration is made in a JSON-formatted file.
To specify any boolean value please use `true` or `false`. Text has to
be entered in double quotes like `"this is text"`.

Directory settings
~~~~~~~~~~~~~~~~~~

These are the basic settings required to access the directory and limit
the search scopes to specific areas and objects.

[source,json]
----
{
    "directory": {
        "address": "ldap://192.168.12.34",
        "user": "DOMAIN\\opsiconnector",
        "password": "insertpasswordhere",
        "search_base": "dc=uib,dc=local,dc=sucher",
        "search_query_computers": "(objectClass=computer) ",
        "search_query_groups": "(objectClass=organizationalUnit)"
    },
    …
}
----

Under `address` you specify the directory-server.
`user` and `password` are required for authentication at the directory.

With `search_base` you specify the location from where on the connector
looks for matching objects.
If an object matches the condition defined in `search_query_computers`
it will be handled as a client for opsi.
If an object matches the condition defined in `search_query_groups` it
will be treated as a group for opsi.

Either `search_query_computers` or `search_query_groups` or both need to be configured. To disable one of these set them to `""`.

Behaviour settings
~~~~~~~~~~~~~~~~~~

These settings defines the behaviour of the connector.

[source,json]
----
{
    …
    "behaviour": {
        "write_changes_to_opsi": true,
        "root_dir_in_opsi": "Directory",
        "update_existing_clients": true,
        "prefer_location_from_directory": true
    },
    …
}
----

If `write_changes_to_opsi` is set to `false` no data will be written to
opsi. This can be used to check settings before applying them.

Via `root_dir_in_opsi` you define what group should be used as the root
in opsi. You need to make sure that this group exists.

If `update_existing_clients` is set to `false` clients already
existing in opsi will not be altered.
If this is set to `true` clients may have any manually set data overridden
with the values from the directory.

If `prefer_location_from_directory` is set to `true` clients will be
moved in opsi to the same location they have in the directory.
If you want to disable this set it to `false`.

Mappings
~~~~~~~~

With a system as flexible as a directory service the connector must
be given information about what attributes in the directory match these
of the corresponding opsi objects.

[source,json]
----
{
    …
    "mapping": {
        "client": {
            "cid": "name",
            "cdescription": "description",
            "cnotes": "",
            "chardwareAddress": "",
            "cipAddress": "",
            "cinventoryNumber": "",
            "coneTimePassword": ""
        },
        "group": {
            "gid": "name",
            "gdescription": "description",
            "gnotes": ""
        }
    },
    …
}
----

There is a mapping for clients and one for groups.

Opsi connection settings
~~~~~~~~~~~~~~~~~~~~~~~~

This specifies how the connector accesses opsi.

[source,json]
----
{
    …
    "opsi": {
        "address": "https://192.168.56:78:4447",
        "username": "connector",
        "password": "insertconnectorpasswordhere"
    }
}
----

Set `address` to the address of your opsi server. Please include the
port.
`username` and `password` should be set accordingly to authenticate
at the opsi server.

It is recommended to set up a special user for this task.
Refer to the opsi manual on how to do this.
