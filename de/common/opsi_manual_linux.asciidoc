////
; Copyright (c) uib gmbh (www.uib.de)
; This documentation is owned by uib
; and published under the german creative commons by-sa license
; see:
; http://creativecommons.org/licenses/by-sa/3.0/de/
; http://creativecommons.org/licenses/by-sa/3.0/de/legalcode
; english:
; http://creativecommons.org/licenses/by-sa/3.0/
; http://creativecommons.org/licenses/by-sa/3.0/legalcode
;
; credits: http://www.opsi.org/credits/
////

////
;***************************************************************************
; Subversion:
; $Rev$ $Author$
; $Date$
;***************************************************************************
////

:Author:    uib gmbh
:Email:     info@uib.de
:Date:      28.08.2015
:Revision:  4.0.6
:toclevels: 6


include::../common/opsi_terms.asciidoc[]

[[opsi-manual-linux]]
=== opsi Linux Support


include::../common/opsi_manual_supportmatrix-linclient.asciidoc[]

[[opsi-manual-linux-preconditions]]
==== Vorbedingungen für den opsi Linux Support


Technische Voraussetzungen sind opsi 4.0.5 mit den Paketständen:

.Benötigte Pakete
[options="header"]
|==========================
|opsi-Paket|Version
|opsi-linux-bootimage|>= 20140805-1
|==========================

Der opsi Support für Linux besteht aus einem Teil der von Anfang an Opensource ist (den Netbootprodukten)
und einem kofinanzierten Teil (dem Agent für die Clients).

Dieser opsi-linux-client-agent ist eine
http://uib.de/de/opsi-erweiterungen/erweiterungen/[kofinanzierte opsi Erweiterung]. +
Das bedeutet, dass Sie zum Einsatz eine Freischaltdatei benötigen. Diese Freischaltung erhalten Sie wenn Sie die Erweiterung kaufen. Zu Evaluierungszwecken stellen wir Ihnen auch eine zeitlich befristete Freischaltung kostenlos zur Verfügung ( -> mail an info@uib.de). +
Weitere Details zum Umgang mit Modulen finden Sie im opsi manual.
////
<<opsi-manual-modules>>.
////

[[opsi-manual-linux-introduction]]
==== Einführung

*Ein Management-Werkzeug für Windows und Linux*

Ziel der Erweiterung von opsi um die Unterstützung von Linux-Systemen ist die Schaffung eines Managementsystems für heterogene Umgebungen. Der Fokus liegt dabei auf der möglichst vollständigen Integration beider Welten in die gleichen Management-Vorgänge und Werkzeuge.

Dies bedeutet, dass eine Linux-Installation auf die gleiche Weise angestoßen wird wie eine Windows-Installation. +
Der opsi-client-agent unter Linux basiert auf dem selben Code wie der unter Windows und ist (soweit sinnvoll) befehlskompatibel.

*Linux-Distributionsübergreifend*

Der Linux-Support von opsi ist distributionsübergreifend angelegt. +
Die folgenden Distributionen werden gleichwertig unterstützt:

* Debian
* Ubuntu
* OpenSuse / SLES (Suse Linux Enterprise Server)
* Fedora / RHEL (RedHat Enterprise Linux)
* CentOS


[[opsi-manual-linux-netboot-v406]]
==== Linux Netboot Produkte v4.0.6 auf Basis des Distributionseigenen Installers

Bei den mit opsi v4.0.5 veröffentlichten Linux-Netboot-Produkte wurden die Installationen des gewählten Betriebssystems weitgehend vom Netboot-Produkt gesteuert.
Die entsprechenden Produkte setzen ab v4.0.6 auf den distributionseigenen Installer.

Dies ist ein grundsätzlicher Umbau, der dazu führt, das sowohl Aufbau als auch Verhalten der Produkte unterschiedlich zu den bisherigen Produkten sind. +
Hier eine Übersicht:

* Ähnlich wie bei der Windows-Installation wird für den Installer eine Antwortdatei bereit gestellt, welche vom Installer zur nichtinteraktiven Installation genutzt wird.

* Der distributionseigene Installer ist nicht wie bei Windows ein Programm das aufgerufen wird, sondern in einer Kombination aus distributionseigenem Kernel und initrd implementiert.

* Die gesamte Grundinstallation - inklusive Partitionierung, LVM, Basissoftware, etc. - liegt in der Hand des Installers und wird nicht mehr durch das bootimage durchgeführt.

* Bei den Suse- und RedHat-artigen Distributionen werden die Installationsquellen von Ihnen bereitgestellt, in dem Sie die Installations-DVD als ISO-Datei auf dem Depotshare ablegen. Dieses Verfahren ähnelt der Situation unter Windows, nur dass der Ablageort ein anderer ist und dass Sie bei Windows den Inhalt der Installations-DVD ablegen anstatt einer ISO-Datei.

* Bei den Debian-artigen werden die Installationsquellen aus dem Netz verwendet. Auf dem Depotshare liegen nur die Netboot Versionen von Distributionskernel und dazugehörigem initrd. Da diese Dateien nicht groß sind, werden sie im opsi-Paket mitgeliefert.

* Zur weiteren Pflege der Installation kann der opsi-linux-client-agent im Rahmen der Basisinstalltion mit installiert werden.

Abläufe der neuen Installationsmimik:

. Das opsi-linux-bootimage wird gebootet, löscht die Partitionstabelle und erstellt eine kleine temporäre Hilfsparition.

. Das opsi-linux-bootimage holt sich das distributionseigene initrd und entpackt es auf der Hilfspartition.

. Das opsi-linux-bootimage holt sich die generische Vorlage für die Antwortdatei, patcht (personalisiert) diese und legt sie dann in das initrd Verzeichnis.

. Das opsi-linux-bootimage erstellt weitere Hilfscripte und Konfigurationsdateien (z.B. zur Installation des opsi-linux-client-agent) und legt sie dann in das initrd Verzeichnis.

. Das opsi-linux-bootimage packt das gepatchte initrd Verzeichnis wieder zusammen.

. Das opsi-linux-bootimage bootet den Distributions-Kernel mit dem gepatchten initrd per kexec.

. Das so geladene System installiert das Zielsystem unattended und installiert abschließend den opsi-linux-client-agent.

Die Vorteile dieses Vorgehens sind:

* Die Installation findet exakt gemäß den Anforderungen des Distributors statt. Dies ist immer ein Vorteil, aber natürlich im Unternehmensumfeld als Ausgangsbedingung für Supportverträge besonders wichtig.

* Die Integration neuer Releases in opsi wird einfacher und dadurch schneller.

* Bei den Suse- und RedHat-artigen Distributionen findet die Installation aus auf dem opsi-Server liegenden Installationsquellen statt und ist damit schneller und unempfindlicher gegen Störungen als beim Zugriff auf Repositories aus dem Internet.

Es ergeben sich aber auch folgende Nachteile:

* Im Moment noch keine Unterstützung für UEFI-Rechner. Die Informationen über die UEFI-Umgebung gehen aktuell beim Boot per kexec verloren. Wir hoffen, dass wir dieses Problem in Zukunft mit einem neueren Bootimage beheben können.

[[opsi-manual-linux-netboot-v406-prepare]]
===== Bereitstellung und der Installationsmedien auf dem Server

Die Bereitstellung der Installationsmedien für die Suse- und RedHat-artigen Distributionen erfolgt auf einem neuen nfs share: `opsi_nfs_share`.

Zur Einrichtung des shares muß ein NFS-Server auf dem opsi-server installiert und konfiguriert sein.

Seit opsi v4.0.6 wird dies über ein gesondertes Paket `opsi-linux-support` erfolgen. Dieses Paket wird nicht per default installiert und muß einmalig nachinstalliert werden.

Auf Debian-artigen Betriebssystemen kann das durch den folgenden Befehl erreicht werden:

----
apt-get install opsi-linux-support
----

Was dieses Paket macht ist (als händige Anleitung) im folgenden Beschrieben:

* Auf dem opsi-server muß das entsprechende NFS-Server-Paket installiert sein. Auf Debian, Ubuntu, Suse ist dies das Paket: `nfs-kernel-server`. Auf Centos, Fedora, Redhat ist es das Paket `nfs-utils`.

* Der Export `opsi_nfs_share` muß angelegt und exportiert werden:

** Verzeichnis erzeugen: +
`mkdir -p /var/lib/opsi/depot/opsi_nfs_share`

** In der Datei `/etc/exports` den Eintrag: +
`/var/lib/opsi/depot/opsi_nfs_share *(ro,no_root_squash,insecure,async,subtree_check)` +
erzeugen.

** Das Aktivieren des Exports wird mit dem folgenden Befehl ausgelöst: +
`exportfs -r`

** Zur Kontrolle des erfolgreichen Exports den folgenden Befehl aufrufen: +
`showmount -e localhost` +
Die Ausgabe sollte sein: +
`Export list for localhost: +
/var/lib/opsi/depot/opsi_nfs_share *`

* Der share `opsi_nfs_share` hat folgenden Verzeichnisaufbau: +
`opsi_nfs_share/<productId>/<arch>/<dvd>.iso` +
zum Beispiel: +
`opsi_nfs_share/opensuse13-2/64/openSUSE-13.2-DVD-x86_64.iso` +
Die Installationsdatei muß als Dateiendung `.iso` haben, der Rest ist egal. Liegen in einem Verzeichnis mehrere `.iso` Dateien so ist nicht definiert welche verwendet wird.

* Kopieren Sie die Installations-DVD an den entsprechenden Platz im `opsi_nfs_share` und führen Sie aus: +
`opsi-set-rights /var/lib/opsi/depot/opsi_nfs_share` +
WICHTIG: Verwenden Sie die Standard Installations-DVD's der Distribution. Modifizierte Installations DVD's haben eventuell einen anderen Aufbau und funktionieren nicht.

* Sollten Sie aus irgendwelchen Gründen das Verzeichnis `/var/lib/opsi/depot/opsi_nfs_share` nicht vom opsi-server aus per NFS exportieren können (z.B. weil der Depotshare vom opsiserver per NFS von einem NAS eingebunden ist), so kann der zu verwendende NFS-share über ein Serverweites config angegeben werden. Z.B. `clientconfig.opsi_nfs_share=172.16.166.1:/var/lib/opsi/depot/opsi_nfs_share`

Die opsi v4.0.6 Netbootprodukte für Debian und Ubuntu beziehen Ihre Installations-Dateien nicht aus einem ISO-File. Vielmehr werden diese von uns mit dem Standard Netboot-Kernel und initrd ausgeliefert. Alle weiteren benötigten Pakete werden über das Internet bezogen. Zur Entlastung Ihrer Netzwekverbindung kann bei vielen Installationen daher die Verwendung eines lokalen apt-cache sinnvoll sein. +
Siehe auch Kapitel <<opsi-manual-linux-debproxy>>

[[opsi-manual-linux-netboot-v406-generalproperties]]
===== Allgemeine Properties der opsi v4.0.6 Linux Netboot Produkte

Die folgenden Properties finden Sie zur Steuerung der Linuxinstallation in allen v406 Netbootprodukten:

* `askbeforeinst`: +
Soll das Starten der Installation am Client bestätigt werden müssen?  (Default='true')

* `architecture`: +
Mit welcher Architektur soll das Zielsystem installiert werden? +
Beeinflusst außerdem das verwendete Bootimage.  (Default='64bit')

* `language` oder `locale`: +
Welche Sprache / locale soll installiert werden.  (Default=Distributionsabhängig / 'de')

* `console_keymap`: +
Zu installierendes Tastaturlayout.  (Default=Distributionsabhängig / 'de')

* `timezone`: +
Welche Zeitzone soll verwendet werden?. (Default='Europe/Berlin')

* `root_password`: +
Passwort für root.  (Default='linux123')

* `user_password`: +
Passwort für user.  (Default='linux123')

* `online_repository`: +
Repository der Distribution für die Installation. (Nicht bei SLES) (Default=Distributionsabhängig)

* `opsi_online_repository`: +
Repository der opsi-server Pakete. (Default=Distributionsabhängig)

* `proxy`: +
Proxystring (wenn benötigt) in der Form: `http://<ip>:<port>`. (Default=pass:[''])

* `install_opsi-client-agent`: +
Installiere den opsi-client-agent für Linux (Kofinanzierungsprojekt: Sie benötigen eine Aktivierung durch die /etc/opsi/modules). (Default='false')

* `setup_after_install`: +
Welche opsi-Produkte sollen zum Abschluss der Betriebssysteminstallation auf *setup* gestellt werden. (Default='')

[[opsi-manual-linux-netboot-v406-special]]
===== Die einzelnen Netboot Produkte

[[opsi-manual-linux-netboot-v406-special-ubuntu14-04]]
====== Die Produkte: debian7 , debian8 und ubuntu14-04

Die Basis-Installation erfolgt direkt aus dem Netz.

Das Produkt hat produktiven Status.

Das Produkt hat folgende zusätzliche Properties:

----
name: encrypt_password
multivalue: False
editable: True
description: Password for disk encryption (only if encrypt_logical_volumes=true)
values: ["linux123"]
default: ["linux123"]

name: partition_disk
multivalue: False
editable: True
description: Disk to use first or complete device path
values: ["first", "/dev/sda", "/dev/sdb"]
default: ["first"]

name: partition_method
multivalue: False
editable: False
description: regular: use the usual partition types for your architecture / lvm: use LVM to partition the disk / crypto: use LVM within an encrypted partition
values: ["regular", "lvm", "crypto"]
default: ["lvm"]

name: partition_recipe
multivalue: False
editable: False
description: atomic: all files in one partition / home: separate /home partition / multi: separate /home, /usr, /var, and /tmp partitions
values: ["atomic", "home", "multi"]
default: ["atomic"]

name: desktop_package
multivalue: True
editable: False
description: Desktop package to install (standard = no desktop)
values: ["ubuntu-desktop", "kubuntu-desktop", "lubuntu-desktop", "xubuntu-desktop", "ubuntu-gnome-desktop"]
default: ["standard"]

name: language_packs
multivalue: True
editable: False
description: language packages to install
values: ["ar", "bg", "by", "cf", "de", "dk", "en", "es", "et", "fa", "fi", "fr", "gr", "il", "it", "kg", "kk", "lt", "mk", "nl", "no", "pl", "ro", "ru", "sg","sr", "ua", "uk", "us", "wo"]
default: ["de"]
----

.Videos (Zeitraffer)

Folgende Videos zeigen jeweils eine Installation. +
Sie sind mit einem Frame pro Sekunde aufgenommen und dadurch schneller anzusehen als die Installation eigentlich dauert.

* http://download.uib.de/opsi4.0/experimental/opsi-v406/products/opsi-linux/videos/debian7_406_1fps.mp4

* http://download.uib.de/opsi4.0/experimental/opsi-v406/products/opsi-linux/videos/debian8_406_1fps.mp4

* http://download.uib.de/opsi4.0/experimental/opsi-v406/products/opsi-linux/videos/ubuntu14-04_406_1fps.mp4

[[opsi-manual-linux-netboot-v406-special-opensuse13-02]]
====== Das Produkt opensuse13-2

Das Produkt hat folgende zusätzliche Properties:

----
name: install_unattended
description: If false then do interactive installation
default: True
----

Das Property:
----
name: networkdevice
multivalue: False
editable: True
description: interface to conigure (vbox:enp0s3 / esxi:ens32)
values: ["eno1", "ens1", "ens32", "enp0s1","enp0s2","enp0s3"]
default: ["enp0s3"]
----
existiert nur aus Gründen der Rückwärtskompatibilität zu alten bootimages
und wird bei dem Betrieb mit einem aktuellen bootimage ( >= 20150818) ignoriert,
da hier die automatische Erkennung der 'predictable network interface names' funktioniert.

.Videos (Zeitraffer)

Folgendes Video zeigt eine Installation. +
Es ist mit einem Frame pro Sekunde aufgenommen und dadurch schneller anzusehen als die Installation eigentlich dauert.

* http://download.uib.de/opsi4.0/experimental/opsi-v406/products/opsi-linux/videos/opensuse13-2_406_1fps.mp4

[[opsi-manual-linux-netboot-v406-special-sles12]]
====== Das Produkt sles12

Das Produkt hat folgende zusätzliche Properties:

----
name: productkey
multivalue: False
editable: True
description: email:regcode-sles for suse_register. Is only used if the  host parameter  `license-management.use` is set to  false . If it set to  True  the license key will be get from the license management module. / La clé de licence pour l'installation. Est utilisée uniquement si dans "Réseau et paramètres supplémentaires" `license-management.use` est défini à false (faux) . Si c'est réglé sur True (vrai) la clé de licence sera obtenue du module de gestion des licences.
values: ["", "myemail@example.com:xxxxxxxxxxxxxx"]
default: [""]

name: suse_register
description: set to false, if you don't want to register your system online, if you set this to false you have to give local repositories
default: True

name: local_repositories
multivalue: True
editable: True
description: list of local repositories to use. Syntax: "repository description", example entry: "http://sles.example.com/suse/repo NameForRepo"
values: [""]
default: [""]

name: install_unattended
description: If false then do interactive installation
default: True
----

Das Property:
----
name: networkdevice
multivalue: False
editable: True
description: interface to conigure (vbox:enp0s3 / esxi:ens32)
values: ["eno1", "ens1", "ens32", "enp0s1","enp0s2","enp0s3"]
default: ["enp0s3"]
----
existiert nur aus Gründen der Rückwärtskompatibilität zu alten bootimages
und wird bei dem Betrieb mit einem aktuellen bootimage ( >= 20150818) ignoriert,
da hier die automatische Erkennung der 'predictable network interface names' funktioniert.

.Videos (Zeitraffer)

Folgendes Video zeigt eine Installation. +
Es ist mit einem Frame pro Sekunde aufgenommen und dadurch schneller anzusehen als die Installation eigentlich dauert.

* http://download.uib.de/opsi4.0/experimental/opsi-v406/products/opsi-linux/videos/sles12_406_1fps.mp4

[[opsi-manual-linux-netboot-v406-special-redhat70]]
====== Die Produkte redhat70 und centos70

Das Produkt hat folgende zusätzliche Properties:

----
name: install_unattended
description: If false then do interactive installation
default: True

name: selinux_mode
multivalue: False
editable: False
description: In which mode should SELinux run ?
values: ["enforcing", "permissive", "disabled"]
default: ["permissive"]

name: partition_method
multivalue: False
editable: False
description: plain: Regular partitions with no LVM or Btrfs. / lvm: The LVM partitioning scheme. / btrfs: The Btrfs partitioning scheme. / thinp: The LVM Thin Provisioning partitioning scheme.
values: ["plain", "lvm", "btrfs", "thinp"]
default: ["lvm"]

name: productkey
multivalue: False
editable: True
description: email:regcode for subscription_register. Is only used if the  host parameter  `license-management.use` is set to  false . If it set to  True  the license key will be get from the license management module. / La clé de licence pour l'installation. Est utilisée uniquement si dans "Réseau et paramètres supplémentaires" `license-management.use` est défini à false (faux) . Si c'est réglé sur True (vrai) la clé de licence sera obtenue du module de gestion des licences.
values: ["", "myemail@example.com:xxxxxxxxxxxxxx"]
default: [""]

name: subscription_register
description: set to false, if you don't want to register your system online, if you set this to false you have to give local repositories
default: True
----

.Videos (Zeitraffer)

Folgende Videos zeigen eine Installation. +
Sie sind mit einem Frame pro Sekunde aufgenommen und dadurch schneller anzusehen als die Installation eigentlich dauert.

* http://download.uib.de/opsi4.0/experimental/opsi-v406/products/opsi-linux/videos/centos70_406_1fps.mp4

* http://download.uib.de/opsi4.0/experimental/opsi-v406/products/opsi-linux/videos/redhat70_406_1fps.mp4


[[opsi-manual-linux-netboot-405]]
==== Linux Netboot Produkte v405 ohne Distributionseigenen Installer

*Basis-Installation des OS per Netboot*

Für die Installation eines Linux Basissystems wird zunächst per Netboot das Standard opsi-linux-bootimage gebootet (welches auch für die Windows-Installationen zum Einsatz kommt). +
Von diesem Bootimage aus wird die Ziel-Festplatte partitioniert (/ und swap) und formatiert. Nun folgt die Installation des Grundsystems (mit Netzwerkkonfiguration und ssh aber ohne X11). Die Abläufe dieser Grundinstallation unterscheiden sich naturgemäß zwischen den unterschiedlichen Distributionen erheblich. Gemeinsam ist, dass die Installation direkt aus den Originalpaketen der Distribution erfolgt.

Auf diese Basisinstallation können optional die opsi-Pakete installiert werden, um aus dem System einen opsi-Server (z.B. neuen Depotserver) zu machen. +
Ebenfalls optional kann nun der opsi-client-agent für Linux installiert werden. Dieser ist dann für die Installation und Konfiguration weiterer Software zuständig.

Die opsi-Netboot-Produkte zur Linuxinstallation sind bereits als Open Source freigegeben.

Bedingt dadurch, dass die Basisinstallation aus dem Standard opsi-linux-bootimage erfolgt, gibt es distributionsabhängig unterschiedlich bestimmte Dinge, welche sich erst in der Umgebung nach dem ersten Boot des Systems konfigurieren bzw. installieren lassen. Beispiele hierfür sind die se-linux Installation bei den 'RedHat artigen' bzw. die Konfiguration der Tastatur bei den 'Debian artigen'. Hierfür gibt es ein Standard Localbootprodukt `l-os-postinst` welches diese Aufgaben übernimmt.

[[opsi-manual-linux-netboot-generalproperties-405]]
===== Allgemeine Properties der v405 Linux Netboot Produkte

Die folgenden Properties finden Sie zur Steuerung der Linuxinstallation in allen Netbootprodukten:

* `askbeforeinst`: +
Soll das Starten der Installation am Client bestätigt werden müssen?  (Default='true')

* `architecture`: +
Mit welcher Architektur soll das Zielsystem installiert werden? +
Beeinflusst die Auswahl des bootimages und die Installationsarchitektur.  (Default='64bit')

* `system_partition_size`: +
Größe der Systempartition. Die Größe kann in Prozent der Festplattengröße oder als absoluter Wert (G=Gigabyte) angegeben werden. Wenn Sie einen kleineren Wert als 100% angeben, wird der verbleibende Rest als Datenpartition verwendet (wenn das Property data_partion_create = true).  (Default='100%')

* `swap_partition_size`: +
Größe der Swappartition.  (Default='2000M')

* `data_partition_create`: +
Verwende freien Plattenplatz zur Erstellung einer Datenpartition. (true/false).  (Default='true')

* `data_partition_preserve`: +
Soll eine existierende Datenpartition erhalten werden ? +
*always* = Installation abbrechen wenn der Erhalt einer gefundenen Partition mit dem Label 'data' mit den angegebenen Partitionierungsdaten nicht möglich ist. +
*if_possible* = Wird eine Partition mit dem Label 'data' gefunden und der Erhalt dieser Partition ist gemäß der angegebenen Partionierungsdaten nicht möglich so wird die Partition gelöscht. +
*never* = Die gesamte Partitionstabelle wird immer neu geschrieben.  (Default='never')

* `language`: +
Welche Sprache / locale soll installiert werden.  (Default='de')

* `console_keymap`: +
Zu installierendes Tastaturlayout.  (Default=Distributionsabhängig / 'de')

* `timezone`: +
Welche Zeitzone soll verwendet werden?. (Default='Europe/Berlin')

* `root_password`: +
Passwort für root.  (Default='linux123')

* `user_password`: +
Passwort für user.  (Default='linux123')

* `install_opsi_server`: +
Installiere die opsi-server Pakete. (Default='false')

* `online_repository`: +
Repository der Distribution für die Installation. (Nicht bei SLES) (Default=Distributionsabhängig)

* `opsi_online_repository`: +
Repository der opsi-server Pakete. (Default=Distributionsabhängig)

* `proxy`: +
Proxystring (wenn benötigt) in der Form: `http://<ip>:<port>`. (Default=pass:[''])

* `additional_packages`: +
Welche zusätzlichen Pakete sollen installiert werden? Angabe der Pakete Leerzeichen separiert. (Default=pass:[''])

* `wget_and_execute`: +
Url (http) einer Datei welche am Ende der Installation geholt und ausgeführt wird. (Default=pass:[''])

* `install_opsi-client-agent`: +
Installiere den Linux opsi-client-agent (Kofinanzierungsprojekt: Sie benötigen eine Aktivierung durch die /etc/opsi/modules) . (Default='false')

* `release`: +
(nur Debian und Ubuntu) +
Welches Release der Distribution soll installiert werden. (Default=Distributionsabhängig)

* `setup_after_install`: +
Welche opsi Produkte sollen zum Abschluss der Betriebssysteminstallation auf setup gestellt werden. (Default='l-os-postinst')

[[opsi-manual-linux-netboot-special]]
===== Die einzelnen Netboot Produkte

[[opsi-manual-linux-netboot-special-ubuntu]]
====== Ubuntu

Die Basis Installation erfolgt per debootstrap direkt aus dem Netz.

Das Produkt hat produktiven Status.

Das Produkt ist UEFI/GPT kompatibel (getestet für release=trusty).

Es gibt für diese Produkt passende opsi-server Pakete welche über 'install_opsi_server=true' installiert werden können.

[[opsi-manual-linux-netboot-special-debian]]
====== Debian

Die Basis Installation erfolgt per debootstrap direkt aus dem Netz.

Das Produkt hat produktiven Status.

Das Produkt ist UEFI/GPT kompatibel (getestet für release=wheezy).

Es gibt für diese Produkt passende opsi-server Pakete welche über 'install_opsi_server=true' installiert werden können.

[[opsi-manual-linux-netboot-special-opensuse]]
====== OpenSuse

Die Basis Installation erfolgt unter Verwendung von dem Produkt beiliegenden RPM Dateien.
Von daher gibt es für jedes Release ein eigenes Produkt.

.OpenSuse 13.1

Das Produkt hat produktiven Status.

Das Produkt ist *nicht* UEFI kompatibel .

Es gibt für diese Produkt passende opsi-server Pakete welche über 'install_opsi_server=true' installiert werden können.

Known Bugs: Bei bestimmter Hardware (z.B. VMWare ESXi) scheiter die korrekte Vorhersage des Netzwerkinterface Namens und das Netzwerkinterface bleibt unkonfigiriert.

[[opsi-manual-linux-netboot-special-sles11]]
====== sles11sp3

Die Basis Installation erfolgt unter Verwendung von dem Produkt beiliegenden RPM Dateien.
Von daher gibt es für jedes Release ein eigenes Produkt.

Da das Produkt RPM's enthält welche nicht Opensource sind, können wir es leider nicht frei zum Download anbieten. Wir können es aber unseren Kunden kostenlos zur Verfügung stellen ( -> mail an info@uib.de).

Das Produkt hat produktiven Status.

Beachten Sie, das es für neue Releases evtl. noch keine opsi-server Pakete gibt und damit die Propertyeinstellung 'install_opsi_server=true' zu Fehlern führen kann.

Das Produkt ist *nicht* UEFI kompatibel.

Das Produkt kennt folgende zusätzlichen Properties:

* `use_gpt` +
Wenn `true` wird die Festplatte (auch im MBR-BIOS Mode) mit GPT partitioniert. Hierfür wird dann auch eine Bootpartition benötigt. Wenn das  Property `boot_partition_size` auf 0 steht wird automatisert trotzdem eine Bootpartition mit der Größe 1 GB erzeugt.

* `boot_partition_size` +
Größe der Bootpartition. Wenn 0 wird keine Bootpartition erzeugt.

* `kernel_modules` +
Leerzeichen getrennte Liste der zusätzlich zu ladenden Kernelmodule (z.B. für spezielle Festplatten Controller).

* `suse_register` +
Wenn `true` wird der Server online registriert. Hierzu wird die email Adresse und der Key der Registrierung in der Form `email:productkey` benötigt. Dieser wird abhängig von dem Hostparameter `license-management.use` aus dem Lizenzmanagement oder aus dem Property `productkey` geholt. +
Wenn `false` muss im Property `local_repositories` mindestens ein geeigneter Repositoryserver angegeben werden.

* `productkey` +
email Adresse und der Key der Registrierung in der Form `email:productkey` (falls nicht das Lizenzmanagement verwendet wird).

* `local_repositories` +
Leerzeichen getrennte Liste von Repositories welche per zypper eingebunden werden in der Form: "http://myserver.local Description"

Das Property `online_repository` entfällt.

[[opsi-manual-linux-clientagent]]
==== opsi-linux-client-agent

Der opsi-client-agent für Linux ist Bestandteil des Kofinanzierungsprojektes 'Linux Agent' und derzeit kostenpflichtig.

CAUTION: Ein Rechner kann *nicht* gleichzeitig am selben opsi-config-server Client *und* Server (z.B. depot-server / config-server) sein. +
Dies ist ein Problem mit der derzeitigen Datenstruktur in opsi und wird zu einem späteren Zeitpunkt gelöst. +
Ein config-server kann sich also auch nicht selbst als Client haben. Es ist aber durchaus möglich einen Linuxclient als opsi-server zu installieren der dann selber als config-server agiert oder als depot-server für einen anderen config-server. Wenn sie auf diese Weise einen opsi-server aufgesetzt haben und wollen diesen als Depotserver an dem config-server registrieren an dem diese Maschine auch Client ist, müssen Sie den Rechner als Client vorher löschen.

Der opsi-client-agent für Windows besteht im Kern aus zwei Komponenten:

. dem Service `opsiclientd`

. dem Hilfsprogramm `opsiscriptstarter`

. dem Actionprocessor `opsi-winst / opsi-script`

Der opsi-client-agent für Linux basiert auf einer Portierung des Windows Clientagenten nach Linux.

Der `opsiclientd` ist derzeit nicht für alle unterstützten Distributionen verfügbar und ist deshalb für alle anderen Distributionen zunächst durch das Programm `opsiscriptstarter` ersetzt

Der `opsiclientd` steht auf folgenden Distributionen / Releases zur Verfügung:

* Debian 7 / 8
* Ubuntu 12.04 / 14.04
* openSuse 13.2
* SLES 12

Steht kein opsiclientd zur Verfügung, wird der `opsiscriptstarter` so installiert, das er die Aufgaben des `opsiclientd` beim Systemstart übernimmt:

* Kontakt mit dem opsi-Server: Prüfen ob Aktionen gesetzt sind
* Mounten des Depot Shares
* Starten des Actionprocessors
* Unmount des Depot Shares
* Senden der Logdatei an den Server

Der Actionprocessor heißt unter Linux opsi-script und ist aus den selben Quellen gebaut wie der opsi-winst unter Windows. Damit steht unter Linux die gleiche Scriptsyntax zur Verfügung wie unter Windows. Weiterhin sind alle nicht plattformspezifischen Funktionen umgesetzt wie z.B:

* File handling
* String und Stringlisten Funktionen
* Ausführen von externen Scripten und Programmen
* Kommunikation mit dem opsi-Server
* Patchen von Konfigurationsdateien

Natürlich gibt es unter Linux keine Funktionen zum Patchen der Registry, dafür aber neue linuxspezifische Funktionen wie z.B.:

* getLinuxDistroType
* getLinuxVersionMap

Das Logging des opsi-script ist analog zur dem des opsi-winst unter Windows.

Anders als bei Windows gibt es den opsi-script neben einer grafischen Version für die Arbeit unter X-Windows zusätzlich in einer noGUI Version für Systeme ohne grafische Oberfläche.


[[opsi-manual-linux-clientagent-installation-servicesetup]]
===== opsi-linux-client-agent: Installation: service_setup.sh

Diese Methode dient zur Installation auf einzelnen Rechnern. Für ein Massen Rollout siehe weiter unten.

. Loggen Sie sich mit `root` Rechten auf dem Client ein.
. Mounten Sie den share `//<opsiserver>/opsi_depot` an eine beliebige Stelle.
. Starten Sie das Script `opsi-linux-client-agent/service_setup.sh`

Das Skript nimmt per opsi-Webservice Kontakt zum Server auf um serverseitig den Client zu erzeugen und den pckey zu erfahren. Dies erfolgt zunächst mit der in der config.ini eingetragenen user/password Kombination. Schlägt dies fehl, so erscheint eine Art Login-Fenster mit Service-URL user und password. Dort kann die Operation mit dem Accountdaten eines Mitglieds der Gruppe {opsiadmin} autorisiert werden.

CAUTION: Der Client rebootet nach der Installation.


[[opsi-manual-linux-clientagent-installation-opsideploy]]
===== opsi-linux-client-agent: Installation: opsi-deploy-client-agent

Das `opsi-deploy-client-agent` Skript verteilt den opsi-client-agent direkt vom {opsi-server} auf die Clients. Voraussetzung hierfür sind bei den Clients:

* ssh Zugang als root oder als user der sudo ohne Passwort ausführen darf

Das Skript erzeugt serverseitig den Client, kopiert die Installations-Dateien und Konfigurationsinformationen, wie bspw. den pckey, auf den Client und startet dort die Installation.


Mit dem `opsi-deploy-client-agent` Skript kann auch eine ganze Liste von Clients bearbeitet werden.
Dazu können entweder beliebig viele Clients als letzter Parameter übergeben werden oder mit der Option '-f' die Clients aus einer Datei eingelesen werden.
Bei der Verwendung einer Datei, muss in jeder Zeile ein Client stehen.

Das Script kann mit IP-Adressen, Hostnamen und FQDNs arbeiten. Es wird versuchen automatisch zu erkennen welche Art von Adresse übergeben wurde.

Mit dem `opsi-deploy-client-agent` Skript kann auch eine ganze List von Clients bearbeitet werden. Das Skript findet sich unter '/var/lib/opsi/depot/opsi-linux-client-agent' +
Führen Sie das Script mit 'root' Rechten aus.


[source,prompt]
----
bonifax:/var/lib/opsi/depot/opsi-linux-client-agent# ./opsi-deploy-client-agent  --help
usage: opsi-deploy-client-agent [-h] [--version] [--verbose]
                                [--debug-file DEBUGFILE] [--username USERNAME]
                                [--password PASSWORD]
                                [--use-fqdn | --use-hostname | --use-ip-address]
                                [--ignore-failed-ping]
                                [--reboot | --shutdown | --start-opsiclientd]
                                [--hosts-from-file HOSTFILE]
                                [--skip-existing-clients]
                                [--threads MAXTHREADS]
                                [--keep-client-on-failure | --remove-client-on-failure]
                                [host [host ...]]

Deploy opsi client agent to the specified clients. The clients must be
accessible via SSH. The user must be allowed to use sudo non-interactive.

positional arguments:
  host                  The hosts to deploy the opsi-client-agent to.

optional arguments:
  -h, --help            show this help message and exit
  --version, -V         show program's version number and exit
  --verbose, -v         increase verbosity (can be used multiple times)
  --debug-file DEBUGFILE
                        Write debug output to given file.
  --username USERNAME, -u USERNAME
                        username for authentication (default: root). Example
                        for a domain account: -u "<DOMAIN>\\<username>"
  --password PASSWORD, -p PASSWORD
                        password for authentication
  --use-fqdn, -c        Use FQDN to connect to client.
  --use-hostname        Use hostname to connect to client.
  --use-ip-address      Use IP address to connect to client.
  --ignore-failed-ping, -x
                        try installation even if ping fails
  --reboot, -r          reboot computer after installation
  --shutdown, -s        shutdown computer after installation
  --start-opsiclientd, -o
                        start opsiclientd service after installation
  --hosts-from-file HOSTFILE, -f HOSTFILE
                        File containing list of clients (one hostname per
                        line). If there is a space followed by text after the
                        hostname this will be used as client description for
                        new clients.
  --skip-existing-clients, -S
                        skip known opsi clients
  --threads MAXTHREADS, -t MAXTHREADS
                        number of concurrent deployment threads
  --keep-client-on-failure
                        If the client was created in opsi through this script
                        it will not be removed in case of failure. (DEFAULT)
  --remove-client-on-failure
                        If the client was created in opsi through this script
                        it will be removed in case of failure.
----

[[opsi-manual-linux-clientagent-installation-netboot]]
===== opsi-linux-client-agent: Installation: Durch die opsi netbootprodukte

Wenn Sie ein Linux über die opsi Netboot produkte installieren, wird der opsi-linux-client-agent automatisch mit installiert, wenn das Property `install_opsi-client-agent` auf 'true' steht.

[[opsi-manual-linux-clientagent-opsiclientd-configuration]]
===== opsi-linux-client-agent: opsiclientd Konfiguration

Der Linux `opsiclientd` ist eine Portierung des opsiclientd unter Windows und arbeitet mit einer analogen Konfigurations Datei: `/etc/opsi-client-agent/opsiclientd.conf`.

Eine ausführliche Beschreibung dieser Konfiguration findet sich im Kapitel zum opsi-client-agent: <<opsi-manual-clientagent-configuration>>

Dabei sind nicht alle Features und Events auch unter Linux verfügbar. +
Verfügbar sind:

* Start beim Systemstart (bzw. start des `opsiclientd`) unter Linux ist der Name des Events `opsiclientd_start` (und nicht `gui_startup`)

* `event_on_demand`
* Das `event_timer` aber nur mit der Einstellung: `super = default`


Nicht verfügbar sind (derzeit):

* Alles was mit dem lokalen Cache ('WAN-Erweiterung') zu tun hat.
* Die Modifikation der Events durch Preconditions
* Der opsiclientd Notifier
* Das `event_net_connection`
* Das `event_on_shutdown`
* Das `event_silent_install`

[[opsi-manual-linux-clientagent-places]]
===== opsi-linux-client-agent: Pfade

Wie 'sich das gehört' verteilt sich der linux-opsi-client-agent weitläufig:

Die Binaries:

`/usr/bin/opsi-script` (X11)

`/usr/bin/opsi-script-nogui` (ohne X11)

`/usr/bin/opsiscriptstarter` (Hilfsprogramm bzw. opsiclientd Ersatz)

`/usr/bin/opsiclientd`

Die Hilfsdateien für den opsi-script finden sich in:

`/usr/share/opsi-client-agent/opsi-script/skin`

`/usr/share/locale/`<LANG>`/LC_MESSAGES/opsi-script.po`

Die Konfigurationen:

`/etc/opsi-client-agent/opsiclientd.conf` (Konfiguration des opsiscriptstarter / opsiclientd)

`/etc/opsi-client-agent/opsi-script.conf` (in Vorbereitung)

Die Logs / Temps:

`/var/log/opsi-client-agent`

`/var/log/opsi-client-agent/opsiclientd`

`/var/log/opsi-client-agent/opsi-script`

[[opsi-manual-linux-clientagent-knownbugs]]
===== opsi-linux-client-agent: Known Bugs

Das kopieren von vielen Dateien von einem smb-share ist abhängig von der Samba Version fehlerhaft. Es werden nicht alle Dateien kopiert.

Workaround:
Statt:
[source,winst]
----
[Files_copy_netboot]
copy -s "%scriptPath%/installfiles/*" "$target$/installfiles/"
----
verwenden:
[source,winst]
----
[ShellInAnIcon_opsi_copy_netboot]
set -x
export PATH=/usr/local/bin:/usr/bin:/bin:/usr/local/sbin:/usr/sbin:/sbin
cd "%scriptPath%"
tar cf - installfiles | ( cd "$target$/installfiles/" ; tar xf - )
----


[[opsi-manual-linux-scriptexample]]
==== Beispiel Scriptteile

Unter Windows gilt für die Softwareverteilung: Die Installation von Software ist genauso wichtig wie die anschließende Konfiguration der Software. +
Unter Linux stehen die meisten Pakete über die Repositories der Distribution zur Verfügung. Dadurch wird der Installationsanteil kleiner, der Konfigurationsanteil aber bleibt. Weiterhin gibt es auch Applikationen, welche nicht über die Standardrepositories verfügbar sind. Hier müssen
unter Umständen zunächst weitere Repositories dem System hinzugefügt werden bzw. Installationsquellen dem Paket zugefügt werden. Wichtig ist, dass alle Installations- und Konfigurationsarbeiten zentral vom opsi-Server
gesteuert und dort auch geloggt werden.

Im folgenden Beispiele für folgende Aufgaben in einem beispielhaften Script für den opsi-linux-client-agent:

* Beenden wenn es nicht unter Linux läuft
* Feststellen des Distributionstyps zur Entscheidung zwischen `apt-get`, `zypper` und `yum`
* Feststellen der genauen Linux Version
* Installation eines Paketes
* Hinzufügen eines Repositories

Beispiel: Beenden wenn es nicht unter Linux läuft:

[source,winst]
----
[Actions]
requiredWinstVersion >= "4.11.4.1"
ScriptErrorMessages=off

DefVar $OS$

set $OS$ = GetOS

if not($OS$ = "Linux")
	LogError "Wrong OS: Product: " + $ProductId$ + "is only for Linux"
	isFatalError "Wrong OS"
endif
----

Beispiel: Feststellen des Distributionstyps:

[source,winst]
----
[Actions]
requiredWinstVersion >= "4.11.4.1"
ScriptErrorMessages=off

DefVar $distrotype$

set $distrotype$ = getLinuxDistroType

if $distrotype$ = 'debian'
	ShellInAnIcon_Upgrade_deb
else
	LogError "Wrong Distro: This Product is for Debian/Ubuntu only"
	isFatalError "Wrong distro"
endif

if not("0" = getLastExitCode)
	Message "failed ShellInAnIcon_Upgrade"
	LogError "failed ShellInAnIcon_Upgrade"
	isFatalError "failed Upgrade"
endif


[ShellInAnIcon_Upgrade_deb]
set -x
export DEBIAN_FRONTEND=noninteractive
apt-get --yes install aptitude
apt-get update
apt-get --yes dist-upgrade
exit $?
----


Beispiel: Feststellen der genauen Linux Version und Installation eines Paketes:

[source,winst]
----
[Actions]
requiredWinstVersion >= "4.11.4.1"
ScriptErrorMessages=off

DefVar $distCodeName$
DefVar $distroName$
DefVar $distRelease$
DefVar $desktop$

DefStringList $linuxInfo$

set $linuxInfo$ = getLinuxVersionMap
set $distCodeName$ = getValue("Codename", $linuxInfo$)
set $distRelease$ = getValue("Release", $linuxInfo$)
set $distroName$  = getValue("Distributor ID", $linuxInfo$)

set $desktop$ = GetProductProperty("desktop", "kde")


if $distrotype$ = 'suse'
	if $desktop$ = "unity"
		Message " No Unity on SUSE - fallback to KDE ..."
		set $desktop$ = "kde"
	endif ; unity


	if $desktop$ = "kde"
		if ($distroName$ = 'openSUSE project')
			ShellInAnIcon_kde_suse
		endif
		if ("SUSE LINUX" = $distroName$) and ($distRelease$ = "11")
			ShellInAnIcon_kde_sles11
		endif
		if not("0" = getLastExitCode)
			LogError "failed ShellInAnIcon"
			Message "failed kde"
			isFatalError "failed kde"
		endif
	endif ; kde
endif; suse type

[ShellInAnIcon_kde_suse]
set -x
zypper --no-gpg-checks --non-interactive install patterns-openSUSE-kde4 patterns-openSUSE-kde4_basis
zypper --no-gpg-checks --non-interactive install splashy-branding-openSUSE
exit $?

[ShellInAnIcon_kde_sles11]
set -x
zypper --no-gpg-checks --non-interactive install --auto-agree-with-licenses -t pattern kde
exit $?
----


Beispiel: Hinzufügen eines Repositories:
[source,winst]
----
[Actions]
requiredWinstVersion >= "4.11.4.1"
ScriptErrorMessages=off

DefVar $distCodeName$
DefVar $distroName$
DefVar $distRelease$
DefVar $desktop$

DefStringList $linuxInfo$

set $linuxInfo$ = getLinuxVersionMap
set $distCodeName$ = getValue("Codename", $linuxInfo$)
set $distRelease$ = getValue("Release", $linuxInfo$)
set $distroName$  = getValue("Distributor ID", $linuxInfo$)

set $desktop$ = GetProductProperty("desktop", "kde")


if $distroName$ = 'Ubuntu'

	if $desktop$ = "cinnamon"
		set $desktopPackage$ = $desktop$
		ShellInAnIcon_ubuntu_cinnamon
		if not("0" = getLastExitCode)
			Message "failed ShellInAnIcon_ubuntu_cinnamon"
			LogError "failed ShellInAnIcon_ubuntu_cinnamon"
			isFatalError "failed cinnamon"
		endif
	endif ; cinnamon
endif; ubuntu

[ShellInAnIcon_ubuntu_cinnamon]
set -x
export DEBIAN_FRONTEND=noninteractive
# we need to get the add-apt-repository command
apt-get --yes --force-yes install python-software-properties
# the cinnamon repository
add-apt-repository ppa:gwendal-lebihan-dev/cinnamon-stable
apt-get update
apt-get --yes install ubuntu-desktop
exit $?
----

[[opsi-manual-linux-localboot]]
==== Linux Localboot Produkte

Hier einige Lokalbootprodukte welche zum Standardumfang des opsi Linuxsupports gehören.

[[opsi-manual-linux-localboot-l-os-postinst]]
===== l-os-postinst für v405 Netboot installationen

Dieses Produkt übernimmt jene Teile der Basisinstallation welche sich vom bootimage nicht korrekt ausführen lassen.

Dies ist für die unterschiedlichen Distributionen:

* Fedora / CentOS:

** Installation von se-linux


Das Produkt hat eine Abhängigkeit zu dem Produkt 'l-system-update' welches vor dem Lauf von 'l-os-postinst' aufgerufen wird. +
Das Produkt hat eine hohe Priorität, d.h. es wird vor 'normalen' Produkten ausgeführt.

[[opsi-manual-linux-localboot-l-desktop]]
===== l-desktop

Das Produkt l-desktop installiert ein Desktop Paket auf dem Rechner.

Über das Property `desktop` kann der zu installierende Desktop ausgewählt werden. Dabei ist zu beachten, das nicht alle Desktops auf allen Distributionen verfügbar sind. So gibt es z.B. 'Unity' nur unter Ubuntu. Wird ein nicht verfügbarer Desktop gewählt so wird ein Distributionsspezifischer Defaultdesktop installiert. Weiterhin haben die Desktop Pakete einen unterschiedlichen Umfang welcher abhängig von Distribution und Desktop sich auf die eigentliche Desktop Software beschränken kann oder auch Basisprodukte wie libreoffice, firefox, PDF-Reader usw. enthalten kann.

Das Property `desktop` hat folgende Werte:

* Gnome +
Default für Debian, Fedora, CentOS, RHEL +
Verfügbar auf allen Distributionen.

* KDE +
Default für SLES, OpenSuse
Verfügbar auf allen Distributionen.

* Unity +
verfügbar nur für Ubuntu

* Cinnamon +
verfügbar nur für Ubuntu

* xfce4 +
Verfügbar auf Ubuntu, Debian, Fedora.

* lxde +
Verfügbar auf Ubuntu, Debian.


[[opsi-manual-linux-localboot-l-system-update]]
===== l-system-update
Dieses Produkt aktualisiert das System.

[[opsi-manual-linux-localboot-l-swaudit]]
===== l-swaudit
Softwareinventarisierung auf Basis des Paketmanagers

[[opsi-manual-linux-localboot-l-hwaudit]]
===== l-hwaudit

Hardwareinventarisierung. +
Die Hardwareinventarisierung basiert zur Zeit auf der in Python implementierten Methode wie sie auch vom bootimage verwendet wird. Dazu muß das Paket `python-opsi` aus dem opsi-Repository der Distribution installiert werden. Ist für die Distribution kein opsi-Repository verfügbar, so scheitert auch die Hardwareinventarisierung.

[[opsi-manual-linux-localboot-l-jedit]]
===== l-jedit

Java basierter Editor mit Syntaxhighlighting für opsi-script. Ist noch kein Java installiert, so wird dies automatisch durchgeführt.


[[opsi-manual-linux-inventory]]
==== Inventarisierung

Zur Inventarisierung werden die Daten durch den Clientagenten erhoben und an den Server gesendet. Die Hardwareinventarisierung basiert auf den schon im Bootimage implementierten Methoden.

Die Softwareinventarisierung basiert auf den Daten des Paketmanagements der verwendeten Distribution.

[[opsi-manual-linux-uefi]]
==== UEFI / GPT Unterstützung

Einige der opsi v4.0.5 Linuxprodukte sind UEFI/GPT kompatibel. Details siehe hierzu in der obigen Auflistung der Netbootprodukte.

Die opsi v4.0.6 Linuxprodukte sind leider noch nicht UEFI/GPT kompatibel.
Die Informationen über die UEFI Umgebung gehen im Moment noch bei dem kexec Boot verloren. Wir hoffen, das wir dieses Problem mit einem neueren bootimage irgendwann beheben können.

[[opsi-manual-linux-roadmap]]
==== Roadmap

Die Linux Unterstützung von opsi ist neu. Das bedeutet auch, dass wir im ersten Release noch nicht alle Features verwirklicht haben. +
Weitere Features werden folgen wie:

* Frei konfigurierbare Partitionierung
* Logical Volume Management
* Patchen von XML- und JSON-Dateien
* Patchen von hierarchischen Konfigurationsdateien wie dhcpd.conf


[[opsi-manual-linux-debproxy]]
==== Proxy für deb Pakete einrichten und verwenden

Eine brauchbare Anleitung zur Erstellung eines eigenen Ubuntu Proxy finden Sie hier:

http://wiki.ubuntuusers.de/Lokale_Paketquellen/Apt-Cacher-ng

http://www.gambaru.de/blog/2011/10/26/apt-cacher-ng-ein-proxy-server-fur-debian-und-ubuntu/

