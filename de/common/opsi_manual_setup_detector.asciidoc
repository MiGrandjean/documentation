////
; Copyright (c) uib gmbh (www.uib.de)
; This documentation is owned by uib
; Until we found a better license:
; All rights reserved.
; credits: http://www.opsi.org/credits/
////

:Author:    uib gmbh
:Email:     info@uib.de
:Date:      25.09.2013
:Revision:  1.0
:toclevels: 6


include::../common/opsi_terms.asciidoc[]

[[opsi-setup-detector]]
== opsi Setup Detector

[[opsi-setup-detector-introduction]]
=== Einführung

Der opsi Setup Detector ist ein opsi Werkzeug zur integrierten Unterstützung der Software-Paketierung. Von seiner grafischen Benutzeroberfläche können alle Schritte von der Auswahl der Setup-Datei über das Erstellen der Installationsverzeichnisse auf der opsi Workbench bis zur Paketierung und Installation auf dem opsi Server durchgeführt werden. Hierzu arbeitet der Setup Detector mit dem opsi Package Builder zusammen. 
Der opsi Setup Detector erkennt beim Öffnen einer Setup-Datei, ob es sich um einen bekanneten Installer-Typ handelt und ermittelt automatisch die verfügbaren Informationen aus der Setup-Datei. 
Mit der Zeit wird durch weitere Erfahrungen mit verschiedenen Installer-Typen und Rückmeldungen der Benutzer die Fähigkeit der automatischen Detektierung sicher noch weiter wachsen.

[[opsi-setup-detector-prerequires]]
=== Vorbedingungen für die Benutzung des opsi Setup Detectors

Der opsi Setup Detector läuft auf Windows-Systemen ab Windows XP und benötigt, falls die Pakete auch gepackt und installiert werden sollen, das Community Projekt opsi Package Builder, welches auf dem gleichen Windows-Rechner zu installieren ist. 
Weitere Informationen zum opsi Package Builder finden Sie im opsi Forum bei den opsi Community Projekten:
https://forum.opsi.org/viewforum.php?f=22

Für die Erzeugung der Pakete ist ein Samba-Share mit Schreibberechtigung auf die opsi Workbench notwendig.
Ausserdem ist zu beachten, dass manche Software-Pakete (z.B. manche Software für 64bit Windows7) eine entsprechenden Window-System voraussetzen. Das heißt, ein Setup für eine 64bit Windows7 Software kann eventuell nicht auf einem 32bit WindowsXP paketiert werden. Das hängt im Einzelfall von dem jeweiligen Setup und verwendeten Installer-Typ ab. 

Hier nochmal die Voraussetzungen als Liste:

* Windows-Rechner ab Windows XP
* opsi Setup Detector installieren (Liste der Dateien siehe unten)
* opsi package Builder installieren
* Samba-Share mit Schreibrechten zur opsi Workbench eintragen

[[opsi-setup-detector-activate]]
=== Inbetriebnahme des opsi Setup Detectors

Der opsi Setup Detector ist ein mit Lazarus entwickeltes fertig compiliertes Windows-Programm und kann direkt verwendet werden. Lediglich der Samba-Share auf die opsi Workbench ist als Basisverzeichnis einzutragen und schon kann mit 'Datei öffnen' eine Setup-Datei geöffnet werden, die dann automatisch analysiert wird.

[[opsi-setup-detector-activate-languages]]
==== Sprachunterstützung

Beim Start des Programmes wird ermittelt, unter welcher Sprache das Windows System läuft. Von Haus aus unterstützt der opsi Setup Detector Deutsch und Englisch. Weitere Sprachen können recht einfach über eine entsprechend übersetzte Sprachdatei unterstützt werden. 

[[opsi-setup-detector-activate-files]]
==== Dateien des opsi Setup Detectors

Folgende Dateien sind im opsi Setup Detector Paket enthalten und werden zur Ausführung benötigt:

* opsisetupdetector.exe - der opsi Setup Detector
* extractMSI.cmd - Hilfsdatei zur automatischen Analyse von MSI-Dateien
* MSIInfo.js - Hilfsdatei zur automatischen Analyse von MSI-Dateien
* innounp.exe - Hilfsdatei zur automatischen Analyse von Inno Setup Paketen
* innounp.htm - Hilfsdatei zur automatischen Analyse von Inno Setup Paketen

* languages\ - Verzeichnis für die sprachspezifischen Komponenten
* languages\opsisetupdetector.po - default Sprachdatei (Englisch)
* languages\opsisetupdetector.de.po - Deutsche Sprachdatei
* languages\Help.en.html - Englische Hilfe
* languages\Help.de.html - Deutsche Hilfe

Zum Erzeugen der opsi Pakete werden entsprechend dem Installer Typ verschiedene Vorlagen-Dateien benötigt. Diese werden dann beim Erzeugen eines neuen Paketes in die opsi Workbench kopiert und entsprechend den Einträgen im jeweiligen Formular gepatcht: 

* files-msi2opsi\
* files-msi2opsi\CLIENT_DATA\check_msi_exitcode.opsiscript
* files-msi2opsi\CLIENT_DATA\delsub32.opsiscript
* files-msi2opsi\CLIENT_DATA\delsub64.opsiscript
* files-msi2opsi\CLIENT_DATA\setup32.opsiscript
* files-msi2opsi\CLIENT_DATA\setup64.opsiscript
* files-msi2opsi\CLIENT_DATA\uninstall32.opsiscript
* files-msi2opsi\CLIENT_DATA\uninstall64.opsiscript
* files-msi2opsi\OPSI\control
* files-msi2opsi\OPSI\postinst
* files-msi2opsi\OPSI\preinst

* files-advancedmsi2opsi\
* files-advancedmsi2opsi\CLIENT_DATA\check_advanced_exitcode.opsiscript
* files-advancedmsi2opsi\CLIENT_DATA\delsub.opsiscript
* files-advancedmsi2opsi\CLIENT_DATA\setup.opsiscript
* files-advancedmsi2opsi\CLIENT_DATA\uninstall.opsiscript
* files-advancedmsi2opsi\OPSI\control
* files-advancedmsi2opsi\OPSI\postinst
* files-advancedmsi2opsi\OPSI\preinst

* files-inno2opsi\
* files-inno2opsi\CLIENT_DATA\check_inno_exitcode.opsiscript
* files-inno2opsi\CLIENT_DATA\delsub.opsiscript
* files-inno2opsi\CLIENT_DATA\setup.opsiscript
* files-inno2opsi\CLIENT_DATA\uninstall.opsiscript
* files-inno2opsi\OPSI\control
* files-inno2opsi\OPSI\postinst
* files-inno2opsi\OPSI\preinst

* files-installshield2opsi\
* files-installshield2opsi\CLIENT_DATA\check_installshield_exitcode.opsiscript
* files-installshield2opsi\CLIENT_DATA\delsub.opsiscript
* files-installshield2opsi\CLIENT_DATA\setup.opsiscript
* files-installshield2opsi\CLIENT_DATA\uninstall.opsiscript
* files-installshield2opsi\OPSI\control
* files-installshield2opsi\OPSI\postinst
* files-installshield2opsi\OPSI\preinst

* files-installshieldmsi2opsi\
* files-installshieldmsi2opsi\CLIENT_DATA\check_installshieldmsi_exitcode.opsiscript
* files-installshieldmsi2opsi\CLIENT_DATA\delsub.opsiscript
* files-installshieldmsi2opsi\CLIENT_DATA\setup.opsiscript
* files-installshieldmsi2opsi\CLIENT_DATA\uninstall.opsiscript
* files-installshieldmsi2opsi\OPSI\control
* files-installshieldmsi2opsi\OPSI\postinst
* files-installshieldmsi2opsi\OPSI\preinst

* files-nsis2opsi\
* files-nsis2opsi\CLIENT_DATA\check_inno_exitcode.opsiscript
* files-nsis2opsi\CLIENT_DATA\delsub.opsiscript
* files-nsis2opsi\CLIENT_DATA\setup.opsiscript
* files-nsis2opsi\CLIENT_DATA\uninstall.opsiscript
* files-nsis2opsi\OPSI\control
* files-nsis2opsi\OPSI\postinst
* files-nsis2opsi\OPSI\preinst

[[opsi-setup-detector-analyze]]
=== Automatische Analyse eines Setup-Paketes

Nach dem Öffnen einer Setup-Datei mit 'Datei öffnen' wird diese automatisch analysiert und, falls es sich um einen bekannten Installer-Typ handelt, automatisch auf den entsprechenden Tab gewechselt.
Falls der Installer-Typ nicht erkannt wird, bleibt weiterhin das *Anaysiere* Tab stehen. Auch wenn der Installer-Typ erkannt wurde, kann jederzeit auf das *Analysiere* Tab zurück gewechselt werden um zu sehen, was bei der automatischen Analyse gefunden wurde.

Bei der Analyse einer MSI-Datei ist bereits durch die Endung MSI bekannt, dass es sich um ein MSI-Paket handelt. Einer EXE-Datei sieht man es aber nicht an der Endung an, mit welchem Installer-Typ sie erstellt wurde. Deshalb wird die EXE-Datei vom opsi Setup Detector automatisch nach bestimmten Stichworten durchsucht und die gefundenen Zeilen werden ausgegeben. Darin sind auch Strings enthalten, die das Setup-Programm in bestimmten Fällen, z.B. bei aufgetretenen Fehlern während der Installation ausgeben möchte. Dadurch können z.B. kryptische Zeilen und auf den ersten Blick alarmierende Zeilen erscheinen  wie:

----
o@dejDs@s@t@t@du@u@<v@w@w@lx@Hy@x@x{@X|@|@@@@L@x@@Inno Setup Setup Data
Das Setup hat einen schwerwiegenden Fehler erkannt und wird abgebrochen
----

Dies besagt aber nur, dass diese Zeichen innerhalb des Setups gefunden wurden und im *Analysiere* Tab angezeigt werden, da sie einem der verwendeten Suchmuster entsprechen. Diese Ausgaben können normalerweise ignoriert werden und sind nur von Interesse, falls kein bekannter oder ein falscher Setup-Typ detektiert wurde. In diesem Fall geben diese Angaben eventuell einen Hinweis, um welchen Installer-Typ es sich handeln könnte.
Alle Angaben auf dem *Analysiere* Tab, die eingeleitet werden von:

----
Analyzing: F:\<setup.exe>
xxxxxxxxxxxxxxxxxxxxxxxxx
default grep started:
----

und abgeschlossen werden mit:

----
default grep finished.
xxxxxxxxxxxxxxxxxxxxxxxxx
----

entstammen dieser automatischen Analyse und können im Normalfall unbeachtet bleiben.
Falls der Setup-Typ erkannt wurde, steht dieser unterhalb von "default grep finished". Dass ein bekannter Setup Typ erkannt wurde  merkt man auch daran, dass automatisch auf den entsprechenden Tab gewechselt wurde. 

Je nach dem gefundenen Installer-Typ sind im *Analysiere* Tab noch weitere Informationen zu finden zur weiteren Analyse des Setups. Diese werden in den Kapiteln der entsprechenden Installer-Typen behandelt.

Der Inhalt des *Analysiere* Tabs wird vor einer neuen Analyse gelöscht und enthält dementsprechend nur Informationen zu dem aktuellen Setup.

[[opsi-setup-detector-embeddedmsi]]
=== Setup-EXE mit eingebettetem MSI

Bevor auf die einzelnen Installer-Typen eingegangen wird, noch ein paar allgemeine Bemerkungen zu Setup-Dateien mit eingebettetem MSI:
derzeit werden Advanced Installer oder InstallShield basierte EXE-Dateien mit eingebettetem MSI erkannt. Das MSI Paket wird automatisch entpackt und die analysierten Eigenschaften im *Advanced+MSI* Tab bzw. *InstallShield+MSI* Tab sowie zusätzlich im *MSI* Tab angezeigt.
Eine EXE-Datei mit eingebettetem MSI kann auch mehrere unterschiedliche MSI-Pakete enthalten, z.B. für unterschiedliche Windows-Versionen oder 32bit/64bit. Das Setup entscheidet dann je nach den System Gegebenheiten, welches MSI-Paket ausgepackt und verwendet wird. In diesem Fall erhält man bei Analyse des Paketes mit dem opsi Setup Detector nur das für das aktuelle System, auf dem der opsi Setup Detector läuft, passende MSI-Paket. 
Solche EXE-Dateien haben oft eine Kommandozeilen-Hilfe, die weitere Auskunft über die enthaltenen Pakete und die Aufruf-Möglichkeiten gibt. Auch kann eine Setup-EXE eventuell je nach System oder sonstigen Eigenschaften verschiedene MST-Dateien verwenden. Kurz und gut, man weiss nie so genau, was ein Setup.EXE unter welchen Umständen genau macht. In vielen Fällen muss man das auch gar nicht so genau wissen, sondern braucht lediglich den MSI Code des eingebetteten MSI für das opsi Deinstallations-Script. Hierbei ist zu beachten, dass ein Paket für 32bit und 64bit oder andere Unterschiede eventuell unterschiedliche Software mit unterschiedlichen MSI Codes enthält. Das opsi Deinstallations-Script muss dann dafür sorgen, dass es alle diese MSI Codes kennt und bei der Deinstallation handhabt. Falls der opsi Setup Detector ein eingebettetes MSI findet, entpackt er dieses und zeigt die Inhalte zusätzlich im *MSI* Tab an. Es kann dann auch das *MSI* Tab als Basis für das opsi Paket genommen werden, aber im Normalfall möchte man wohl eher die EXE-Datei nehmen, da auf diese Weise schneller eine neue Version eingebunden werden kann und die EXE-Datei eventuell auch zusätzliche Dinge tut. 

Das MSI und andere Komponenten der EXE-Datei werden in das Verzeichnis +%TEMP%\opsitmp+ entpackt. Zuvor wird eventueller anderer Inhalt gelöscht, so dass im Verzeichnis +%TEMP%\opsitmp+ immer nur Dateien der aktuellen EXE zu finden sind.

[[opsi-setup-detector-type]]
=== Unterstützte Installer-Typen

Die einzelnen Installer-Typen sind sehr unterschiedlich bezüglich ihrer standardisierten Struktur und automatisierten Zugänglichkeit. Bei einem MSI-Paket oder einem auf Inno-Setup basierenden Setup kann eine Menge nützlicher Informationen detektiert werden, während andere Installer-Typen, wie z.B. NSIS, keine internen Informationen des Setups zugreifbar machen. In vielen Fällen bringt die automatisierte Analyse gute Ergebnisse, aber es kann auch immer wieder Ausnahmen geben, bei denen die automatisierte Vorgehensweise nicht funktioniert. Mit zunehmenden Erfahrungen beim Einsatz wird der opsi Setup Detector seine automatisierten Fähigkeiten mit der Zeit erweitern.

Da MSI-Pakete der wichtigste und am meisten verwendete Installer Typ sind, folgt nach dem *Analysiere* Tab der *MSI* Tab, danach alle weiteren Installer Typ Tabs in alphabetischer Reihenfolge.


[[opsi-setup-detector-type-msi]]
==== Installer-Typ MSI

MSI-Dateien sind das Installations-Datenformat des Microsoft Windows Installers. 
Setups vom Installer-Typ MSI sind bereits an der Endung MSI als solche zu erkennen. Das Paketformat ist standardisiert, so dass der opsi Setup Detector automatisch weitere Informationen aus dem Paket auslesen und im *MSI* Tab, auf den automatisch gewechselt wird, anzeigen kann. Die im *Analysiere* Tab angezeigten Informationen sehen bei einem MSI-Paket z.B. so aus: 

----
Analyzing MSI: F:\Setups\MSI\7-zip\7-Zip.msi

Microsoft (R) Windows Script Host, Version 5.8
Copyright (C) Microsoft Corporation 1996-2001. Alle Rechte vorbehalten.

MSI file: F:\uib\setupdetector\Setups\MSI\7-zip\7-Zip.msi
Manufacturer: Igor Pavlov
ProductName: 7-Zip 4.57
ProductVersion: 4.57.00.0
ProductCode: {23170F69-40C1-2701-0457-000001000000}
UpgradeCode: {23170F69-40C1-2701-0000-000004000000}
MSI file size is: 0,9 MB
Estimated required space is: 5,2 MB

get_MSI_info finished
----

Diese Informationen werden aus dem MSI-Paket gelesen und automatisch in die einzelnen Felder des *MSI* Tabs übernommen. Diese Angaben werden benötigt zum patchen der opsi Installations-Scripte:

* MSI Datei: Name der geöffneten MSI Datei
* opsi Product ID: dies ist der Name des zu erzeugenden opsi Paketes und wird aus dem weiter unten stehenden Produkt Namen erzeugt, wobei Leerzeichen und andere ungültigen Zeichen durch ein '_' ersetzt werden. Die vorgeschlagene opsi Product ID kann natürlich geändert werden.
* Produkt Name: der aus dem MSI Paket ausgelesene Name der zu installierenden Software. Diesen Namen möchte man wahrscheinlich im Normalfall beibehalten.
* Produkt Version: die ausgelesene Version der zu installierenden Software. Auch diese Angabe möchte man wohl im Normalfall beibehalten.
* MSI Produkt Code: der aus dem Paket ausgelesene Produkt-Code, welcher für das Deinstallations-Script benötigt wird. Vorsicht: falls das MSI-Paket z.B. getrennte Versionen für 32bit und 64bit enthält, haben diese wahrscheinlich einen jeweils unterschiedlichen Produkt Code.
* erforderlich: dieser vorgeschlagene Wert stammt nicht aus dem MSI-Paket, sondern ist geschätzt als sechsmal die Größe der MSI-Datei und sollte gegebenfalls angepasst werden.
Größe MSI: die ermittelte Größe des MSI-Paketes.
* MST Datei: wird im gleichen Verzeichnis (also dort, wo die MSI-Datei liegt) eine MST-Datei (Transform-Datei) gefunden, wird diese eingetragen und beim Aufruf des Setup verwendet. Gegebenenfalls kann mit dem 'Auswahl'-Button rechts neben dem Feld eine andere MST-Datei gewählt werden oder durch Entfernen des MST-Häkchens vor dem Feld die Verwendung der MST-Datei ausgeschaltet werden. 
* Beschreibung: In diesem Feld wird als Vorgabe der Produkt Name vorgegeben und sollte mit weiteren Hinweisen ergänzt werden, die dann als Produktbeschreibung des opsi Paketes gesetzt werden. 
* *32bit/64bit:* Diese Einstellung besagt, ob es sich um 32bit oder 64bit Software handelt. Sie muss händig gesetzt werden und wird zum Patchen des Deinstallations-Scriptes benötigt. Hiermit wird unterschieden, ob delsub32 oder delsub64 aufgerufen wird. Als Vorgabe ist 32bit voreingestellt. Diese Einstellung bezieht sich auf die Software, nicht auf das Zielsystem. Für 32bit Software ist also immer die Einstellung 32bit zu setzen, auch wenn sie auf einem 64bit System installiert wird. 

Im Falle einer EXE-Datei mit eingebettetem MSI wird das MSI Paket automatisch extrahiert und die gefundenen Informationen zusätzlich zum Tab der EXE-Date (*Advanced+MSI* oder *InstallShied+MSI*)ebenfalls hier im *MSI* Tab angezeigt.

[[opsi-setup-detector-type-advancedmsi]]
==== Installer-Typ Advanced+MSI

Der Advanced Installer ist ein Werkzeug zur Erstellung von MSI-Paketen, die auch in  EXE-Dateien eingebettet sein können. Erkennt der opsi Setup Detektor eine EXE-Datei als ein mit Advanced Installer eingebettetes MSI-Paket, wird die MSI-Datei automatisch aus der EXE-Datei extrahiert und analysiert und die gefundenen Informationen im Tab *Advanced+MSI* angezeigt. Die entsprechenden Informationen werden zusätzlich auch im *MSI* Tab eingetragen. Nähere Angaben zum *MSI* Tab siehe Kapitel <<opsi-setup-detector-type-msi>>.

Beim automatischen Auspacken einer eingebetteten MSI-Datei wird im *Analysiere* Tab Folgendes angezeigt:

----
xxxxxxxxxxxxxxxxxxxxxxxxx
Analyzing AdvancedMSI Setup: 
F:\Setups\AdvancedMSI\Phase5\phase562install.exe
Analyzing MSI from Setup 
F:\Setups\AdvancedMSI\Phase5\phase562install.exe
cmd.exe /C "F:\Setups\AdvancedMSI\Phase5\phase562install.exe" /extract:e:\Temp\opsitmp\
!! PLEASE WAIT !!
!! PLEASE WAIT !! Extracting and analyzing MSI ...
!! PLEASE WAIT !!
e:\Temp\opsitmp\*.msi
Analyzing MSI: e:\Temp\opsitmp\phase5.msi
----

Das MSI wird in das Verzeichnis =%TEMP%\opsitmp= extrahiert und analysiert. Mit dem Ergebnis werden die Felder des *Advanced+MSI* gefüllt:



*Signatur Advanced+MSI:* bei der automatischen Erkennung einer Advanced+MSI-Datei wird in der EXE-Datei gesucht nach dem Marker:
----
name="microsoft.windows.advancedinstallersetup
----

[[opsi-setup-detector-type-innosetup]]
==== Installer-Typ Inno Setup

*Signatur Inno Setup:* bei der automatischen Erkennung einer Inno Setup-Datei wird in der EXE-Datei gesucht nach dem Marker:
----
<description>inno setup</description>
----

[[opsi-setup-detector-type-installshield]]
==== Installer-Typ InstallShield

*Signatur InstallShield:* bei der automatischen Erkennung einer InstallShield-Datei ohne eingebettetes MSI wird in der EXE-Datei gesucht nach dem Marker:
----
<description>InstallShield.Setup</description>
----

ohne dass der Marker für ein eingebettetes MSI gefunden wird. Falls auch der MArker für ein eingebettetes MSI gefunden wird, handelt es sich um ein *InstallShield+MSI* (s.u.). 

[[opsi-setup-detector-type-installshieldmsi]]
==== Installer-Typ InstallShield+MSI

*Signatur InstallShield+MSI:* bei der automatischen Erkennung einer InstallShield-Datei mit eingebettetem MSI wird in der EXE-Datei gesucht nach dem Marker für InstallShield und dem marker für ein eingebettetes MSI:
----
<description>InstallShield.Setup</description>
...
installer,msi,database
----

[[opsi-setup-detector-type-nsis]]
==== Installer-Typ NSIS

*Signatur NSIS:* bei der automatischen Erkennung einer NSIS Setup-Datei wird in der EXE-Datei gesucht nach einem der Marker:
----
Nullsoft.NSIS.exehead
...
Nullsoft Install System
----

[[opsi-setup-detector-logfile]]
==== Erzeugen einer Logdatei

Mit dem Menüpunkt +Info+ wird die Versions- und Revisionsnummer des opsi Setup Detector ausgegeben und der Inhalt des *Analysiere* Tab in die Logdatei '%TEMP%\opsitmp\opsiSetupDetector.log' geschrieben. Falls die Datei bereits vorhanden ist, wird der Inhalt überschrieben.
Die Logdatei enthält also nur die Informationen, die zum Zeitpunkt des Aufrufs von +Info+ im *Analysiere* Tab stehen.


