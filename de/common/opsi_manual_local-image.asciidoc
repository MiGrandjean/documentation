////
; Copyright (c) uib gmbh (www.uib.de)
; This documentation is owned by uib
; and published under the german creative commons by-sa license
; see:
; http://creativecommons.org/licenses/by-sa/3.0/de/
; http://creativecommons.org/licenses/by-sa/3.0/de/legalcode
; english:
; http://creativecommons.org/licenses/by-sa/3.0/
; http://creativecommons.org/licenses/by-sa/3.0/legalcode
; 
; credits: http://www.opsi.org/credits/
////

:Author:    uib gmbh
:Email:     info@uib.de
:Date:      01.08.2014
:Revision:  4.0.5
:toclevels: 6

include::../common/opsi_terms.asciidoc[]

[[opsi-manual-localimage]]
== opsi Erweiterung 'opsi local image'

[[opsi-manual-localimage-preconditions]]
=== Vorbedingungen für die opsi Erweiterung 'opsi local image'

Dieses Modul ist momentan eine
http://www.uib.de/www/kofinanziert/index.html[kofinanzierte opsi Erweiterung]. +
Es sind eine Reihe von Vorbedingungen nötig, um dieses Modul einsetzen
zu können. Das bedeutet, das Sie zum Einsatz eine Freischaltdatei benötigen. Diese Freischaltung erhalten Sie wenn Sie die Erweiterung kaufen. Zu Evaluierungszwecken stellen wir Ihnen auch eine zeitlich befristete Freischaltung kostenlos zur Verfügung ( -> mail an info@uib.de). +

////
Weitere Details hierzu finden Sie in <<opsi-manual-modules>>.
////

IMPORTANT: Diese kofinanzierte Erweiterung kann bis auf weiteres nur von der öffentlichen Hand (z.B. Schulen / Unis) erworben werden.

Technische Voraussetzungen sind opsi 4.0.3 mit den Paketständen:

.Benötigte Pakete
[options="header"]
|==========================
|opsi-Paket|Version
|opsi-linux-bootimage|>= 20130207-1
|==========================

[[opsi-manual-localimage-introduction]]
=== Einführung

Opsi bietet eine gute Basis, um automatisiert Windows Rechner zu installieren und zu pflegen - auch und gerade, wenn es sich um heterogene Hardware handelt. Die von opsi unterstützte Technik der Paket basierten Installation ist aber nicht schnell genug, um in Schulungsräumen Rechner innerhalb von kurzer Zeit wie z.B. in einer Pause zwischen zwei Kursen wieder in einen definierten Zustand zu versetzen. Daher wird hier ein Konzept vorgestellt, bei dem die paketbasiert durch geführte Installation lokal auf einer zweiten Partition als Imagekopie gesichert wird und von dort eine schnelle Wiederherstellung möglich ist.

. Initiale Installation mit abschließender lokaler Image-Sicherung
. Schnelle Wiederherstellung auf Basis unterschiedlicher Techniken
. Systempflege mit abschließender lokaler Image-Sicherung
. Integration von Linuxclients in das Backup/Restore Verfahren.

[[opsi-manual-localimage-concept]]
=== Konzept

Die Anforderungen edukativer Computernetze unterscheiden sich teilweise von denen anderer Netzwerke. Eine wesentliche Anforderung, die im Folgenden diskutiert wird, ist die schnelle Wiederherstellung von Rechnern in einen definierten Zustand, den Sie im Rahmen einer temporären Nutzung verloren haben. Konkret geht es um die Bereitstellung von Rechnern in schulischen Computerräumen, wobei die Problemlage auch auf kommerzielle Computerräume oder universitäre Computerpools zutrifft. 

Die Wiederherstellung muss zwingend innerhalb von kurzer Zeit (15 Minuten / Große Pause) erfolgen und sollte soweit möglich einen Rechner nicht nur 'zurücksetzen' sondern auf eine andere Basisinstallation (z.B. Win XP / Win 7 / Linux) umschalten können. Weiterhin muss es möglich sein, dass eine kontinuierliche Pflege der Systeme mit Sicherheitsupdates gewährleistet ist.

opsi ist ein Client-Management-System, das seine Stärken in der paketbasierten Installation und Pflege von Windows-Systemen hat. Dabei gibt es im Umgang mit heterogener Hardware deutliche Vorteile gegenüber rein imagebasierten Systemen. Die damit einhergehenden Installationszeiten von etwa 2 Stunden sind aber weit von den oben angegebenen Anforderungen entfernt. imagebasierte Lösungen sind hier prinzipiell schneller. Aber auch rein imagebasierte Systeme können bei dem Versuch, für einen ganzen Klassenraum ein Image herunterzuladen, zu Netzwerkproblemen führen. Dieses Problem kann durch lokal gepufferte Images gelöst werden. Ein solcher Ansatz wird z.B. vom Linux basierten System LinBo (Quelle http://linbo.sourceforge.net/) verfolgt. Doch auch mit lokal gepufferten Images kann es, abhängig von der verwendeten Hardware (Stichwort Festplatten- Performance), zu Zeitproblemen kommen, wenn versucht wird, komplette Images innerhalb von 15 Minuten wiederherzustellen.

Eine weitere mögliche Problemlösung, das Einfrieren eines Betriebssystems und Umlenken sämtlicher Schreibzugriffe in einen externen Container, der bei einem Neustart einfach verworfen werden kann, ist eine möglicher Ansatzpunkt. Für Linux existieren Ansatzpunkte z.B. über FUSE Filesysteme. Für Windows gibt es eingeführte kommerzielle Produkte, welche sich auch über die Kommandozeile (und damit per opsi) steuern ließen. Uns sind allerdings für den Windows Bereich keine entsprechenden Open Source Produkte bekannt. Da wir aber eine Open Source Lösung schaffen wollen, findet dieser Lösungsansatz hier keine weitere Betrachtung.

Der im Folgenden untersuchte Ansatz versucht die Vorteile der jeweiligen Ansätze zu kombinieren, ihre Nachteile zu vermeiden und für eine unterschiedliche Hardware-Ausstattung (langsame / schnelle Rechner) angepasste Möglichkeiten zu bieten. Die Grundidee kann in den folgenden Stichpunkten zusammengefasst werden:

* Initiale Windowsinstallation per PXE-Boot paketbasiert mit individueller Treiberintegration unter Verwendung des opsi-Linux-Bootimage

* Sicherung dieser initialen Installation in einem Sicherungsimage auf einer 2. Partition auf der lokalen Festplatte des Rechners unter Verwendung des opsi-Linux-Bootimage

* Schnelle Wiederherstellung der Produktiv-Installation aus dem lokalen Image unter Verwendung des opsi-Linux-Bootimage

* Pflege der lokalen Installation (Sicherheitsupdates) über die opsi Softwareverteilung und Sicherung des aktualisierten Systems auf das lokale Backup-Image unter Verwendung des opsi-Linux-Bootimage

[[opsi-manual-localimage-concept-technical]]
=== Technisches Konzept

Der Schulungsrechner wird mit einer statischen Partitionstabelle verwendet. Dabei kann entweder mit 3 oder 4 Partitionen gearbeitet werden:

* Partition 1 (System) +
Hier findet sich das aktuell verwendete Betriebssystem (Windows / Linux) +
Die Größe dieser Partition wird bei der Partitionierung über das Produkt `opsi-local-image-prepare` über ein Property gesteuert.

* Optional: Partition 2 (sysdata) +
Hier findet sich Anwenderdaten, welche bei einem Restore nicht überschrieben werden. Die Formatierung ist NTFS. +
Die Größe dieser Partition wird bei der Partitionierung über das Produkt `opsi-local-image-prepare` über ein Property gesteuert.

* Partition 3 (winpe / swap) +
Die Größe dieser Partition ist statisch auf 4GB festgelegt. +
Unter Windows XP wird dies Partition nicht verwendet. +
Unter NT6 (Windows 7) wird diese Partition für das bei der Installation notwendige winpe verwendet und ist im Betrieb nicht sichtbar. +
Unter Linux wird diese Partition als Swap verwendet.

* Partition 4 (backup) +
Diese Partition dient zur Speicherung der gesicherten Images und ihrer Metadaten. +
Die Größe dieser Partition ergibt sich aus dem nach Erstellung der anderen Partitionen noch vorhandenen freien Platz.

Die Netbootprodukte zur Betriebssystem Installation verwenden die ersten beiden Partitionen (XP nur die erste) und lassen die Partition 3 unberührt. Somit bleiben die auf der Partition 3 liegenden Images auch bei der Installation eines neuen Betriebssystems erhalten.


[[opsi-manual-localimage-components]]
=== Komponenten

Das Paket 'opsi-local-image' besteht aus mehreren Komponenten:

Den Netbootprodukten

* `opsi-local-image-prepare`
* `opsi-local-image-winxp`
* `opsi-local-image-win7`
* `opsi-local-image-win7-x64`
* `opsi-local-image-win8`
* `opsi-local-image-win8-x64`
* `opsi-local-image-ubuntu32`
* `opsi-local-image-backup`
* `opsi-local-image-restore`
* `opsi-local-image-delete`

Dem Lokalbootprodukt:

* `opsi-local-image-backup-starter`

Einer Erweiterung der opsi Service Methoden.

[[opsi-manual-localimage-components-part]]
==== Netboot Produkt zur Partitionierung
 
* `opsi-local-image-prepare` +
Erstellung der statischen Partitionierung der Festplatte für alle anderen Produkte. +
Über das Property `system_partition_size` wird die Größe der Partition 1 angegeben (Default = 30G) +
Über das Property `data_partition_size` wird die Größe der Partition 2 angegeben. Bei eine Größe von '0G' wird keine Partition für Daten angelegt. (Default = 0G) +
Über das Property `start_os_installation` kann ein Produkt zur Installation eines Betriebssystems ausgewählt werden welches im Anschluß an die Partitionierung automatisch gestartet wird.
Bei der Installation dieses Produkts werden beim Produkt `opsi-local-image-restore` die Produktproperties 'imagefile' und 'imagefiles_list' gelöscht, da durch die Neupartitionierung diese Daten ungültig geworden sind.

IMPORTANT: Verwenden Sie dieses Produkt nur zur initialen Vorbereitung der Platte. Es löscht alle gespeicherten Images.

[[opsi-manual-localimage-components-win]]
==== Netboot Produkte zur Installation von Windows

Die Netbootprodukte zur Installation von Windows sind Abkömmlinge der opsi Standardprodukte zur Windowsinstallation. Das bedeutet konkret, das sie bezüglich des Aufbaus und der Treiberintegration identisch sind. Entsprechende Anleitungen finden sich im 'opsi-getting-started' Handbuch.

* `opsi-local-image-winxp` +
Installation von Windows XP. Verwendet nur die erste Partition.
Administrator Passwort ist leer.

* `opsi-local-image-win7` +
Installation von Windows  7 32 Bit.
Administrator Passwort = `nt123`.

* `opsi-local-image-win7-x64` +
Installation von Windows  7 64 Bit.
Administrator Passwort = `nt123`.

* `opsi-local-image-win8` +
Installation von Windows  8 32 Bit.
Administrator Passwort = `nt123`.

* `opsi-local-image-win8-x64` +
Installation von Windows  8 64 Bit.
Administrator Passwort = `nt123`.

* `opsi-local-image-win81` +
Installation von Windows  8 32 Bit.
Administrator Passwort = `nt123`.

* `opsi-local-image-win81-x64` +
Installation von Windows  8 64 Bit.
Administrator Passwort = `nt123`.

Diese Produkte haben folgende 'opsi-local-image' spezifische Properties:

* 'backup_after_install' mit der default Wert 'true'. Dies bedeutet in diesem Fall, das nach der OS Installation zunächst die Anwendungssoftware installiert wird und abschließend eine Imagesicherung der Installation durchgeführt wird. Weiterhin wird der der Wert vom `imageFile` des Produktes `opsi-local-image-restore` gelöscht. Dies führt dazu, das das erstellte Backup den Namen des laufenden Netbootproduktes (z.B. `opsi-local-image-win7`) bekommt.

* 'setup_after_install' +
Hier können ein oder mehrere Produkte angegeben werden, welche nach Abschluß der Betriebssysteminstallation auf 'setup' gestellt werden. Dabei werden auch die Abhängigkeiten diese Produkte mit aufgelöst.

[[opsi-manual-localimage-components-linux]]
==== Netboot Produkte zur Installation von Linux

* `opsi-local-image-ubuntu32` +
Installation von Ubuntu Linux 12.04 (Precise) 32 Bit. +
Das installierte System kennt 2 user: `root` und `user`. Für 'root' wird das im Produktproperty `root_password` festgelegte Passwort gesetzt (Default: `linux123`). Für 'user' wird das im Produktproperty `user_password` festgelegte Passwort gesetzt (Default: `linux123`).
Da bisher es noch keinen opsi-client-agent für Linux gibt, enthält diese Installation eine statische über die Produktproperties gesteuerte Softwareausstattung. Die wesentlichen
 Produktproperties sind dabei: 
** `desktop` +
Hierbei wird mit dem default Wert `none` keine grafische Oberfläche installiert. Weiterhin gibt es die Auswahl zwischen `kde`, `gnome`, `unity` und `xfce4`.
** `additional_packages` +
Hier kann eine Liste von Ubuntu Paketen angegeben werden, welche ebenfalls installiert werden.
** `language` +
steuert in welcher Sprache (und Tastaturlayout) der desktop installiert wird.
** `online_repository` +
gibt an aus welchem online Repository die Pakete installiert werden sollen. Der Default ist 'http://de.archive.ubuntu.com/ubuntu' . Zur Entlastung der Internetverbindung, kann hier ein eigener 'Paket Proxy' angegeben werden (siehe unten ).
** `backup_after_install` +
('true'/'false') Default = 'true'. Nach der Installation wird sofort eine Imagesicherung der Installation durchgeführt.
** `setup_after_install` +
Hier können ein oder mehrere Produkte angegeben werden, welche nach Abschluß der Betriebssysteminstallation auf 'setup' gestellt werden. Dabei werden auch die Abhängigkeiten diese Produkte mit aufgelöst.

[[opsi-manual-localimage-components-backuprestore]]
==== Netboot Produkte zum Backup und Restore

* `opsi-local-image-backup` +
Diese Produkt sichert das aktuell auf Partition 1 installierte Betriebssystem in einer Imagedatei auf Partition 3. Als Image Namen wird der im Property gesetzte Name verwendet. Wenn dieser leer ist, so wird der Name des opsi Netbootproduktes verwendet, welcher aktuell auf 'installed' steht (z.B. `opsi-local-image-winxp`). Dieser Name wird beim Produkt `opsi-local-image-restore` als Produktproperty 'imagefile' gesetzt, so daß ein nachfolgender Aufruf von `opsi-local-image-restore` per default genau dieses Image wiederherstellt. Dieser Name wird beim Produkt `opsi-local-image-restore` dem Produktproperty 'imagefiles_list' hinzugefügt. Damit enthält dieses Property die Liste aller verfügbaren Images. Weiterhin werden (für die Windows-Produkte) die aktuellen opsi-Produktstände zusammen mit dem Image gesichert, damit auch diese im Rahmen des restores wiederhergestellt werden können. +
Als Sicherungsmethode wird partclone verwendet. +
Properties:
** `imagefile` +
Name der zu erstellenden Imagdatei (default = leer = automatische Namenswahl). Der Name darf Leerzeichen aber keine Umlaute enthalten. (Im Fall von Leerzeichen werden diese intern als Unterstich behandelt. D.h. 'mein image' = 'mein_image'.

* `opsi-local-image-restore` +
Diese Produkt spielt das im Produktproperty 'imagefile' angegebene Image wieder auf der Partition 1 ein und sorgt dafür, das es gebootet werden kann. Weiterhin werden (für die Windows-Produkte) die für das Image gesicherten opsi-Produktstände zusammen mit dem Image wiederhergestellt. +
Properties:
** `imagefile` +
Name des Images welches restored werden soll. Der wert dieses Properties wird automatisch durch das letzte Backup gesetzt. Die Liste der verfügbaren Images findet sich im Property `imagefiles_list`.
** `imagefiles_list` +
Liste der verfügbaren Images. Wird duch das Backup Produkt gepflegt.
** `method` +
Methode des Imagerestores. Mögliche Methoden sind `partclone-image-restore` und `rsync-partclone-image`. Der default ist `rsync-partclone-image`. Die Methode `rsync-partclone-image` ist nur möglich wenn sich auf der Partition 1 das Betriebsystem befindet, von dem das bei `imagefile` angegebene Image erstellt wurde. D.h. mit dieser Methode können kleine Änderungen rückgängig gemacht werden aber es kann kein Wechsel zwischen Betriebssystemen durchgeführt werden. Die Methode `partclone-image-restore` führt eine vollständige Imagekopie durch. Die Methode `rsync-partclone-image` steht derzeit (10.7.2013) nur für Windows (NTFS Filesystem) zur Verfügung. Wird als 'method' `rsync-partclone-image` angegeben für ein Linux-Image oder für ein Image welches zu einer anderen Windows Version gehört als die auf der produktiv Partition vorhandene, so wird automatisch auf die Methode `partclone-image-restore` angewendet +
Scheitert der Aufruf des Restore mit der Methode `rsync-partclone-image`, so wird automatisch der Restore mit der Methode `partclone-image-restore` weitergeführt.
** `update_and_backup` +
('true'/'false') Default = 'false'. Bei 'true' wird nach dem restore dafür gesorgt das alle Localboot Produkte die auf dem Server im einer abweichenden Version vorhanden sind auf Setup gestellt werden und das Produkt `opsi-local-image-backup-starter` auf `once` gesetzt wird. Dies führt dazu, das alle Vorhandenen Update eingespielt und nach den Updates automatisch wieder eine Sicherung durchgeführt wird.
** `setup_after_restore` +
Hier kann ein oder mehrere opsi-Produkte angegeben werden, welche nach dem Abschluß des Restores auf 'setup' gesetzt werden und somit nach dem Reboot automatisch ausgeführt werden. Der Default ist das Produkt 'windomain' zur erneuten Aufnahme des restorten Clients in die Windows Domain.

* `opsi-local-image-delete` +
Diese Produkt löscht das im Produktproperty 'imagefile' angegebene Image von der Backup Partition +
** `imagefile` +
Name des zu löschenden Images (default = leer = Fehler)

[[opsi-manual-localimage-components-helper]]
==== Localboot Produkt zur Ablaufsteuerung

* `opsi-local-image-backup-starter` +
Dieses Localbootprodukt stellt das Netbootprodukt `opsi-local-image-backup` aus 'setup' und rebootet den Rechner dann. Diese Produkt hat eine sehr niedrige 'Priorität' von -98. Dies bedeutet das alle 'normalen' Localboot Produkte vorher abgearbeitet werden. Dies kann zu folgendem genutzt werden: +
Wird für einen Rechner folgende Produkte auf setup gestellt: +
* `opsi-local-image-restore`
* Alle Localboot Produkte die nicht mehr aktuell sind
* `opsi-local-image-backup-starter`

so führt dies zu folgendem Ablauf:

. Restore des Images
. Update des restoreten Betriebssystems
. Backup des upgedateten Betriebssystems

[[opsi-manual-localimage-service-methods]]
=== Erweiterte opsi Service Methoden

Im Rahmen dieser Erweiterung können die Rechner eines Schulungsraums in einer opsi-client Gruppe zusammengefasst werden. Um möglichst komfortable Aktionen für alle Rechner eines Schulungsraums auszulösen sind folgende Erweiterungen der opsi-service Methoden vorgesehen:

* `setProductActionRequestForHostGroup` +
Parameter: `hostGroupId, productId, actionRequest` +
Ermöglicht für alle Mitglieder einer Gruppe (z.B. Rechner eines Schulungsraums) eine bestimmte Aktion zu starten (z.B. Retstore des Images).

* `setProductPropertyForHostGroup` +
Parameter: `productId propertyId propertyValue hostGroupId` +
Ermöglicht für alle Mitglieder einer Gruppe (z.B. Rechner eines Schulungsraums) für ein betimmtes Produkt einen Propertywert zusetzen (z.B. welches Image restored werden soll).

* `getPossibleImagefileValuesForHostGroup` +
Parameter: `groupId` +
Liefert die Liste der Imagefile Namen welche das `opsi-local-image-backup` auf allen Mitgliedern der Gruppe angelegt hat. Wenn ein bestimmtes Image (z.B. `opsi-local-image-winxp`) auf einem oder mehreren Rechnern nicht vorhanden ist, so ist es nicht Bestandteil der Rückgabeliste.

Diese Methoden werden zu einem späteren Zeitpunkt in die Standardpakete von opsi integriert. Bisdahin steht Ihnen in der Auslieferung eine Datei `40_groupActions.conf` zur Verfügung die Sie bitte mit 'root' Rechten nach `/etc/opsi/backendManager/extend.d` kopieren. Führen Sie danach aus: 
`opsi-setup --set-rights /etc/opsi`.

[[opsi-manual-localimage-proceedings]]
=== Abläufe

[[opsi-manual-localimage-proceedings-initial]]
==== Initiale Installation

Über das Produkt `opsi-local-image-prepare` wird zunächst die notwendige statische Partitionierung erzeugt.

.Schema: Statische Partitionierung mit opsi-local-image-prepare
image::../images/oli-prepare.png["Schema: Statische Partitionierung mit opsi-local-image-prepare", width=332]

Anschließend können über die Produkte `opsi-local-image-winxp`, `opsi-local-image-win7`, `opsi-local-image-win7-x64`und `opsi-local-image-ubuntu32` verschiedene Betriebssysteme mit unterschiedlicher Ausstattung an Anwendungssoftware installiert werden. 

.Schema: OS Installation mit opsi-local-image-win*
image::../images/oli-os-install.png["Schema: OS Installation mit opsi-local-image-win*", width=332]

Diese werden per default nach Ihrer Installation automatisch als Image gesichert.

.Schema: Image Backup mit opsi-local-image-backup
image::../images/oli-backup-1.png["Schema: Image Backup mit opsi-local-image-backup", width=332]


[[opsi-manual-localimage-proceedings-restore]]
==== Restore eines Images

Der einfache Aufruf des Produktes `opsi-local-image-restore` stellt automatisch das letzte erstellte Image wieder her. Soll ein anderes Image wieder hergestellt werden, so muß dies im Property `imagefile` angegeben werden.

.Schema: Image Restore mit opsi-local-image-restore
image::../images/oli-restore-image.png["Schema: Image Restore mit opsi-local-image-restore", width=332]

[[opsi-manual-localimage-proceedings-update]]
==== Update eines Images

Durch den Aufruf des Produktes `opsi-local-image-restore` mit der Propertyeinstellung `update_and_backup` = 'true' wird das angegebene Image restored, alle Anwendungssoftware upgedated (soweit Updates auf dem Server vorhanden) und anschließend automatisch wieder eine Sicherung durch geführt.

[[opsi-manual-localimage-proceedings-delete]]
==== Löschen eines Images

Durch den Aufruf des Produktes `opsi-local-image-delete` wird das im Property `imagefile` angegebene Image gelöscht.

[[opsi-manual-localimage-backuppartition]]
=== Backuppartition

Die Backuppartion ist die dritte Partition der 1. Festplatte. +
Dort finden sich:

* Die Datei `master.log` mit Informationen über alle durchgeführten Image Operationen. Diese Logdatei wird in die bootimage logs übernommen.
* Die Image Verzeichnisse +
Die Imageverzeichnisse haben den selben Namen wie das Image und enthalten neben dem Image noch die Metadaten den Images. +
Zur Orientierung hier Beispielhaft die Größen von unterschiedlichen Imageverzeichnissen mit OS und Standardsoftware (Libreoffice, Adobereader, firefox, thunderbird, javavm, flashplayer): 
* `opsi-local-image-ubuntu32`: 3.6G
* `opsi-local-image-winxp`: 6.4G
* `opsi-local-image-win7`: 9.4G
* `opsi-local-image-win7-x64`: 13G

[[opsi-manual-localimage-wimcapture]]
=== Capture Images (WIM) erstellen und verteilen

[[opsi-manual-localimage-wimcapture-introduction]]
==== Capture Images (WIM) Einführung

Microsoft hat mit NT6 (also ab Vista) zur Installation ein neues Imageformat,
das *Windows Imaging Format (WIM)* eingeführt.
Ein WIM Image ist kein Platten- oder Partitionsimage sondern mehr ein Dateien und Metadaten Archiv. Eine WIM Datei kann mehrere Images enthalten. Die normale Installation eine NT6 Rechners basiert darauf, das die setup.exe ein Image aus der Datei install.wim auspackt und danach dieses konfiguriert und mit zusätzlichen Treibern versieht.

Von einem existierender Rechner kann das Windows inclusive installierter Software und Konfigurationen ausgelesen und in Form eines WIM abgespeichert werden. Ein solches WIM kann dann wieder die Basis für neue Installationen sein.

[[opsi-manual-localimage-wimcapture-components]]
==== Capture Images (WIM) Komponenten

Das Paket 'opsi-local-image' besteht aus mehreren Komponenten:

Den Netbootprodukten:

* `opsi-local-image-capture`

Den Lokalbootprodukten:

* `opsi-local-image-backup-sysprep`
* `opsi-set-wim-imagenames`
* `opsi-del-wim-images`
* `opsi-client-agent` >= Version 4.0.4.5-3


[[opsi-manual-localimage-wimcapture-proceedings]]
==== Capture Images (WIM) Abläufe

.Erstellen des Masterrechners:

Dieser wird mit als opsi-local-image Rechner erstellt und kann dabei Software und Konfigurationen sowohl per opsi als auch von Hand bekommen.

.Sysprep: Depersonalisieren des Masters:

Damit ein capture Image als Basis für eine Installation dienen kann muß es zunächst dafür vorbereitet werden. Dabei wird der Rechner depersonalisiert, d.h. Der Rechner hat danach keine Identität mehr und ist gut geeignet als Vorlage für eine Neuinstallation aber als Rechner selber kaum noch brauchbar. +
Daher kann beim opsi-local-image-sysprep Produkt über Produkt Properties gesteuert werden ob vor der eigentlichen Depersonalisierung noch ein Backup angelegt werden soll: +
`always_backup_before_sysprep` (true/false) Default=true: Startet immer ein Backup vor dem sysprep Vorgang. +
`abort_on_no_backup` (true/false) Default=true: Prüft ob auf der Backuppartition ein Backup zu diesem Produkt vorhanden ist und Bricht ab falls nicht. +
Nach dem sysprep Vorgang wird üblicherweise der Eigentlich capture Vorgang gestartet der durch das netboot Produkt opsi-local-image-capture durchgeführt wird. Ob der start automatisch durchgeführt wird entscheidet das Property: +
`startcapture` (true/false) Default=true: Setze das Produkt opsi-local-image-capture auf 'setup' und reboot den Rechner

.Capture Images: Configed: opsi-local-image-sysprep
image::../images/oli-capture-configed-sysprep.jpg["Capture Images: Configed: opsi-local-image-sysprep", width=500]

.Capture: Die vorhandene Installation auslesen und zur Installation bereitstellen:

Im Rahmen dieses Mehrstufigen Prozesses wird der vorhandene Rechner ausgelesen und als WIM Image in ein vorhandenes opsi Windows Installationsprodukt integriert. Von daher gibt es naheliegender Weise ein Produktproperty über das angegeben werden kann in welches Produkt das ausgelesene Image integriert werden soll: +
`target_product` Default='': Name des Ziel Produktes. +
*Achtung*: Diese Property ist nicht 'schlau', es wird nicht überprüft ob das ausgelesene Image zum Ziel Produkt passt. Sie können also ohne Fehlermedldung ein win7-32Bit Image in ein Win81-64Bit Produkt schreiben. Das sollten Sie aber nicht !. Wir empfehlen die Verwendung von gesonderten Produkten welche nur als Ziel dienen (z.B. `opsi-local-image-win81-x64-caoture`). +
Das Zielprodukt muß genauso wie ein normales Produkt zur Windows Installation vorbereitet werden. Als Zieldatei innerhalb des Zielproduktes dient die `install.wim` Datei (`installfiles/sources/install.wim`) welche auch die von Microsoft gelieferten Images enthält. Ob das aus gelesen Image nun an diese Datei angehängt werden soll oder eine neue install.wim erzeugt werden soll, steuert das Property:
`capture_mode` (append/always_create) Default='append':  +
Bei `append` wird das neu erstellte Image an die vorhandene install.wim angehängt. *Achtung*: Enthält die install.wim schon ein Image gleichen Namens wird dieses *ohne Nachfrage gelöscht*. Bei `always_create` wird eine neue install.wim erstellt. +
Die Install.wim Datei ist ein Container der mehrere Images enthalten kann. Die Images haben einen Namen und eine Beschreibung. Der Namen und die Beschreibung des neu erstellten Images werden durch die folgenden Properties gesteuert: +
`imagename`  Default=''  +
`image_description`  Default=''  +
Das Property `start_after_capture` ist ein Liste von Produkten welche nach dem Abschluß des Capturevorgangs auf 'setup' gestellt werden sollen. Eine gute Idee ist hier zum Beispiel opsi-local-image-restore welches das vor dem sysprep erstellte backup wiederherstellt.

.Capture Images: Configed: opsi-local-image-capture
image::../images/oli-capture-configed-capture.jpg["Capture Images: Configed: opsi-local-image-capture", width=500]

.Capture Images: Schema: sysprep
image::../images/oli-capture-sheme-sysprep.png["Capture Images: Schema: sysprep", width=500]

.Capture Images: opsi-local-image-sysprep 1 : Start
image::../images/oli-capture-sysprep1.jpg["Capture Images: opsi-local-image-sysprep 1 : Start", width=350]

.Capture Images: opsi-local-image-sysprep 2 : Backup vor sysprep
image::../images/oli-capture-sysprep1-backup.jpg["Capture Images: opsi-local-image-sysprep 2 : Backup vor sysprepp", width=350]

.Capture Images: opsi-local-image-sysprep 3 : Deaktivierung des opsi-client-agent
image::../images/oli-capture-sysprep2a.jpg["Capture Images: opsi-local-image-sysprep 3 : Deaktivierung des opsi-client-agent", width=350]

.Capture Images: opsi-local-image-sysprep 4 : Eigentlicher sysprep Vorgang
image::../images/oli-capture-sysprep2b.jpg["Capture Images: opsi-local-image-sysprep 4 : Eigentlicher sysprep Vorgang", width=350]

Gesteuert durch das Property `startcapture` kann der Capturevorgang direkt im Anschluß an das sysprep gestartet werden. +
Der Capture Vorgang besteht grob aus zwei Phasen: +
Der eigentliche Capture Vorgang soll durch das winpe auf der Platte durchgeführt werden. Hierfür muß dieses aber erst prepariert werden und dies ist die erste Phase:

* Aktivierung des WinPE als bootbare Partition, Erstellung der nötigen bootrecords und soweit nötig die Deaktivierungvon Laufwerksbuchstaben bei anderen Partitionen

* Auslesen der opsi-Metadaten über Installierte Produkte auf dem Client und Speicherung dieser Daten auf dem Client in einem temporären Verzeichnis.

* Einige Aufräumarbeiten auf dem auszulesenden System.

* Schreiben einer Kommandodatei welches die Capturevorgänge beim nächsten WinPE start initiert.

* Bereitstellen weitere Daten für die Abläufe im WinPE wie z.B. Liste der Produkte aus dem Property `start_after_capture`

* Reboot des Clients

.Capture Images: Schema: Capture 1
image::../images/oli-capture-scheme-capture1.png["Capture Images: Schema: Capture 1", width=500]

In der zweiten Phase startet das WinPE und führt nun den eigentlichen Capturevorgang durch. Im Detail: 

* Mounten des opsi_depot_rw shares damit auf diesen auch geschrieben werden kann.

* Prüfen der Architektur des WinPE (32/64 Bit) und Start des opsi-script in der entsprechenden Architektur.

* Herstellung der Verbindung zum opsi-webservice

* Reaktivierung der Laufwerksbuchstaben

* Im Falle von `append` mode: Überprüfen ob ein Image mit diesem Namen schon vorhanden ist und gebenfalls dieses löschen.

* Start des Capturevorgangs. Dabei wirdin Abhängigkeit der Windows Version des WinPE bei Windows 7 das Programm imagex aus dem opsi-local-image-capture Produkt verwendet. Bei Windows 8 wird das Program dism aus dem WinPE verwendet (mit fallback zu imagex).

* Die enstandenen Logfiles werden zusammgeführt.

* Überprüfung der Liste der Images im Modifizierten install.wim und setzten dieser Namensliste in das Produktproperty `Imagenames` des Zielproduktes, so das das neu erstellte Image auch zur Installation ausgewählt werden kann.

* Setzen der Produkte aus `start_after_capture` auf 'setup'.

* Deaktivierung der WinPE Partition und Aktivierung der Systempartition (Windows). Bei UEFI umstellung auf Netboot soweit möglich.

* Schreiben der Logdatei zum Server. Dort wird diese an die Logdatei des opsi-local-capture bootimage Laufs anghängt.

* Reboot

.Capture Images: Schema: Capture 2
image::../images/oli-capture-scheme-capture2.png["Capture Images: Schema: Capture 2", width=500]

.Capture Images: Capture: Löschen eines existierenden Images
image::../images/oli-capture-del-existing-image.jpg["Capture Images: Capture: Löschen eines existierenden Images", width=350]

.Capture Images: Capture: Capture und Anhängen (Append) des neuen Images
image::../images/oli-capture-append-image-dism.jpg["Capture Images: Capture: Capture und Anhängen (Append) des neuen Images", width=350]

Zum Ausrollen des erstellten Images dient das per `target_product` angegeben 'Zielprodukt'. Hier wählen Sie bei `imagename` das erstellte Image aus und können dieses jetzt ganz normal wie eine andere Windowsinstallation installieren. D.h. sämtliche standards wie Treiberintegration, Installation des opsi-client-agent finden genauso statt wie wenn Sie ein orginal Microsoft Image ausrollen. +
Ein wichtiger Punkt bleibt zu beachten: Waren auf dem Rechner von dem das Image erstellt wurde Software per opsi installiert, so werden diese Installtionsdaten bei der Installation des opsi-client-agent wieder hergestellt. Dies hat den Nebeneffekt das anders als 'normaler weise' nicht alle Produkte die auf installed standen bevor die Installation des Betriebssystems begann nun auf setup gesetzt werden. Dieses 'normale' Verhalten würde hier ja dazu führen das alle schon im Image installierten Produkte nochmal installiert werden. Daher werden im diesem Fall auch nur die Produkte installiert welche Sie vor der Installation des Betriebssystems auf 'setup' gestellt haben. 


[[opsi-manual-localimage-ubuntumirror]]
=== Erstellen eines eigenen Ubuntu 'Proxy'
Eine brauchbare Anleitung zur Erstellung eines eigenen Ubuntu Proxy finden Sie hier:

http://wiki.ubuntuusers.de/Lokale_Paketquellen/Apt-Cacher-ng

http://www.gambaru.de/blog/2011/10/26/apt-cacher-ng-ein-proxy-server-fur-debian-und-ubuntu/


