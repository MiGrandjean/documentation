////
; Copyright (c) uib gmbh (www.uib.de)
; Questa documentazione appartiene a uib
; ed è pubblicata sotto licenza creative commons by-sa tedesca
; vedi:
; http://creativecommons.org/licenses/by-sa/3.0/de/
; http://creativecommons.org/licenses/by-sa/3.0/de/legalcode
; in italiano:
; http://creativecommons.org/licenses/by-sa/3.0/it/deed.it
; http://creativecommons.org/licenses/by-sa/3.0/it/legalcode
;
; credits: http://www.opsi.org/credits/
////


:Author:    OpenSides sprl
:Email:     opsi@opensides.be
:Date:      27.02.2013
:Revision:  4.0.3
:doctype:		book

// Include common opsi terms
include::../common/opsi_terms.asciidoc[]


= Primi passi con opsi - Versione 4.0.2

// Include common opsi copyright
include::../common/opsi_manual_copyright.asciidoc[]

[[opsi-getting-started-introduction]]
== Introduzione
Queste istruzioni illustrano in dettaglio l'installazione e l'avvio di un {opsi-server}. Iniziano dai pacchetti d'installazione forniti per poi andare verso l'installazione di test di un cliente. 

La configurazione di rete qui descritta è un esempio e prende in conto una rete senza server DHCP concorrente (es. i primi test sono eseguiti in una rete isolata con un {opsi-server} e qualche cliente).

Raccomandiamo vivamente di fare i primi test in una rete di prova, separata da altri servers DHCP. Sarà necessaria una connessione temporanea ad internet per scaricare i pacchetti dei prodotti necessari.

Opensides e Uib forniscono dei servizi di consulenza per l'integrazione di opsi nel vostro ambiente di produzione esistente.

[[opsi-getting-started-introduction-first-steps]]
=== Fasi d'installazione e primo avvio
Le quattro fasi per installare ed avviare un {opsi-server} sono:

. installazione di base del server
. configurazione del server: + 
configurazione della rete, impostazione delle passwords (amministratore di opsi, pcpatch, samba), aggiornamenti del server
. download e installazione, sul server opsi, dei prodotti cliente richiesti per opsi
. finizione dei sistemi operativi di base Windows usando i CDs originali di Windows.

A questo punto, un cliente potrà essere integrato automaticamente sul server opsi.

In funzione delle vostre esigenze, opsi offre differenti tipi d'installazione di base.  
Le procedure per i diversi tipi d'installatione di base sono descritte nel Capitolo 3 di questo manuale.
I tipi d'installazione includono sia l'uso di una macchina virtuale VMware esistente, sia l'installazione diretta di opsi 
su un server reale. 

[[opsi-getting-started-introduction-hardware-preconditions]]
=== Prerequisiti Hardware

Per un {opsi-server} il seguente materiale hardware è raccomandato:

* PC compatibile Intel-x86

* interfaccia ethernet supportata dai kernel linux standard
* un hard disk con almeno 16 GB di spazio vuoto
* un lettore CD ROM che supporti la fase di boot

Le perfomance richieste dal server sono moderate sia per il test sia per l'ambiente di produzione.

Raccomandiamo che quando usate la macchina virtuale VMware, il PC host abbia almeno un processore duale e 4GB di RAM. 
Per i propositi di test, il cliente di test puó essere ospitato in un'altra macchina virtale VMware sullo stesso PC host. 


[[opsi-getting-started-introduction-software-and-configuration-preconditions]]
=== Prerequisiti di configurazione

Il vostro server e la vostra rete devono rispondere alle seguenti esigenze per poter ospitare e far funzionare correttamente opsi:

* *nome di dominio DNS valido* +
Il vostro nome di dominio DNS deve contenere almeno un nome di dominio e un dominio di primo livello. Quindi il nome di dominio qualificato (FQDN) deve contenere uno o più punti. Il dominio di primo livello deve contenere minimo due caratteri. +
Nomi di dominio validi sono ad esempio: 'dominio.locale' , 'opensides.be', 'sottodominio.dominio.it'.  
Un esempio non valido: 'miodominio.i' perchè contiene un solo carattere nel dominio di primo livello
Un esempio non valido: 'miodominio' perchè è solo un dominio di primo livello +
vedere anche: +
http://it.wikipedia.org/wiki/Domain_name

* *nome DNS valido per un host* +
I nomi d'host (anche i nomi host cliente) devono rispettare le regole di denominazione. Possono contenere caratteri ASCII a-z, numeri 0-9 e il trattino '-'. Il segno di sottolineatura '_' non è autorizzato. +
vedere anche: +
http://it.wikipedia.org/wiki/Hostname

* *risoluzione di nome corretta per il server* +
Eseguite il comando seguente e verificatene il risultato:
+
[source,prompt]
----
getent hosts $(hostname -f)
----
+
Il risultato dovrà assomigliare a qualcosa del genere: +
'192.168.1.1 server.domain.tld server' +
Il risultato ha lo schema: +
'<Indirizzo-IP> <nome d'host pienamente qualificato> <nome host>' +
Se il risultato differisce dall'esempio sopra riportato (contiene ad esempio '127.0.0.1' o 'localhost'), oppure il nome d'host pienamente qualificato non contiene uno o più punti, allora dovrete correggere la vostra risoluzione dei nomi (DNS oppure file `/etc/hosts`). 

[[opsi-getting-started-installation]]
== Installazione

[[opsi-getting-started-installation-base]]
=== {opsi-server} Installazione di base

Questo capitolo descrive i diversi tipi d'installazione di un {opsi-server}. Potete scegliere il vostro tipo d'installazione e ignorare le altre istruzioni.

Se tutti i prerequisiti sono rispettati, allora il server è correttamente configurato e pronto all'avvio. Prima di utilizzare il vostro {opsi-server}, dovrete aggiornare il vostro sistema tenendo presente le istruzioni del capitolo 'Aggiornamento del {opsi-server}'.

Per scopo di test, raccomandiamo l'uso della macchina virtuale VMware fornita da uib.

Seguite le istruzioni utilizzando i comandi nei
[source,prompt]
----
campi evidenziati
----
(ad esempio con un copia-incolla a partire da questo manuale)

Se riscontrate eventuali problemi, chiedete aiuto nel forum all'indirizzo https://forum.opsi.org 

[[opsi-getting-started-installation-base-vm]]
==== Avvio della macchina virtuale VMware

Un '{opsi-server}' puó essere installato come macchina virtuale, perchè le esigenze in termini di performance del sistema sono basse. Una macchina virtuale preconfigurata e pronta all'uso è fornita da uib. Potete scaricare il file VMware a partire dal sito web di uib. Il player gratuito di VMware (ma anche l'applicazione open source Virtualbox) sarà sufficiente per eseguire la macchina virtuale sul vostro sistema. 

Potrete utilizzare anche VMware ESX. In questo caso, dovrete usare il convertitore VMware per importare la macchina virtuale. Potrà succedere che dovrete modificare il controllore SCSI manualmente dopo l'importazione in ESX.


[[opsi-getting-started-installation-base-vm-start]]
===== Primo avvio

*VMware*

Se avete un server che esegue VMware o il player VMware, ci vorranno solo pochi clicks del mouse per installare il '{opsi-server}' di base:

* Scaricate il file 'opsi4.0-servervm.zip' da internet.

* Decomprimete il file e una nuova cartella 'opsidemo' verrà generata.

* Avviate il player VMware. Attraverso il player VMware, aprite il file 'opsidemo.vmx' contenuto nella cartella 'opsidemo'. Potrete ottene un messaggio indicante che i dispositivi CDROM e floppy disc hanno indirizzi sbagliati. Potete ignorare questi messaggi, la macchina virtuale sarà comunque avviata.

*Virtualbox*

* Scaricate il file 'opsi4.0-servervm.soa' da internet.

* Avviate Virtualbox. Dal menu 'File' / 'Import Appliance' selezionate il vostro file `*.soa` e importatelo.

*In generale*

Il player VMware è gratuito e disponibile per tutti i sistemi operativi più comuni su vmware.com. Normalmente puó essere installato senza problemi, se il materiale del computer host (specialmente la memoria) risponde ai bisogni dei software di sistema che sono eseguiti in parallelo.

La macchina virtuale fornita da uib è basata su Linux. Le proprietà del sistema host sono descritte nel file di configurazione 'opsidemo.vmx'. Se eseguite la macchina virtuale '{opsi-server}' in Windows, o se le vostre periferiche su Linux hanno indirizzi differenti, allora dovrete adattare il file alle esigenze del vostro sistema.
 

[[opsi-getting-started-installation-base-vm-lang]]
===== Selezione della lingua
Il primo passo è quello di scegliere la lingua preferita:

.Selezione della lingua
image::../images/1stboot-language-selection.png["Screenshot: Language selection",width=400]

[[opsi-getting-started-installation-base-vm-1stboot]]
===== „Primo avvio“
Il {opsi-server} ha bisogno di essere connesso ad internet per funzionare correttamente. Lo script `1stboot.py` partirà automaticamente al primo avvio al fine di configurare le impostazioni di rete del {opsi-server}.

Se qualcosa va storto durante l'esecuzione di '1stboot.py', lo script `1stboot.py` potrà essere richiamato in seguito a partire dalla linea di comando.

WARNING: Non potrete usare `1stboot.py` per rinominare il vostro '{opsi-server}' dopo!

Il file di log di `1stboot.py` è in `/var/lib/1stboot/1stboot.log`. 

.1stboot.py Maschera d'avvio
image::../images/1st-startup-mask.png["Screenshot: 1stboot.py Startup mask",width=400]

Riempite con le informazioni di configurazione della vostra rete e rispondete alle domande.

.1stboot Maschera d'Input
image::../images/1stboot-input-mask.png["Screenshot: 1stboot Input mask",width=400]

In seguito, vi sarà richiesto:

server name::		Il nome di questo server (senza il dominio), ad esempio +opsidemo+

domain::		Il Dominio DNS (non il dominio Windows) – il nome dovrà includere un punto, ad esempio +opsi.local+

ip address::		L'indirizzo IP di questo server, ad esempio +192.168.1.50+

netmask::		La maschera di rete di questo server, ad esempio +255.255.255.0+

windows domain::	Nome del dominio Windows (non il dominio DNS)

country::		Per la creazione del certificato SSL: Identificativo della nazione (2 lettere maiuscole), ad es. +IT+

state::			Per la creazione del certificato SSL: Identificativo della regione, ad es. +LOM+

city::			Per la creazione del certificato SSL: Identificativo della città, ad es. +Milano+

organization::		Per la creazione del certificato SSL: Identificativo dell'impresa, ad es. +opensides spa+

organizational unit:: 	Per la creazione del certificato SSL: Identificativo dell'ufficio (in opzione)

email address::		Per la creazione del certificato SSL: indirizzo mail (in opzione)

gateway::		Indirizzo IP del gateway internet, ad es. +192.168.1.1+

proxy::			Le informazioni sul proxy, se richieste per l'accesso ad internet: ad es. http://myuser:mypass@192.168.1.5:8080

DNS server:: 		Indirizzo IP del server DNS ad es. +192.168.1.1+

mail relay:: 		Indirizzo IP del server Mail ad es. +192.168.1.1+

tftp server::		Indirizzo IP del server tftp (normalmente il server stesso)

Password of root::	Password di root

Una volta terminata l'esecuzione dello script '1stboot.py' finishes, la macchina virtuale sarà riavviata.

Nota tecnica circa lo script 1stboot.py: +
Lo script lavora con dei modelli per modificare i file di configurazione. I modelli sono situati in: `/var/lib/1stboot/templates/`. +
Possono essere modificati per un uso successivo. 

[[opsi-getting-started-installation-base-vm-second-start]]
===== Secondo Avvio

Dopo il riavvio, connettetevi come 'root' con la vostra password per root.

L'interfaccia grafica del {opsi-server} should already be started (implemented as a sustainable window manager). A „Firefox“ browser window might appear at startup, and display further instructions and information.  This information can serve as a reference to the getting started document (the document you are currently reading).

Se ricevete un messaggio che indica una mancata connessione di rete, provate a riavviare il server, potrebbe risolvere il problema.

.View of fresh started opsi-server
image::../images/opsiserver_start_gui.png["Screenshot: View of newly started opsi-server",400]

Se la configurazione della rete è corretta, sarete in grado di procedere ad un accesso remoto al {opsi-server}, ad esempio:

* usate 'ssh' dalla linea di comando per avere accesso al server ('ssh' è sempre installato in un sistema linux, per Windows usate putty: http://www.chiark.greenend.org.uk/~sgtatham/putty/) +

Usate 'root' come nome utente, e autenticatevi con la password di root.

[[opsi-getting-started-installation-base-vm-term]]
===== Finestra del terminale

Nelle sezioni seguenti, alcuni comandi dovranno essere inseriti a partire da un'interfaccia in linea di comando. Puùo essere il miglior modo per lavorare con le istruzioni di questo manuale.

I comandi sono inseriti a partire da una “finestra terminale“. Di seguito degli esempi che spiegano come avere accesso a una finestra di terminale:

* Accesso remoto via ssh sul '{opsi-server}' (vedi Sezione 3.1.1.4 dell'ultimo capitolo)

* Aprire una finestra di terminale nell'interfaccia grafica del {opsi-server} cliccando sull'icona del terminale nella barra delle icone.

* Aprire una finestra di terminale nell'interfaccia grafica del {opsi-server} con un click destro del mouse, e scegliendo  “Terminale“. +
NOTE: l'interfaccia grafica ha molte applicazioni che sono accessibili usando una varietà di bottoni nell'angolo di sinistra in alto dello schermo.

Raccomandiamo di eseguire dei facili copia/incolla a partire dal questo manuale verso la finestra del terminale sul {opsi-server} (molte applicazioni accettano il copia/incolla).

Gli esempi estratti dai files di configurazione sono formattati come di seguito:
[source,configfile]
----
depoturl = smb://smbhost/sharename/path
----

Gli esempi per i comandi che dovrete eseguire sono formattati come di seguito:
[source,prompt]
----
cd /tmp
ls -l
----

I simboli '< >' identificano dei nomi astratti. Quando eseguirete dei comandi, rimpiazzate i '<nomi astratti>' con dei nomi reali. +
Ad esempio: Lo spazio condiviso, dove opsi piazza i suoi pacchetti software, potrebbe essere definito in maniera astratta come '<deposito-condiviso-opsi>'. Se lo spazio condiviso reale è `/opt/pcbin/install`, allora dovrete rimpiazzare il nome astratto con questa stringa esatta. L'ubicazione del pacchetto '<deposito-condiviso-opsi/ooffice' diventerà `/opt/pcbin/install/ooffice`. .

[[opsi-getting-started-installation-base-vm-network]]
===== Verificate la connessione di rete

Se la configurazione di rete è corretta, e il computer è connesso ad internet, potrete navigare verso ogni indirizzo internet usando il browser della finestra d'avvio.

Se la connessione internet non è funzionante, allora dovrete aprire una finestra di terminale (probabilmente l'accesso remoto non sarà possibile, eccetto usando la finestra di terminale stessa del server) ed effettuare le necessarie verifiche e correzioni della configurazione di rete. 

Potrete riconfigurare la connessione di rete del server eseguendo questo comando nella finestra di terminale:
[source,prompt]
----
1stboot.py
----

Per forzare il riavvio del server eseguite il comando seguente:
[source,prompt]
----
reboot
----

Se la connessione di rete è funzionante, potrete installare o aggiornare i pacchetti software di opsi, e configurare il necessario per il primo test d'installazione. Se vorrete usare la macchina virtuale VMware (invece di installare direttamente il {opsi-server} nel vostro host), allora passate a <<opsi-getting-started-installation-config>>.

[[opsi-getting-started-installation-base-deb]]
==== Installazione di un sistema Debian / Ubuntu

Opsi 4.0 è progettato e testato per:

* Debian : Lenny, Squeeze

* Ubuntu: Lucid, Maverick, Natty, Oneiric, Precise

* Il supporto di Debian Lenny e Ubuntu Maverick è obsoleto.

Leggete il capitolo <<opsi-getting-started-introduction-software-and-configuration-preconditions>> (se non lo avete ancora fatto).

In questo capitolo, noi supponiamo che voi conosciate il sistema di pacchetti debian (troverete informazioni sul soggetto su apprpriti libri, sulle pagine di manuale debian/ubuntu, oppure all'indirizzo http://www.debian.org/doc/).

Notate che un {opsi-server} ha bisogno di spazio in `/opt/pcbin` e `/var/lib/opsi`. In entrambe le directories, vi raccomandiamo un minimo di 8 GB di spazio libero.

Raccomandiamo l'installazione dei seguenti software:

[source,prompt]
----
aptitude install wget lsof host python-mechanize p7zip-full cabextract openbsd-inetd
----

opsi ha bisogno di samba, che puó essere installato con:

[source,prompt]
----
aptitude install samba samba-common smbclient smbfs samba-doc
----

Se desiderate usare MySQL come backend (ad esempio per l'inventario, la gestione delle licenze o avete più di 500 computer da amministrare), allora dovrete installare mysql-server:
[source,prompt]
----
aptitude install mysql-server
----

Verificate sul {opsi-server} il contenuto di `/etc/hosts`, o l'output del comando:
[source,prompt]
----
getent hosts $(hostname -f)
----

Il risultato dovrebbe assomigliare all'esempio seguente: +
'192.168.1.1 server.domain.tld server' +
Il risultato ha lo schema: +
'<Indirizzo-IP> <nome-host-pienamente-qualificato> <nome-host>' +
Se il risultato differisce dall'esempio sopra riportato (contiene ad esempio '127.0.0.1' o 'localhost'), oppure il nome dell'host pienamente qualificato non contiene uno o più punti, allora dovrete correggere la vostra risoluzione dei nomi (DNS oppure il file`/etc/hosts`). 

Per cominciare l'installazione di opsi, aggiungete le seguenti linee al file '/etc/apt/sources.list', in base al vostro sistema operativo:

Ubuntu Lucid:
[source,configfile]
----
deb http://download.opensuse.org/repositories/home:/uibmz:/opsi:/opsi40/xUbuntu_10.04 ./
----

Ubuntu Maverick:
[source,configfile]
----
deb http://download.opensuse.org/repositories/home:/uibmz:/opsi:/opsi40/xUbuntu_10.10 ./
----

Ubuntu Natty:
[source,configfile]
----
deb http://download.opensuse.org/repositories/home:/uibmz:/opsi:/opsi40/xUbuntu_11.04 ./
----

Ubuntu Oneiric:
[source,configfile]
----
deb http://download.opensuse.org/repositories/home:/uibmz:/opsi:/opsi40/xUbuntu_11.10 ./
----

Ubuntu Precise:
[source,configfile]
----
deb http://download.opensuse.org/repositories/home:/uibmz:/opsi:/opsi40/xUbuntu_12.04 ./
----
Debian Lenny:
[source,configfile]
----
deb http://download.opensuse.org/repositories/home:/uibmz:/opsi:/opsi40/Debian_5.0 ./
----

Debian Squeeze:
[source,configfile]
----
deb http://download.opensuse.org/repositories/home:/uibmz:/opsi:/opsi40/Debian_6.0 ./
----

Adesso eseguite questo comando per poter importare la firma digitale del repository:

Ubuntu Lucid:

[source,prompt]
----
wget -O - http://download.opensuse.org/repositories/home:/uibmz:/opsi:/opsi40/xUbuntu_10.04/Release.key | apt-key add -
----

Ubuntu Maverick:

[source,prompt]
----
wget -O - http://download.opensuse.org/repositories/home:/uibmz:/opsi:/opsi40/xUbuntu_10.10/Release.key | apt-key add -
----

Ubuntu Natty:

[source,prompt]
----
wget -O - http://download.opensuse.org/repositories/home:/uibmz:/opsi:/opsi40/xUbuntu_11.04/Release.key | apt-key add -
----

Ubuntu Oneiric:

[source,prompt]
----
wget -O - http://download.opensuse.org/repositories/home:/uibmz:/opsi:/opsi40/xUbuntu_11.10/Release.key | apt-key add -
----

Ubuntu Precise:

[source,prompt]
----
wget -O - http://download.opensuse.org/repositories/home:/uibmz:/opsi:/opsi40/xUbuntu_12.04/Release.key | apt-key add -
----
Debian Lenny:

[source,prompt]
----
wget -O - http://download.opensuse.org/repositories/home:/uibmz:/opsi:/opsi40/Debian_5.0/Release.key | apt-key add -
----

Debian Squeeze:

[source,prompt]
----
wget -O - http://download.opensuse.org/repositories/home:/uibmz:/opsi:/opsi40/Debian_6.0/Release.key | apt-key add -
----

Tutti: +
Verifica della riuscita dell'importazione:
[source,prompt]
----
apt-key list
----
dovrà risultare l' output: +
`pub   1024D/4DC87421 2010-07-23 [verfällt: 2012-09-30] +
uid    home:uibmz OBS Project <home:uibmz@build.opensuse.org>`

Eseguite i seguenti comandi per installare opsi sul vostro server:

[source,prompt]
----
aptitude update
aptitude safe-upgrade
aptitude remove tftpd
update-inetd --remove tftpd
aptitude install opsi-atftpd
aptitude install opsi-depotserver
aptitude install opsi-configed
----

Durante l'installazione di tftpd, vi sarà richiesta la directory per tftp. Rispondete con `/tftpboot`. Alla domanda sul supporto multicast rispondete 'no'.

Durante l'installazione di opsiconfd, vi saranno richieste informazioni per poter generare il certificato SSL.

Durante l'installazione del {opsi-server}, dovrete autorizzare il patching del file `smb.conf`. Rispondete 'yes' alla domanda. Vi sarà anche richiesta la password dell'utente 'pcpatch'. Impostate una nuova password, e ricordate questa password nel prosieguo delle seguenti sezioni del manuale.

Durante l'installazione del {opsi-server}, ignorate ogni avvertimento circa la mancanza del file `/etc/opsi/modules`.

Se volete eseguire l'interfaccia di gestione '{opsi-configed}' direttamente sul server, dovrete installare Java Runtime Environment. Per installare questi pacchetti, eseguite questi comandi:

.Debian:
Nel file `/etc/apt/sources.list`, aggiungete i rami +non-free+ e +contrib+ ai vostri repositories.

Il risultato dovra somigliare a:
[source,configfile]
----
deb http://ftp.de.debian.org/debian/ lenny main non-free contrib
deb-src http://ftp.de.debian.org/debian/ lenny main non-free contrib

deb http://security.debian.org/ lenny/updates main non-free contrib
deb-src http://security.debian.org/ lenny/updates main non-free contrib
----
NOTE: Su 'squeeze', i repositories dovranno essere 'squeeze' al posto di 'lenny'.

Per installare Java JRE eseguite:
[source,prompt]
----
aptitude update
aptitude install sun-java6-jre sun-java6-plugin
----

.Ubuntu:
Da quando Ubuntu ha tolto Sun/Oracle JRE dai suoi repositories, raccomandiamo l'uso di OpenJDK. Funzionerà bene se eseguirete opsi-configed come applicazione esterna o pagina web nel browser. Lesecuzione di opsi-configed nel browser come applet puó dare problemi con la versione 6 di OpenJDK.

.Ubuntu Lucid, Maverick, Natty: 
Per installare Java JRE eseguite:
[source,prompt]
----
aptitude update
aptitude install openjdk-6-jre icedtea-plugin
----

.Ubuntu Oneric, Precise: 
A partire da Oneric, raccomandiamo l'uso della versione 7 di OpenJDK.
Per installare la versione 7 di Java JRE eseguite:
[source,prompt]
----
aptitude update
aptitude install openjdk-7-jre icedtea-plugin
----

Supponendo che tutti i precedenti passi siano stati eseguiti con successo, supponiamo anche che la configurazione di rete sia corretta. Potete dunque continuare da <<opsi-getting-started-installation-config-backend>>

[[opsi-getting-started-installation-base-ucs]]
==== Installazione su un server Univention Corporate (UCS)

Leggete <<opsi-getting-started-introduction-software-and-configuration-preconditions>> (se non lo avete già fatto).

opsi 4.0 è testato e rilasciato per UCS 2.4, 3.0 e 3.1

É possibile installare opsi4ucs su UCS Master, Backup, oppure Slave. +
L'installazione su Memberservers non è supportata. 

Il pacchetto opsi4ucs-ldap-schema dovrà essere installato su l'UCS Master.

La seguente documentazione presuppone che opsi sarà installato su UCS Master.

Condizioni necessarie:

* Il comando
+
[source,prompt]
----
hostname -f
----
+
dovrà dare come risultato il nome pienamente qualificato contenente due punti, ad esempio 'opsidemo.dominio.locale'

* Verificate il contenuto sul {opsi-server} di `/etc/hosts` oppure il risultato di
+
[source,prompt]
----
getent hosts $(hostname -f)
----
+
Il risultato dovrebbe assomigliare all'esempio seguente: +
'192.168.1.1 server.domain.tld server' +
Il risultato ha lo schema: +
'<indirizzo-IP> <nome-host-pienamente-qualificato> <nome-host>' +
Se il risultato differisce dall'esempio sopra riportato (contiene ad esempio '127.0.0.1' o 'localhost'), oppure il nome dell'host pienamente qualificato non contiene uno o più punti, allora dovrete correggere la vostra risoluzione dei nomi (DNS oppure il file`/etc/hosts`). 

* Samba dovrà essere configurato

* mysql-server dovrà essere installato

* Se il server dovrà fungere anche da server DHCP, allora il demone dhcpd dovrà essere configurato ed operazionale

[[opsi-getting-started-installation-base-ucs-2]]
===== Installazione su un sistema UCS 2

L'installazione di opsi con il backend di default di Univention è possibile sia su un Master, che su un Backup, che su uno Slave.
Non è invece possibile su un Memberserver.  Quando il server di configurazione (opsi-confi) dovrà aggiungere un altro server di deposito (opsi-depotserver) (in differenti locazioni),
allora il server opsi-config dovrà essere installato su un UCS-Master oppure su un UCS-Backup.

Il pacchetto opsi4ucs-ldap-schema dovrà essere importato sul Master.

La documentazione seguente è usata per un'installazione su un Master.

Usate i seguenti comandi per attivare i repositories UCS sul vostro server:
[source,prompt]
----
ucr set repository/online/component/backports4opsi=yes repository/online/component/backports4opsi/server=apt.univention.de repository/online/component/backports4opsi/parts=unmaintained
----
Non necessitate l'esecuzione di questi comandi sul Master nel caso in cui desideriate solo installare lo schema opsi sul server stesso.  
Se volete installare opsi su uno Slave o su un Backup, allora i seguenti comandi saranno necessari.
(Non necessitate l'esecuzione di questi comandi sul Server nel caso in cui desideriate solo importare lo schema opsi4ucs-ldap-schema.)

Aggiungete il repository opsi nel vostro `/etc/apt/sources.list` con:
[source,prompt]
----
echo "deb http://download.opensuse.org/repositories/home:/uibmz:/opsi:/opsi40/ucs2.4 ./" >> /etc/apt/sources.list
----

Adesso importate la firma digitale del repository opsi nel vostro sistema:

[source,prompt]
----
wget -O - http://download.opensuse.org/repositories/home:/uibmz:/opsi:/opsi40/ucs2.4/Release.key | apt-key add -
----
Per installare opsi su un UCS Master, eseguite i seguenti comandi:

[source,prompt]
----
cd /tmp
wget http://download.uib.de/opsi4.0/archiv/opsi4ucs-ldap-schema_4.0.2.2-1_all.deb
dpkg -i /tmp/opsi4ucs-ldap-schema_4.0.2.2-1_all.deb
univention-install opsi4ucs
----

Durante l'installazione del {opsi-server}, ignorate ogni avvertimento circa la mancanza del file `/etc/opsi/modules`.

Per installare opsi su un UCS Backup o Slave, eseguite i seguenti comandi:

Prima di tutto sul Master eseguite i seguenti comandi:
[source,prompt]
----
cd /tmp
wget http://download.uib.de/opsi4.0/archiv/opsi4ucs-ldap-schema_4.0.2.2-1_all.deb
dpkg -i /tmp/opsi4ucs-ldap-schema_4.0.2.2-1_all.deb
----

Poi sull'altro server da installare eseguite i seguenti comandi:

[source,prompt]
----
univention-install opsi4ucs
----

Durante l'installazione del {opsi-server}, ignorate ogni avvertimento circa la mancanza del file `/etc/opsi/modules`.

Se il ruolo del server è altro che UCS Master, vi sarà richiesta l'esecuzione di uno script di giunzione dopo l'installazione.
[source,prompt]
----
univention-run-join-scripts
----

Adesso potrete trovare un link verso l'interfaccia di gestione opsi navigando verso l'URL `https://<nome-del-server>:4447/configed/`.

Solo ai membri del gruppo 'opsiadmin' è consentito l'uso dell'interfaccia di gestione opsi. Usate Univention-Admin per modificare l'appartenenza di un utente ad un gruppo. L'utente Administrator sarà aggiunto al gruppo 'opsiadmin' automaticamente durante la procedura d'installazione di opsi.

Per aumentare le performance del server LDAP, indicizzate sull'attributo opsiHostId. Per farlo eseguite sull'UCS master:
[source,prompt]
----
ucr set ldap/index/eq=$(ucr get ldap/index/eq),opsiHostId
/etc/init.d/slapd stop
slapindex
/etc/init.d/slapd start
----

Supponendo che tutti i precedenti passi siano stati eseguiti con successo, supponiamo anche che la configurazione di rete sia corretta. Potete dunque continuare da <<opsi-getting-started-installation-config-backend>>

WARNING: I comandi Unix usati nei prossimi capitoli funzionano su un sistema Debian. Dovrete cambiarli per adattarli al vostro sistema Linux.


[[opsi-getting-started-installation-base-ucs-3]]
===== Installazione su un sistema UCS 3

Il backend 'univention' non è più disponibile per i sistemi UCS 3.
Il backend di default è il backend file, che è lo stesso delle altre distribuzioni.

WARNING:  Per le ragioni sopra enunciate, non è possibile installare lo schema opsi4ucs-ldap-schema su un 
sistema UCS 3 che dovrà eseere un Master.  Specialmente quando il sistema UCS 3 deve essere installato con Samba4 (default).

L'installazione di opsi con il backend file o MySQL è possibile su Master, Backup, e Slave.

La seguente documentazione descrive un'installazione su un master con Samba4.

L'installazione classica, con l'utente: 'pcpatch' nel gruppo: 'pcpatch', non funziona in un sistema UCS 3. 
Samba4 impone restrizioni fondamentali nell'Active-Directory, tipo i nomi di gruppi con lo stesso nome  
dell'utente (cosa normale in Unix/Linux) non sono più consentiti.  Per questo motivo, un nuovo file di configurazione 
è stato introdotto:  `/etc/opsi/opsi.conf`, che controllerà come i gruppi avranno accesso a Samba-Access. Più dettagliatamente, per 
UCS 3 il gruppo 'pcpatch' verrà chiamato 'opsifileadmins'.  Questo vuol dire 
che l'utente che prima faceva parte del gruppo 'pcpatch' sotto UCS 3, ora farà parte del gruppo 'opsifileadmins'.  
Quindi l'utente che aveva i permessi per amministrare i pacchetti opsi sotto UCS3 non sarà più membro del gruppo 'pcpatch', 
ma dovrà essere membro del gruppo 'opsifileadmins'.  Questa particolarità, inizialmente si applicherà solo per UCS 3, ed è diversa
per le diverse distribuzioni e i diversi capitoli della documentazione opsi.  Furthermore, since UCS 3, the user 'pcpatch' is 
created as a fully-fledged domain user and is no longer a system user. (Also, the UID of 'pcpatch' and the GID of the 
'opsifileadmins' group will no longer be fixed at 992, but will be self-assigned in UDM, which will also 
eliminate replication problems with the User and Group).  Per maggiori informazioni circa il nuovo file di configurazione, 
fate riferimento al manuale di opsi.  

Prima che opsi possa essere installato, alcune precondizioni dovranno essere riempite.  Primo, dovrà essere assicurato che 
l'utente pcpatch sia correttamente replicato verso Samba4.  Per verificare che il connettore Univention s4-Connected abbia 
l'utente pcpatch nella sua Ignore-List, eseguite su un UCS-Master i seguenti comandi:  

[source,prompt]
----
ucr get connector/s4/mapping/user/ignorelist
----

Se vedete pcpatch nell'output, tipo:

[source,configfile]
----
root,pcpatch,ucs-s4sync
----

Il seguente comando cancellerà pcpatch dall'elenco Ignore-List:

[source,prompt]
----
ucr set connector/s4/mapping/user/ignorelist=root,ucs-s4sync
----

Una volta eseguiti questi comandi, riavviate il Connettore:

[source,prompt]
----
invoke-rc.d univention-s4-connector restart
----

Le modifiche saranno effettuate in qualche minuto.

Another problem is that a security feature of UCS does not allow anonymous reading of the Univention-LDAP.
This features is turned off for the default installation of UCS 2.4-x.  Therefore, the opsi config server has no 
possibility to know the group membership of each user.  Since no users (neither system nor domain users) 
can explicitly give reading rights, there remain two alternatives to provide reading rights from 
the Configserver:

Either completely turn off the features:
[source,prompt]
----
ucr set ldap/acl/read/anonymous=yes
----

(This will be done automatically with an upgrade from UCS 2.4-x to UCS 3.)

La seconda opzione è di disabilitare parzialmente Configserver:

[source,prompt]
----
ucr set ldap/acl/read/ips="127.0.0.1,192.168.1.1"
----

In questo caso, l'indirizzo 192.168.1.1 dovrà essere rimpiazzato con l'indirizzo IP reale del server.

Quando tutte le modifiche saranno effettuate sul server, allora slapd dovrà essere riavviato (notate che quando slapd riavvia
LDAP in un sistema in produzione, it should be done at the right time when user load is as low as possible):

[source,prompt]
----
invoke-rc.d slapd restart
----

Una volta eseguite tutte queste impostazioni, opsi4ucs puó essere installato. I repositories non più supportati di UCS 
sono importanti, e possono essere impostati con i seguenti comandi:

[source,prompt]
----
ucr set repository/online/unmaintained="yes"
----

Attivate i repository opsi4ucs:

[source,prompt]
----
echo "deb http://download.opensuse.org/repositories/home:/uibmz:/opsi:/opsi40/ucs3.0 ./" >> /etc/apt/sources.list
----

Importate la firma elettronica del repository nel vostro server con il seguente comando:

[source,prompt]
----
wget -O - http://download.opensuse.org/repositories/home:/uibmz:/opsi:/opsi40/ucs3.0/Release.key | apt-key add -
----

Per delle installazioni su un Master, dovranno essere eseguiti anche i seguenti comandi:

[source,prompt]
----
univention-install opsi4ucs
univention-install opsi-atftpd
univention-install p7zip-full cabextract
aptitude install mysql-server 
----

Durante l'installazione del {opsi-server}, ignorate ogni avvertimento circa la mancanza del file `/etc/opsi/modules`.


Se il ruolo dei sistemi da installare differisce da Master o Backup, allora i seguenti comandi eseguiranno lo script opsi4ucs Join-Script:

[source,prompt]
----
univention-run-join-scripts
----

Un link verso l'interfaccia di gestione sarà disponibile all'URL `https://<servername>:4447/`.

Per usree l'editor di configurazione di opsi, l'utente dovrà essere membro del gruppo opsiadmin.
L'appartenenza ad un gruppo puó essere modificata attraverso il comando Univention-Admin. L'utente Administrator sarà automaticamente 
aggiunto a questo gruppo durante l'installazione di opsi.

Finally the 'opsi_depot' release point must be released in UDM.  To do this set the link to 'yes' under Advanced Settings -> Advanced 
Samba Settings:  'follow symlinks'.  The same should be done for the 'opt_pcbin', so that the driver integration will
take place without problems.  If the directory '/opt/pcbin/' is found on an extra partition or hard disk, then 
the option for those links should be set to 'yes'.

Per assicurarsi che opsi stia funzionando con le giuste impostazioni, riavviate opsi attraverso i seguenti comandi:

[source,prompt]
----
opsi-setup --init-current-config
opsi-setup --set-rights
/etc/init.d/opsiconfd restart
/etc/init.d/opsipxeconfd restart
----

Dopo aver installato opsi su un sistema UCS 3, riavviate samba4 con il seguente comando:

[source,prompt]
----
/etc/init.d/samba4 restart
----

Since samba4 is a central service, restarting samba4 is not done automatically by the package, but must be done manually.  
Please note that after restarting samba, there may be a delay in access to any new releases.

Since UCS 3 this is no direct contact between the Univention LDAP backend and opsi.  Clients must first 
be created in LDAP using opsi over UDM, including all system information (in particular the MAC address).  
Deleting the LDAP clients in Univention does not mean that the client was also deleted under opsi.

Since opsi has already been run on the server, it is assumed that the network configuration is correct. +
Continue with the installation be skipping forward to <<opsi-getting-started-installation-config-backend>>.

WARNING:  I comandi Unix usati nei prossimi capitoli funzionano su un sistema Debian. Dovrete cambiarli per adattarli al vostro sistema Linux.  

[[opsi-getting-started-installation-base-ucs-listener]]
===== opsi4ucs-Listener

In an 'standard' opsi4ucs-installation Windows-Clients have to be created in UDM first and in a second step they have to be created in the opsi-configed.
With the former univention-ldap-backend, both steps had to be done, too, but only the FQDN of the client had to be filled in as HostID into the {opsi-configed}. All other informations have been transferred from LDAP. 
With opsi4ucs for UCS3 this former univention-ldap-backend isn't available any longer. So from now on, changes in the LDAP are not automatically transferred to opsi.
For example, if a client's MAC address changes in LDAP and in opsi a netboot-product is set to setup, the boot configuration would be provided with a false MAC address.

A solution for this problem provides the new opsi-listener, programmed by DIGITEC GmbH. (www.DIGITEC-SES.de) The belonging package is part of the official opsi repsitory.

Per installare questo pacchetto eseguite questo comando sul {opsi-configserver}:

[source,prompt]
----
univention-install digitec-opsi-listener
----

This command installs the opsi-listener into the UCS univention-directory-listener and restarts it.
With a standard-installation this listener works without further configuration. If a client is created or removed in LDAP, this information is sent to opsi. So with this ucs-listener there is no need to create a client in opsi in addition.
Don't forget to deploy the {opsi-client-agent} on new windows-clients as described in <<opsi-getting-started-firststeps-software-deployment-client-integration>>. The {opsi-client-agent} isn't automatically deployed with the opsi-listener.

The behavior of the opsi-listener can be controlled via UCR-variables.
Queste sono le possibili configurazioni:


[options="header"]
|=======================
| UCR-variable | Function | Default 
| digitec/opsi/listener/host/filter | LDAP search filter opsi-Host-Objekt | (objectClass=univentionWindows)
| digitec/opsi/listener/host/modify | Change an opsi-Host-Object | true
| digitec/opsi/listener/host/delete | Remove an existing opsi-Host-Object, if it is no longer there in LDAP | true
| digitec/opsi/listener/host/create | Create an opsi-Host-Objekt | true
|=======================

These variables may be edited via UCS web interface or via command line.
The following example describes how to change one of the options named above via command line and how to make it undone. (For questions about the handling via UCS web interface, look at the official UCS documentation)



Configurazione del filtro di ricerca LDAP:

[source,prompt]
----
ucr set digitec/opsi/listener/host/filter='(&(objectClass=univentionWindows)(customAttr=opsi))'
----

To make it undone and set it to default use:

[source,prompt]
----
ucr unset digitec/opsi/listener/host/filter
----

To activate these configurations, the univention-directory-listener service has to be restarted.

[source,prompt]
----
/etc/init.d/univention-directory-listener restart
----

It is possible to run a complete synchronization. This is useful e.g. if opsi is installed in an existing infrastructure. Even if the variables named above have changed a complete synchronization may make sense.
The following command starts this synchronization:

[source,prompt]
----
univention-directory-listener-ctrl resync opsilistener
----

The listener writes its messages into: `/var/log/univention/listener.log`.
The loglevel will be taken over from univention-directory-listener and cannot separately be set, what would be usual for other services in opsi. 
The loglevel is defined in the UCR-variable: `listener/debug/level`. Please notice, that the opsi-listener doesn't offers the opsi standard loglevels. It takes the loglevels from the univention-directory-listener (e.g. 4 is debug and 2 is normal output. For more loglevel information look at the official UCS-documentation).


[[opsi-getting-started-installation-base-opensuse]]
==== Installazione su openSUSE

Notate:

* opsi 4.0 è costruito e testato per openSUSE 11.3 ,12.1 , 12,2.

* Il supporto di openSUSE 11.3 è deprecato.

* A scopo di valutazione, opensides raccomanda vivamente l'uso della macchina virtuale opsi.


Leggete <<opsi-getting-started-introduction-software-and-configuration-preconditions>> (se non lo avete già fatto).

Condizioni necessarie:

* Il comando
+
[source,prompt]
----
hostname -f
----
+
dovrà dare come risultato il nome pienamente qualificato contenente due punti, ad esempio 'opsidemo.dominio.locale'

* Verificate il contenuto sul {opsi-server} di `/etc/hosts` oppure il risultato di
+
[source,prompt]
----
getent hosts $(hostname -f)
----
+
Il risultato dovrebbe assomigliare all'esempio seguente: +
'192.168.1.1 server.domain.tld server' +
Il risultato ha lo schema: +
'<IP-Number> <nome-host-pienamente-qualificato> <hostname>' +
Se il risultato differisce dall'esempio sopra riportato (contiene ad esempio '127.0.0.1' or 'localhost'), oppure il nome dell'host pienamente qualificato non contiene uno o più punti, allora dovrete correggere la vostra risoluzione dei nomi (DNS oppure il file`/etc/hosts`). 


* Samba deve essere installato e configurato.

* mysql-server deve essere installato.

* p7zip p7zip-plugins cabextract devono essere installati.

* Se il server dovrà fungere anche da server DHCP, allora il demone dhcpd dovrà essere configurato ed operazionale.

Potete usare zypper per aggiungere il repository SUSE di opsi:

*openSUSE 11.3:*

[source,prompt]
----
zypper ar –-refresh http://download.opensuse.org/repositories/home:/uibmz:/opsi:/opsi40/openSUSE_11.3/home:uibmz:opsi:opsi40.repo
zypper mr -p 50 home_uibmz_opsi_opsi40
----

*openSUSE 12.1:*

[source,prompt]
----
zypper ar –-refresh http://download.opensuse.org/repositories/home:/uibmz:/opsi:/opsi40/openSUSE_12.1/home:uibmz:opsi:opsi40.repo
zypper mr -p 50 home_uibmz_opsi_opsi40
----

*openSUSE 12.2:*

[source,prompt]
----
zypper ar –-refresh http://download.opensuse.org/repositories/home:/uibmz:/opsi:/opsi40/openSUSE_12.2/home:uibmz:opsi:opsi40.repo
zypper mr -p 50 home_uibmz_opsi_opsi40
----

Dopo l'aggiunta del repository, potrete iniziare l'installazione di opsi:

[source,prompt]
----
zypper refresh
<Accept the key>
zypper -v install opsi-depotserver opsi-configed
/etc/init.d/opsiconfd restart
/etc/init.d/opsipxeconfd restart
----

Assicuratevi che la configurazione del vostro firewall permetta l'accesso alla porta tftp (69/UDP) e alle porte opsi (4447/TCP e 4441/TCP).

Durante l'installazione del {opsi-server}, ignorate ogni avvertimento circa la mancanza del file `/etc/opsi/modules`.

Se usate yast o autoyast per aiutarvi nella configurazione della rete, probabilmente sarà aggiunta un'entrata nel vostro file `/etc/hosts` che avrà il seguente schema:
[source,configfile]
----
127.0.0.2 <fqdn> <nome-host>
----

Se volete che opsi gestisca la configurazione del server DHCP, dovrete allora correggere questa entrata per farla puntare verso l'indirizzo IP pubblico del server.

Supponendo che tutti i precedenti passi siano stati eseguiti con successo, supponiamo anche che la configurazione di rete sia corretta. Potete dunque continuare da <<opsi-getting-started-installation-config-backend>>

WARNING: I comandi Unix usati nei prossimi capitoli funzionano su un sistema Debian. Dovrete cambiarli per adattarli al vostro sistema Linux.

[[opsi-getting-started-installation-base-sles]]
==== Installazione su Suse Linux Enterprise Server (SLES)

Notate che:

* opsi 4.0 è costruito per SLES 11 SP1

* opsi su SLES è una novità.

* Non abbiamo esperienza nelle installazioni di opsi su SLES.

* Non siamo sicuri che opsi 4.0 funzionerà su altre versioni di SLES.

* A scopo di valutazione, opensides raccomanda vivamente l'uso della macchina virtuale opsi.

Leggete <<opsi-getting-started-introduction-software-and-configuration-preconditions>> (se non lo avete già fatto).

opsi 4.0 è testato e pubblicato per SLES 11 SP1.

Prime note generali:

Questi pacchetti sono testati con openSUSE 11.3. Non abbiamo informazioni sul funzionamento di opsi4.0 con altre versioni.

Condizioni necessarie:

* Il comando
+
[source,prompt]
----
hostname -f
----
+
dovrà dare come risultato il nome pienamente qualificato contenente due punti, ad esempio 'opsidemo.dominio.locale'

* Verificate il contenuto sul {opsi-server} di `/etc/hosts` oppure il risultato di
+
[source,prompt]
----
getent hosts $(hostname -f)
----
+
Il risultato dovrebbe assomigliare all'esempio seguente: +
'192.168.1.1 server.domain.tld server' +
Il risultato ha lo schema: +
'<IP-Number> <nome-host-pienamente-qualificato> <hostname>' +
Se il risultato differisce dall'esempio sopra riportato (contiene ad esempio '127.0.0.1' or 'localhost'), oppure il nome dell'host pienamente qualificato non contiene uno o più punti, allora dovrete correggere la vostra risoluzione dei nomi (DNS oppure il file`/etc/hosts`). 

* Samba deve essere configurato

* mysql-server deve essere installato

* Se il server dovrà fungere anche da server DHCP, allora il demone dhcpd dovrà essere configurato ed operazionale

Potete usare zypper per aggiunfgere il repository SLES:

[source,prompt]
----
zypper ar --refresh http://download.opensuse.org/repositories/home:/uibmz:/opsi:/opsi40/SLE_11_SP1/home:uibmz:opsi:opsi40.repo
zypper -p 100 mr home_uibmz_opsi_opsi40
----

Dopo l'aggiunta del repository, potrete cominciare l'installazione di opsi:

[source,prompt]
----
zypper refresh
<Accept the key>
zypper -v install opsi-depotserver {opsi-configed}
/etc/init.d/opsiconfd restart
/etc/init.d/opsipxeconfd restart
----

Durante l'installazione del {opsi-server}, ignorate ogni avvertimento circa la mancanza del file `/etc/opsi/modules`.

Se usate yast o autoyast per aiutarvi nella configurazione della rete, probabilmente sarà aggiunta un'entrata nel vostro file `/etc/hosts` che avrà il seguente schema:
[source,configfile]
----
127.0.0.2 <fqdn> <hostname>
----

Se volete che opsi gestisca la configurazione del server DHCP, dovrete allora correggere questa entrata per farla puntare verso l'indirizzo IP pubblico del server.

Supponendo che tutti i precedenti passi siano stati eseguiti con successo, supponiamo anche che la configurazione di rete sia corretta. Potete dunque continuare da <<opsi-getting-started-installation-config-backend>>

WARNING: I comandi Unix usati nei prossimi capitoli funzionano su un sistema Debian. Dovrete cambiarli per adattarli al vostro sistema Linux.

[[opsi-getting-started-installation-base-rhel]]
==== Installazione su RedHat Enterprise Linux (RHEL)

Notate che:

* opsi 4.0 è costruito e testato per RHEL 5 e RHEL6.

* Il supporto di RHEL 5 è deprecato.

* A scopo di valutazione, opensides raccomanda vivamente l'uso della macchina virtuale opsi.

Leggete <<opsi-getting-started-introduction-software-and-configuration-preconditions>> (se non lo avete già fatto).

Condizioni necessarie:

* Il comando
+
[source,prompt]
----
hostname -f
----
+
dovrà dare come risultato il nome pienamente qualificato contenente due punti, ad esempio 'opsidemo.dominio.locale'

* Verificate il contenuto sul {opsi-server} di `/etc/hosts` oppure il risultato di
+
[source,prompt]
----
getent hosts $(hostname -f)
----
+
Il risultato dovrebbe assomigliare all'esempio seguente: +
'192.168.1.1 server.domain.tld server' +
Il risultato ha lo schema: +
'<IP-Number> <nome-host-pienamente-qualificato> <hostname>' +
Se il risultato differisce dall'esempio sopra riportato (contiene ad esempio '127.0.0.1' or 'localhost'), oppure il nome dell'host pienamente qualificato non contiene uno o più punti, allora dovrete correggere la vostra risoluzione dei nomi (DNS oppure il file`/etc/hosts`). 

* Installate xinetd:
+
[source,prompt]
----
yum install xinted
----

* Installate samba e mysql-server:
+
[source,prompt]
----
yum install mysql-server samba
----

* Configurate samba e mysql-server:
+
[source,prompt]
----
/etc/init.d/mysqld start
mysql_secure_installation
/etc/init.d/smb start
/etc/init.d/nmb start
/etc/init.d/xinetd start
chkconfig smb on
chkconfig nmb on
chkconfig mysqld on
chkconfig xinetd on
----

* Se il server dovrà fungere anche da server DHCP, allora il demone dhcpd dovrà essere configurato, attivo e in esecuzione

Registratevi nella rete Red Hat:
[source,prompt]
----
rhn_register
----

Aggiungete i repository opsi RHEL, creando il file file `/etc/yum.repos.d/opsi40.repo`, con il contenuto seguente:

*Per RHEL 5*

[source,configfile]
----
[opsi4]
name=opsi4.0 for RHEL/ CentOS $releasever - $basearch
baseurl=http://download.opensuse.org/repositories/home:/uibmz:/opsi:/opsi40/RedHat_RHEL-5/
enabled=1
gpgcheck=1
gpgkey=http://download.opensuse.org/repositories/home:/uibmz:/opsi:/opsi40/RedHat_RHEL-5/repodata/repomd.xml.key
----

*Per RHEL 6*

[source,configfile]
----
[opsi4]
name=opsi4.0 for RHEL/ CentOS $releasever - $basearch
baseurl=http://download.opensuse.org/repositories/home:/uibmz:/opsi:/opsi40/RedHat_RHEL-6/
enabled=1
gpgcheck=1
gpgkey=http://download.opensuse.org/repositories/home:/uibmz:/opsi:/opsi40/RedHat_RHEL-6/repodata/repomd.xml.key
----

Dopo l'aggiunta del repository, potrete cominciare l'installazione di opsi:

[source,prompt]
----
yum makecache
yum install p7zip p7zip-plugins cabextract
yum remove tftp-server
yum install opsi-depotserver opsi-configed
   Importing GPG key 0x4DC87421 "home:uibmz OBS Project <home:uibmz@build.opensuse.org>" from http://download.opensuse.org/repositories/home:/uibmz:/opsi:/opsi40/RedHat_RHEL-5/repodata/repomd.xml.key
   Is this ok [y/N]: y
/etc/init.d/opsiconfd restart
/etc/init.d/opsipxeconfd restart
opsi-setup --auto-configure-samba
chkconfig opsiconfd on
chkconfig opsipxeconfd on
/etc/init.d/smb restart
/etc/init.d/nmb restart
----

Assicuratevi che le configurazioni di iptables e SE-Linux permettano l'accesso alle porte tftp (69/UDP) e alle porte opsi (4447/TCP e 4441/TCP).

Durante l'installazione, ignorate ogni eventuale avvertimento circa la mancanza del file `/etc/opsi/modules`.

Supponendo che tutti i precedenti passi siano stati eseguiti con successo, supponiamo anche che la configurazione di rete sia corretta. Potete dunque continuare da <<opsi-getting-started-installation-config-backend>>

WARNING: I comandi Unix usati nei prossimi capitoli funzionano su un sistema Debian. Dovrete cambiarli per adattarli al vostro sistema Linux.

[[opsi-getting-started-installation-base-centos]]
==== Installazione in un server CentOS

Avvertenze:

* opsi 4.0 è costruito e testato per CentOS 5 e CentOS 6.

* Il supporto per CentOS 5 è deprecato.

* A scopo di valutazione, opensides raccomanda vivamente l'uso della macchina virtuale opsi.

Leggete <<opsi-getting-started-introduction-software-and-configuration-preconditions>> (se non lo avete già fatto).

Condizioni necessarie:

* Il comando
+
[source,prompt]
----
hostname -f
----
+
dovrà dare come risultato il nome pienamente qualificato contenente due punti, ad esempio 'opsidemo.dominio.locale'

* Verificate il contenuto sul {opsi-server} di `/etc/hosts` oppure il risultato di
+
[source,prompt]
----
getent hosts $(hostname -f)
----
+
Il risultato dovrebbe assomigliare all'esempio seguente: +
'192.168.1.1 server.domain.tld server' +
Il risultato ha lo schema: +
'<IP-Number> <nome-host-pienamente-qualificato> <hostname>' +
Se il risultato differisce dall'esempio sopra riportato (contiene ad esempio '127.0.0.1' or 'localhost'), oppure il nome dell'host pienamente qualificato non contiene uno o più punti, allora dovrete correggere la vostra risoluzione dei nomi (DNS oppure il file`/etc/hosts`). 

* Installate xinetd:
+
[source,prompt]
----
yum install xinted
----

* Installate samba e mysql-server:
+
[source,prompt]
----
yum install mysql-server samba
----

* Configurate samba e mysql-server:
+
[source,prompt]
----
/etc/init.d/mysqld start
mysql_secure_installation
/etc/init.d/smb start
/etc/init.d/nmb start
/etc/init.d/xinetd start
chkconfig smb on
chkconfig nmb on
chkconfig mysqld on
chkconfig xinetd on
----

* Se il server dovrà fungere anche da server DHCP, allora il demone dhcpd dovrà essere configurato ed operazionale

Aggiungete il repository CentOS:
Create il file `/etc/yum.repos.d/opsi40.repo` con il seguente contenuto:

*CentOS 5*

[source,configfile]
----
[opsi4]
name=opsi4.0 for RHEL/ CentOS $releasever - $basearch
baseurl=http://download.opensuse.org/repositories/home:/uibmz:/opsi:/opsi40/CentOS_CentOS-5/
enabled=1
gpgcheck=1
gpgkey=http://download.opensuse.org/repositories/home:/uibmz:/opsi:/opsi40/CentOS_CentOS-5/repodata/repomd.xml.key
----

*CentOS 6*

[source,configfile]
----
[opsi4]
name=opsi4.0 for RHEL/ CentOS $releasever - $basearch
baseurl=http://download.opensuse.org/repositories/home:/uibmz:/opsi:/opsi40/CentOS_CentOS-6/
enabled=1
gpgcheck=1
gpgkey=http://download.opensuse.org/repositories/home:/uibmz:/opsi:/opsi40/CentOS_CentOS-6/repodata/repomd.xml.key
----

Dopo l'aggiunta del repository, potrete iniziare l'installazione di opsi:

[source,prompt]
----
yum makecache
yum install p7zip p7zip-plugins cabextract
yum install opsi-depotserver opsi-configed
   Importing GPG key 0x4DC87421 "home:uibmz OBS Project <home:uibmz@build.opensuse.org>" from http://download.opensuse.org/repositories/home:/uibmz:/opsi:/opsi40/CentOS_CentOS-5/repodata/repomd.xml.key
   Is this ok [y/N]: y
/etc/init.d/opsiconfd restart
/etc/init.d/opsipxeconfd restart
opsi-setup --auto-configure-samba
chkconfig opsiconfd on
chkconfig opsipxeconfd on
/etc/init.d/smb restart
/etc/init.d/nmb restart
----

Assicuratevi che la configurazione di iptables e SE-Linux vi permetta l'accesso alle porte tftp (69/UDP) e alle porte opsi (4447/TCP e 4441/TCP).

Durante l'installazione, ignorate ogni eventuale avvertimento circa la mancanza del file `/etc/opsi/modules`.

Supponendo che tutti i precedenti passi siano stati eseguiti con successo, supponiamo anche che la configurazione di rete sia corretta. Potete dunque continuare da <<opsi-getting-started-installation-config-backend>>

WARNING: I comandi Unix usati nei prossimi capitoli funzionano su un sistema Debian. Dovrete cambiarli per adattarli al vostro sistema Linux.

[[opsi-getting-started-installation-config]]
=== Configurazione e aggiornamento del {opsi-server}

[[opsi-getting-started-installation-config-proxy]]
==== Configurazione del Proxy nel file apt-configuration
Se necessario, adattate il file `/etc/apt/apt.conf` alla vostra configurazione di rete (inserite il proxy corretto, o commentate/cancellate le linee non necessarie). Potete modificare il vostro file con un programma tipo „midnight commander“:


[source,prompt]
----
mcedit /etc/apt/apt.conf
----


[[opsi-getting-started-installation-config-update]]
==== Aggiornamento del {opsi-server}
Aggiornate il {opsi-server} con i comandi:

[source,prompt]
----
aptitude update
aptitude safe-upgrade
----

TIP: Durante l'installazione, vi sarà richiesto se volete modificare il file `smb.conf`. Accettate. Se avete modificato il file `smb.conf` precedentemente, allora registrate il file di default, ed in seguito eseguite un diff di entrambi i files. Se alla domanda avete risposto precedentemente senza aver visto questo consiglio, potete comunque riconfigurare samba a partire dal terminale del {opsi-Server} con il comando seguente: 
[source,prompt]
----
opsi-setup --auto-configure-samba
----

[[opsi-getting-started-installation-config-backend]]
==== Configurazione del Backend

opsi accetta diversi backends per l'immagazzinamento dei suoi dati.

I backends più importanti sono:

* file (immagazzinamento in files)
* ldap (immagazzinamento in un annuario ldap) (in futuro è prevesta un'integrazione in FusionDirectory tramite un plugin)
* mysql (immagazzinamento in una base dati MySQL)

Oltre questi backends, vi sono altri backends 'speciali':

* opsipxeconfd (il servizio per l'avvio in pxe di opsi)
* dhcpd (usato per configurare e riavviare il servizio dhcp locale)
* jsonrpc (ridirigere tutte le chiamate verso un altro {opsi-server} attraverso JSON RPC)

Raccomandiamo di inizializzare il backend mysql (per poterlo usare ad esempio per l'inventario). A questo proposito eseguite il comando:
[source,prompt]
----
opsi-setup --configure-mysql
----

Gli screenshots seguenti, mostreranno dei parametri di esempio per le impostazioni di configurazione di MySQL:

.Dialog opsi-setup --configure-mysql
image::../images/mysql-config-input-mask.png["Dialog opsi-setup --configure-mysql",width=400]

.Output: opsi-setup --configure-mysql
image::../images/mysql-config-output.png["Output: opsi-setup --configure-mysql",width=400]

Potete accettare i valori di default per tutte le domande, eccetto per 'Database Admin Password'. La 'Database Admin Password' è 'linux123' nella macchina virtuale preinstallata, negli altri casi sarà la password da voi inserita durante l'installazione di mysql-server.

Diversi tipi di dati possono essere immagazzinati in diversi tipi di backends. Per alcune azioni (come le chiamate di metodi) più di un backend sarà coinvolto. Quindi, le diverse chiamate di metodo useranno più di un backend. Queste chiamate method-to-backend(s) sono configurate nel file `/etc/opsi/backendManager/dispatch.conf.`

Eccovi un esempio: 
[source,configfile]
----
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# =      backend dispatch configuration                                     =
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
#
# This file configures which methods are dispatched to which backends.
# Entries has to follow the form:
# <regular expression to match method name(s)> : <comma separated list of backend name(s)>
#
# Backend names have to match a backend configuration 
# file basename <backend name>.conf beneath /etc/opsi/backends.
# For every method executed on backend dispatcher 
# the first matching regular expression will be decisive.

#
# Typical configurations:
#    file, opsipxeconfd and dhcpd backend:
#       backend_.*         : file, opsipxeconfd, dhcpd
#       host_.*            : file, opsipxeconfd, dhcpd
#       productOnClient_.* : file, opsipxeconfd
#       configState_.*     : file, opsipxeconfd
#       .*                 : file
#
#    jsonrpc, opsipxeconfd and dhcpd backend:
#       backend_.*         : jsonrpc, opsipxeconfd, dhcpd
#       .*                 : jsonrpc
#
#    ldap as main backend, mysql as hw/sw invent 
#     and license management backend, opsipxeconfd and dhcpd backend:
#       backend_.*         : ldap, mysql, opsipxeconfd, dhcpd
#       host_.*            : ldap, opsipxeconfd, dhcpd
#       productOnClient_.* : ldap, opsipxeconfd
#       configState_.*     : ldap, opsipxeconfd
#       license.*          : mysql
#       softwareLicense.*  : mysql
#       audit.*            : mysql
#       .*                 : ldap
#
#     mysql and opsipxeconfd only
#       backend_.*         : mysql, opsipxeconfd
#       host_.*            : mysql, opsipxeconfd
#       productOnClient_.* : mysql, opsipxeconfd
#       configState_.*     : mysql, opsipxeconfd
#       .*                 : mysql
#
#
# Recommended standard configuration of the pre-installed VM
#    file as main backend, mysql as hw/sw invent 
#     and license management backend, opsipxeconfd and dhcpd backend:
#        backend_.*         : file, mysql, opsipxeconfd, dhcpd
#        host_.*            : file, opsipxeconfd, dhcpd
#        productOnClient_.* : file, opsipxeconfd
#        configState_.*     : file, opsipxeconfd
#        license.*          : mysql
#        softwareLicense.*  : mysql
#        audit.*            : mysql
#        .*                 : file
#
# Recommended standard configuration (dhcpd not at the opsi server)
#    file as main backend, mysql as hw/sw invent 
#     and license management backend and opsipxeconfd backend:
backend_.*         : file, mysql, opsipxeconfd
host_.*            : file, opsipxeconfd
productOnClient_.* : file, opsipxeconfd
configState_.*     : file, opsipxeconfd
license.*          : mysql
softwareLicense.*  : mysql
audit.*            : mysql
.*                 : file
----

Trovate delle spiegazioni e degli esempi all'inizio di questo file.  Questo file è formattato in modo che la prima colonna rappresenti il nome del metodo opsi da chiamare  (con il carattere joker \*), e la seconda colonna l'elenco dei backends usati da questo metodo opsi. Per determinare quali backends sono usati dal metodo opsi, l'inizio del nome del metodo è comparato con la prima colonna di questo file. L'ultima linea (.*) richiama tutte le chiamate di metodo opsi.

Il backend di default è quello basato su file.

Ora, al primo avvio (anche se non avete modificato il file contenente i backends), dovrete eseguire i seguenti comandi:

[source,prompt]
----
opsi-setup --init-current-config
opsi-setup --set-rights
/etc/init.d/opsiconfd restart
/etc/init.d/opsipxeconfd restart
----

Vi raccomandiamo l'esecuzione dei comandi di cui sopra ad ogni modifica di un file di configurazione di opsi.  

Ignorate l'avvertimento circa la mancanza del file `/etc/opsi/modules`.


Le autorizzazioni d'accesso per l'uso di questi metodi opsi sono configurate in `/etc/opsi/backendManager/acl.conf`.

[[opsi-getting-started-installation-config-passwords]]
==== Impostare la configurazione di Samba e cambiare le password
opsi richiede alcuni share condivisi Samba. Per assicurarsi che siano correttamente configurati, eseguite i seguenti comandi:

[source,prompt]
----
opsi-setup --auto-configure-samba
----


Un utente 'pcpatch' è creato nel sistema. L'utente 'pcpatch' è usato per installare i software sui PC clienti. All'utente 'pcpatch' sono concessi i privilegi sui dati presenti negli share condivisi Samba. 

All'utente 'pcpatch' deve essere fornita una password corretta. In una finestra di terminale, avviate il programma 'opsi-admin', con il quale imposterete la password di pcpatch per opsi, unix, e samba (inserite la password dopo l'esecuzione del comando 'opsi-admin'):

[source,prompt]
----
opsi-admin -d task setPcpatchPassword
----


[[opsi-getting-started-installation-config-java]]
==== Verifica della configurazione di Java (se necessario)

Se non avete bisogno di eseguire {opsi-configed} direttamente nell'interfaccia del {opsi-server}, passate al capitolo successivo.

Il {opsi-server} ed i clienti connessi, sono amministrati con il programma '{opsi-configed}'. Il programma è scritto in Java, e richiede la versione 6 di Java minimo (o la versione 1.6 nella vecchia nomenclatura).

Siccome Ubuntu ha tolto Sun/Oracle JRE dai suoi repositories, vi raccomandiamo l'uso di OpenJDK. Funzionerà benissimo se avvierete '{opsi-configed}' come applicazione o come pagina web. L'esecuzione di '{opsi-configed}' all'interno del browser come applet potrebbe produrre problemi con OpenJDK 6.

Per verificare la versione di Java eseguite:   
[source,prompt]
----
java -version
----

Per modificare la versione di Java utilizzata, affinchè sia almeno alla versione 1.6.0, usate `update-alternatives` :
[source,prompt]
----
update-alternatives --config java

There are 3 alternatives which provide `java'.
  Selection    Alternative
 -----------------------------------------------
 +    1        /usr/lib/j2se/1.4/bin/java
*     2        /usr/lib/j2sdk1.5-sun/bin/java
      3        /usr/lib/j2re1.6-sun/bin/java

Press enter to keep the default[*], or type selection number: 3
Using `/usr/lib/j2re1.6-sun/bin/java' to provide `java'.
----

[source,prompt]
----
 update-alternatives --config mozilla-javaplugin.so
There are 2 choices for the alternative mozilla-javaplugin.so (providing /usr/lib/mozilla/plugins/libjavaplugin.so).

  Selection    Path                                                        Priority   Status

* 0            /usr/lib/jvm/java-6-openjdk/jre/lib/amd64/IcedTeaPlugin.so   1061      auto mode
  1            /usr/lib/jvm/java-6-openjdk/jre/lib/amd64/IcedTeaPlugin.so   1061      manual mode
  2            /usr/lib/jvm/java-6-sun/jre/lib/amd64/libnpjp2.so            63        manual mode

Press enter to keep the current choice[*], or type selection number: 2
update-alternatives: using /usr/lib/jvm/java-6-sun/jre/lib/amd64/libnpjp2.so to provide /usr/lib/mozilla/plugins/libjavaplugin.so (mozilla-javaplugin.so) in manual mode.
----

[[opsi-getting-started-installation-config-users-and-groups]]
==== Creare degli Utenti e Amministrare i Gruppi opsiadmin / pcpatch

L'amministrazione di opsi è disponibile solo per i membri UNIX facenti paret del gruppo 'opsiadmin'.

Nell'esempio seguente, creiamo l'utente 'adminuser', nella stessa maniera che dovrete usare per creare un account per voi stessi.

Creiamo l'utente:
[source,prompt]
----
useradd -m -s /bin/bash adminuser
----

impostiamo la password unix:
[source,prompt]
----
passwd adminuser
----

e adesso la password samba:
[source,prompt]
----
smbpasswd -a adminuser
----

CAUTION: Nella passwxord non usate il carattere '§'. Renderà impossibile il login verso il servizio web di opsi.

Create e testate l'appartenenza al gruppo:
[source,prompt]
----
usermod -aG opsiadmin adminuser
getent group opsiadmin
----

il comando getent dovrebbe fornire un risultato del genere: +
'opsiadmin:!:1001:opsiconfd,adminuser'

Se volete che 'root' possa usare i comandi d'amministrazione opsi, allora 'root' dovrà essere membro del gruppo 'opsiadmin'.

Tutti gli utenti che dovranno costruire dei pacchetti opsi (usando il comando `opsi-makeproductfile`), installallare i pacchetti opsi (con il comando `opsi-package-manager`), o modificare manualmente i files di configurazione,  dovranno anch'essi appartenere al gruppo 'pcpatch' :

[source,prompt]
----
usermod -aG pcpatch adminuser
----

Testate i risultati con:  

[source,prompt]
----
grep pcpatch /etc/group
----
Il risultato dovrebbe somigliare a +
'pcpatch:x:992:adminuser' 

'root' puó fare tutto, senza appartenere esplicitamente al gruppo.

[[opsi-getting-started-installation-config-dhcp]]
=== Configurazione DHCP

Importante:

É essenziale per opsi che il DHCP fornisca gli indirizzi corretti. Per semplificarvi la configurazione, la VM {opsi-server} è fornita di un server DHCP funzionante. Nel caso in cui un server DHCP sia già disponibile, dovrà essere configurato affinchè lavori con opsi. Entrambe le alternative sono descritte di seguito.

[[opsi-getting-started-installation-config-dhcp-at-opsi]]
==== Uso del server DHCP sul {opsi-server}

.Utilizzo della VM:
Il {opsi-server} della VM dispone di un server DHCP già installato. +
Il server DHCP della VM {opsi-server} è configurato per non dare indirizzi senza che ci sia una riservazione, dunque nessun cliente non dichiarato potrà ricevere un indirizzo IP da questo server DHCP. +
Se create un cliente sul {opsi-server} usando {opsi-configed}, verrà creata anche un'entrata dhcp per lo stesso. Sarà quindi d'obbligo fornire un indizzo IP e MAC.

.Utilizzo di una vostra installazione: 
Se volete usare il {opsi-server} come server DHCP, dovrete installare i pacchetti relativi al server DHCP. Dopo l'installazione dovrete configurare il dhcp per opsi. Potrete farlo grazie al seguente comando:
[source,prompt]
----
opsi-setup --auto-configure-dhcpd
----

[[opsi-getting-started-installation-config-at-other-server]]
==== Uso di un server DHCP esterno

.Utilizzo della VM:
Se volete usare un server DHCP esterno, dovrete disinstallare il server DHCP del {opsi-server} con l'uso del seguente comando :

[source,prompt]
----
aptitude remove dhcp3-server
----

oppure

[source,prompt]
----
aptitude remove isc-dhcp-server
----

.Utilizzo di una vostra installazione: 
A partire dalla versione 4.0.3 di opsi, nessun seerver dhcp sarà installato via le dipendenze dei pacchetti opsi.

In seguito dovrete configurare il vostro server DHCP esterno, e fornirgli le informazioni sul cliente, in modo da far sapere ai clienti che adesso il {opsi-server} è il loro boot server. Se il server DHCP esterno è su Linux, avrete bisogno delle seguenti voci d'entrata per i clienti nel vostro file `/etc/dhcp3/dhcpd.conf`.

'next-server <ip del {opsi-server}>;' +
'filename "linux/pxelinux.0";'

Sostituite '<ip del {opsi-server}>' con l'indirizzo IP del {opsi-server}.

Sei invece usate un server Windows, le voci corrispondenti dovranno essere allora 'bootserver' o 'startserver' e 'bootfile' o 'startfile' ('Options 66 / 67').

Se create un cliente sul {opsi-server}, in seguito dovrete fornire solo l'indirizzo MAC e non più l'IP.

[[opsi-getting-started-installation-config-dhcp-backend]]
==== Verifica del Backend di Configurazione per le voci d'entrata DHCP

Dipendentemente dall'uso o meno del server DHCP del {opsi-server}, dovrete configurare il {opsi-server}.

Il file `/etc/opsi/backendManager/dispatch.conf` definisce la corrispondenza tra il metodo opsi utilizzato ed il/i suo/i rispettivo/i backend/s (file, ldap, mysql).

Le linee con 'backend_.*' e 'host_.*' configurano come saranno gestite le modifiche. Se usate il server dhcp del {opsi-server}, il backend dhcpd dovrà essere aggiunto qui. +
L'entrata concordante è (ad esempio):
[source,configfile]
----
backend_.*         : file, opsipxeconfd, dhcpd
host_.*            : file, opsipxeconfd, dhcpd
----

Se non è il DHCP locale ad essere utilizzato, allora il backend dhcpd non è necessario:
[source,configfile]
----
backend_.*         : file, opsipxeconfd
host_.*            : file, opsipxeconfd
----

Dopo aver adottato la corretta configurazione del backend, dovrete eseguire:

[source,prompt]
----
opsi-setup --init-current-config
opsi-setup --set-rights
/etc/init.d/opsiconfd restart
/etc/init.d/opsipxeconfd restart
----

Ignorate ogni avvertimento circa la mancanza del file `/etc/opsi/modules`.


[[opsi-getting-started-installation-config-nameresolution]]
=== Configurare il modo per il {opsi-server} di recuperare gli indirizzi IP dei Clienti

Nel metodo di default della distribuzione di software con opsi, solo il cliente deve conoscere come contattare il {opsi-server}.

Altrimenti, se volete usare una delle funzionalità 'push' di opsi (come l'invio di messagi al cliente, o l'avvio di eventi 'on_demand', o ricevere informazioni sulla sessione, o avviare il controllo a distanza del software), il server necessiterà sapere dove recuperare l'indirizzo IP del cliente.

Il modo impiegato dal server opsiper fare ció, dipende dalla vostra configurazione DNS/DHCP. Ci sono un sacco di possibili configurazioni. Di seguito vi mostriamo 2 differenti esempi di configurazione:

. I clienti non sono conosciuti dal servizio DNS (solo da netbios), e ricevono un indirizzo IP dinamico e frequentemente modificato dal servizio DHCP.

. Il DNS fornisce sempre l'indirizzo IP corretto del cliente.

Per configurare il {opsi-server} alla vostra situazione, dovrete modificare i parametri seguenti:

* La voce +resolveHostAddress+ nel file `/etc/opsi/backends/hostcontrol.conf` +
Questa opzione controlla in che modo la risoluzione dei nomi del {opsi-client} è principalmente fornita dalla base dati di opsi oppure dalla risoluzione dei nomi del sistema operativo del '{opsi-server}'. +
Se questa opzione è +True+ (vera), il '{opsi-server}' tenterà in primis di ricevere l'indirizzo IP di un '{opsi-client}' usando la risoluzione dei nomi del sistema operativo (DNS, /etc/hosts). Se fallisce, sarà utilizzata la base dati del server opsi. +
Per usare in primis la risoluzione dei nomi attraverso la base dati del server, dovrete impostare questa opzione su +False+ (falso).

* La voce +update ip+ nel file `/etc/opsi/opsiconfd.conf` +
Se questa voce è a 'yes' (si), allora il {opsi-server} aggiornerà la sua propria base dati d'indirizzi IP ogni volta che il {opsi-server} riceve l'indirizzo IP di un cliente (ad esempio ad ogni interazione del cliente con il servizio web). Il default è 'no'.

Se il vostro caso corrisponde all'esempio 1, allora dovrete probabilmente impostare +resolveHostAddress+ a 'False' e +update ip+ a 'yes'.

Se il vostro caso corrisponde all'esempio 2, allora la migliore scelta è d'impostare +resolveHostAddress+ a 'True' e +update ip+ a 'no'.

Dovrete decidere voi stessi della confgiurazione che meglio rifletta la vostra situazione.

Ongi volta che modificate qualcosa nella configurazione di opsi, ricordatevi di ricaricare opsiconfd:

[source,prompt]
----
/etc/init.d/opsiconfd reload
----



[[opsi-getting-started-installation-config-modules]]
=== Installare e verificare il File d'Attivazione

Anche se opsi è open source, ci sono alcuni componenti che non sono al momento gratuiti. Questi componenti sono sviluppati in un progetto cofinanziato da vari partner. Questo vuol dire che fino al momento in cui i costi completi dello sviluppo non sono recuperati da parte dei cofinanziatori, i moduli potranno essere usati solo dai cofinanziatori stessi oppure per dei propositi di valutazione. Quando i costi di sviluppo saranno recuperati, il modulo sarà accessibile a tutti gratuitamente. Per controllare l'uso di questo componente finchè diventi gratuito, c'è un file di attivazione `/etc/opsi/modules`, che è protetto da qualsiasi modifica attraverso una firma elettronica. Se questo file d'attivazione non è presente sul {opsi-server}, allora saranno solo le parti open source di opsi a funzionare.

Se desiderate valutare i moduli opsi, potrete ottenere un file d'attivazione temporanea contattando 'opsi@opensides.be'. 

Se diventate cofinanziatori di un modulo, otterete un file di attivazione illimitato per il modulo stesso. Copiate il file in `/etc/opsi` essendo root. 

In seguito eseguite il comando:

[source,prompt]
----
opsi-setup --set-rights /etc/opsi
----

Potrete verificare lo stato dell'attivazione con uno dei seguenti metodi:

Usando '{opsi-configed}', selezionate la voce di menu Aiuto/Moduli-opsi, che mostrerà una finestra con lo stato dell'attivazione.

Oppure da linea di comando, potrete digitare `opsi-admin` con il metodo 'backend_info'. (Attenzione: Non date in nessun caso il file d'attivazione oppure l'output di questo comando a una persona terza senza aver prima cancellato la firma elettronica).
[source,prompt]
----
opsi-admin -d method backend_info
----

Esempio:
[source,configfile]
----
{
"opsiVersion" : "4.0.1",
"modules" :
          {
          "customer" : "uib GmbH",
          "dynamic_depot" : true,
          "vista" : true,
          "treeview" : true,
          "license_management" : true,
          "swondemand" : true,
          "expires" : "2011-04-30",
          "valid" : true,
          "multiplex" : true,
          "signature" : "THIS-IS-NOT-A-VALID-SIGNATURE",
          "vpn" : true,
          "mysql_backend" : true,
          "high_availability" : true
          }
}
----

Notate che avete bisogno del file 'modules' solo per i componenti aggiuntivi ancora in cofinanziamento, non per l'uso generale del core di opsi.

[[opsi-getting-started-installation-config-get-essential-products]]
=== Installazione dei Prodotti Minimi di opsi

Una nuova e importante funzionalità di opsi 4.0 è la possibilità di aggiornare i prodotti opsi a partire da un repository configurato, attraverso l'uso del comando `opsi-product-updater`. Questo programma compara la versione dei prodotti installata localmente con la versione disponibile sul repository, ed esegue l'aggiornamento se necessario. É anche possibile installare nuovi prodotti usando `opsi-product-updater`. Il file di configurazione di `opsi-product-updater` è `/etc/opsi/{opsi-product}-updater.conf`. Il repository di default è http://download.uib.de/opsi4.0/products, e puó essere ustao per installare ogni nuovo prodotto essenziale di opsi.

`opsi-product-updater` possiede le seguenti funzionalità di base:

* *autoInstall*: + 
Installa tutti i prodotti disponibili a partire dal repository configurato.

* *autoUpdate*: + 
Aggiorna i prodotti dal repository se sul {opsi-server} è presente una vecchia versione.

* *autoSetup*: 
Dopo l'aggiornamento dei prodotti, modifica l'azione richiesta impostandola su 'setup' per tutti i clienti che hanno questo prodotto installato.

Per ulteriori dettagli circa questa funzionalità, riferitevi al manuale opsi.

Potete dunque adesso scaricare e installare i prodotti opsi con il comando:
[source,prompt]
----
opsi-product-updater -i -vv
----

Se `opsi-product-updater` fallisce, sarà probabilmente necessario aggiungere la necessaria configurazione del proxy nel file di configurazione:
[source,configfile]
----
[repository_uib]
proxy =
----

Notate che i prodotti per l'installazione dei sistemi ooperativi tipo winxppro e win7 non sono pronti ad eseere eseguiti dopo la loro installazione. Dovranno essere completati fornendo i file d'installazione contenuti nei corrispondenti supporti d'installazione(CD o DVD, vedere <<opsi-getting-started-firststeps-osinstall-fill-base-packages>>).

[[opsi-getting-started-installation-config-configed]]
=== Avvio dell'interfaccia di configurazione {opsi-configed}

Opsi fornisce un interfaccia di configurazione facile all'uso attraverso l'applicazione {opsi-configed}.

Ci sono differenti modi per avviare {opsi-configed}:

* Inserendo il seguente indirizzo in un browser (dappertutto nella rete) https://<opsi-server>:4447/configed, accederete alla pagina web che ingloba {opsi-configed}. Una versione di java al minimo 1.6 è richiesta.

* Attraverso un click destro del mouse sul desktop dell'interfaccia del server aprirete un menu contestuale, dove potrete scegliere „opsi config editor“. In questo caso un ambiente runtime Java deve essere installato sul server.

* L'editor di configurazione è anche parte degli opsi-adminutils, e potrà essere copiato su qualsiasi cliente.

Quando {opsi-configed} è avviato la prima volta, apparirà una finestra di connessione. Connettetevi con un account facente parte del gruppo opsiadmin (sulla VM opsi potrete usare root finchè non avrete creato un nuovo account).

L'interfaccia {opsi-configed} è pe rla maggior parte auto istruttiva. In ogni caso, di seguito alcuni consigli:
Ogni modifica dovrà essere registrata prima di poter essere applicata. La registrazione delle modifiche è possibile attraverso un click sul segno di spunta.  Per vedere le modifiche che sono state eseguite o in corso d'esecuzione, dovrete ricaricare i dati, attraverso il bottone in alto a sinistra contente due frecce che si inseguono.   L'aggiornamento dei dati è possibile anche cliccando il tasto del del mouse e scegliendo 'ricarica' dal menu contestuale.

Potrete trovare dettagli ulteriori nel manuale opsi. 


[[opsi-getting-started-installation-config-nagios]]
=== Configurazione del connettore opsi Nagios sulla macchina virtuale opsidemo 

Il connettore opsi Nagios è già pronto all'uso nella VM opsidemo.

I pacchetti opsi-Nagios necessari saranno installati allo stesso tempo che i pacchetti Nagios-Server.  I successivi passi
sono necessari per avviare  il connettore:

* Per attivare il connettore opsi Nagios dovrete avere il file 'modules' installato nel vostro server.  Questo dato che 
il connettore è ancora nella sua fase di cofinanziamento.  Se avete bisogno di valutare il connettore opsi Nagios, 
andate a leggere questa sezione <<opsi-getting-started-installation-config-modules>>

* impostate il nome e la password per l'account Nagios
[source,prompt]
----
opsi-admin -d method user_setCredentials monitoring monitoring123
----
* inserite il nome dell'account Nagios nel file /etc/opsi/opsiconfd.conf (il valore di default è: monitoring user = monitoring),  
e riavviate opsiconfd affinchè la nuova configurazione sia presa in conto. 
* inserite l'account dell'utente Nagios e la sua password nel file /etc/nagios3/resource.cfg:
[source,configfile]
----
# Sets $USER2$ to be the path to event handlers
$USER2$=monitoring
$USER3$=monitoring123
----
*  C'è un template nella VM per Service-Configuration, nel quale ogni verifica individuale preconfigurata e 
il nome HostGroup sono stati disattivati mettendoli come linee di commento. Per poter usare il servizio Nagios, dovrete 
decommentare "hostgroup_name" nel file /etc/nagios3/conf.d/opsi/opsiservice.cfg:
[source,configfile]
----
define service{
        use                             opsi-service-tmpl
        hostgroup_name                  opsi-server
        service_description             opsi-diskusage
        check_command                   check_opsidiskusage
        check_interval                  1

----

* Per assicurarsi che la configurazione di Nagios sia corretta, fate appello alla verifica "pre-flight" a partire dalla linea di comando:
[source,prompt]
----
nagios3 -v /etc/nagios3/nagios.cfg
----

* Se non ci sono errori nel risultato, riavviate Nagios:  
[source,prompt]
----
/etc/init.d/nagios3 reload
 * Reloading nagios3 monitoring daemon configuration files nagios3                        [ OK ]
----

Maggiori informazioni circa il significato delle diverse Verifiche possono essere trovate nel capitolo sul connettore Nagios del manuale opsi.  Questo 
capitolo descrive il significato basico di ogni verifica sul {opsi-server}, regardless of whether or not the opsi-VMWare 
machine is being used.

La pagina Web Nagios è accessibile all'indirizzo https://{opsi-server}/nagios3,  Nome-utente: nagiosadmin, Password: linux123


[[opsi-getting-started-firststeps]]
== Primi passi

Il passo successivo all'installazione del {opsi-server} è l'integrazione dei clienti. Abbiamo 2 possibilità:

* Integrazione dei Clienti Windows esistenti
* Installazione di un nuovo sistema operativo Windows usando opsi 

Entrambi i modi sono illustrati di seguito, e siete liberi di scegliere quale modo provare per primo.

[[opsi-getting-started-online-videos]]
=== Video Online

Ci sono dei video sul sito web di OPSI, che mostrano:  

* Un'introduzione ad OPSI
* Come installare un sistema operativo 
* Come gestire i clienti con opsi:  Connettore Nagios
* Come costruire e distribuire del software usando degli script opsi Winst

L'indirizzo per i video (al momento soltanto in inglese) è:
http://www.opsi.org/en/opsi-video

[[opsi-getting-started-firststeps-software-deployment]]
=== Distribuzione del Software

[[opsi-getting-started-firststeps-software-deployment-client-integration]]
==== Integrazione dei Clienti esistenti

Per integrare ad opsi dei clienti Windows esistenti, il prodotto opsi-client-agent dovrà essere installato sui clienti stessi. Ci sono modi diversi di farlo, che sono descritti di seguito. Dopo l'installazione, potrete vedere il nuovo cliente nella lista dei clienti in {opsi-configed} dopo aver selezionato il tab 'Clienti'.

[[opsi-getting-started-firststeps-software-deployment-client-integration-service-setup]]
===== Integrazione con service_setup.cmd

Questo metodo è la prima scelta per installazioni su singoli computer.  service_setup.cmd puó essere anche usato a scopo di riparazione. Per installazioni di massa, passate al paragrafo successivo.

. connettersi sul cliente Windows con un account che possegga i privilegi d'amministratore
. montare, su una lettera di drive, la cartella condivisa sul server opsi a \\<opsiserver>\opsi_depot
. nel drive montato in precedenza, eseguite lo script opsi-client-agent\service_setup.cmd
. lo script si connette al servizio web opsi per poter creare le informazioni del cliente da inviare al server e riceverne la pckey. La connessione richiede la combinazione utente/password registrata nel file config.ini. Se la connessione npon riesce, una nuova finestra di connessione apparirà, dando la possibilità all'utente di reinserire URL, utente e password. L'utente fornito nella finestra di connessione dovrà essere membro del gruppo 'opsiadmin'.

WARNING: Durante l'installazione, il cliente sarà riavviato senza alcuna notifica!

[[opsi-getting-started-firststeps-software-deployment-client-integration-opsi-deploy]]
===== Integrazione con opsi-deploy-client-agent

Lo script `opsi-deploy-client-agent` installa l'agente opsi sul cliente direttamente a partire dal {opsi-server}. I prerequisiti per i clienti sono:

* uno share C$ aperto
* uno share admin$ aperto
* un account d'amministratore

Lo script crea le informazioni del cliente a partire dal server e poi ne copia i file d'installazione, le informazioni di configurazione, e la pckey sul cliente.  Dopo la copia di queste informazioni necessarie, `opsi-deploy-client-agent` avvia l'installazione sul cliente.

Con lo script `opsi-deploy-client-agent` potrete effettuare delle installazioni di molteplici clienti, raggruppati in una lista. Lo script stesso si trova in `/opt/pcbin/install/opsi-client-agent`.

Eseguite questo script con i privilegi di 'root'.

[source,prompt]
----
bonifax:/home/uib/oertel# cd /opt/pcbin/install/opsi-client-agent
bonifax:/opt/pcbin/install/opsi-client-agent# ./opsi-deploy-client-agent --help

Usage: opsi-deploy-client-agent [options] [host]...
Deploy opsi client agent to the specified clients.
The c$ and admin$ must be accessible on every client.
Simple File Sharing (Folder Options) should be disabled on the Windows machine.
Options:
    -h        show this help text
    -V        show version information
    -v        increase verbosity (can be used multiple times)
    -u        username for authentication (default: Administrator)
              example for a domain account: -u "<DOMAIN>\\<username>"
    -p        password for authentication
    -c        use fqdn instead of hostname for smb/cifs connection
    -x        try installation even if ping fails
    -r        reboot computer after installation
    -s        shutdown computer after installation
    -o        start opsiclientd service after installation
    -f        file containing list of clients (one hostname per line)
    -S        skip known opsi clients
    -t        number of concurrent deployment threads (default: 1)

----

[[opsi-getting-started-firststeps-software-deployment-product-tests]]
==== Prime Prove

[[opsi-getting-started-firststeps-software-deployment-product-tests-inventory]]
===== Inventario Hardware e Software con i Prodotti hwaudit e swaudit

Usando '{opsi-configed}', scegliere il cliente cliccando sul tab 'Clienti', metterà '{opsi-configed}' in modalità 'Configurazione dei clienti'.

se non lo avete già fatto, ricaricate i dati by cliccando sul bottone di ricarica nell'angolo in alto a sinistra dell'interfaccia '{opsi-configed}' (o usate il menu 'File').

Passate al tab 'Configurazione prodotti', cercate il prodotto che eseguirà l'audit del cliente ('hwaudit' e/o 'swaudit'). Nella colonna 'Azione richiesta' selezionate l'azione 'setup' con un click sinistro del mouse. Infine, registrate la nuova azione con un click sul bottone con il segno di spunta in alto (oppure con un click destro sul mouse e selezionando 'salva').

Riavviate il cliente, i programmi 'hwaudit' e/o 'swaudit' saranno avviati automaticamente. Sul cliente sarà effettuata una scansione dell'hardware e/o del software che genererà un'inventario che sarà in seguito inviato al server.

Per vedere i cambiamenti nellinterfaccia di gestione '{opsi-configed}', selezionate un ricaricamento dei dati con il bottone in alto oppure con un click destro del mouse.  Potrete vedere l'aggiornamento dei dati dopo aver selezionato il tab 'Inventario Hardware' e 'Inventario Software'.


[[opsi-getting-started-firststeps-software-deployment-product-tests-hwinvent]]
===== Inventario Hardware con il prodotto Netboot hwinvent

Usando '{opsi-configed}', scegliere il cliente premendo sul tab 'Clienti', metterà '{opsi-configed}' in modalità 'Configurazione dei clienti'.

se non lo avete già fatto, ricaricate i dati by cliccando sul bottone di ricarica nell'angolo in alto a sinistra dell'interfaccia '{opsi-configed}' (o usate il menu 'File').

Passate al tab 'Prodotti Netboot', cercate il prodotto 'hwinvent'. Nella colonna 'Azione richiesta' selezionate l'azione 'setup'. Infine, registrate la nuova azione con un click sul bottone con il segno di spunta in alto (oppure con un click destro sul mouse e selezionando 'salva').

Riavviate il cliente (attraverso il PXE), e la bootimage con 'hwinvent' verrà avviata automaticamente. Inizialmente, il cliente è riavviato usando un immagine di boot Linux, che in seguito effettua una scansione dell'hardware e invia i risultati al server.

Per vedere i risultati nell'interfaccia di gestione '{opsi-configed}', selezionate un ricaricamento dei dati con il bottone in alto oppure con un click destro del mouse.  Potrete vedere l'aggiornamento dei dati dopo aver selezionato il tab 'Inventario Hardware'.

[[opsi-getting-started-firststeps-osinstall]]
=== Installazione di un Nuovo Sistema Operativo Windows usando opsi 

[[opsi-getting-started-firststeps-osinstall-create-client-configed]]
==== Creazione di un Nuovo Cliente usando l'Interfaccia di Gestione di opsi

You need a client (with a minimum of 512 MB RAM) that is able to boot per PXE over the network. For an initial test, we suggest you download a corresponding vmware-image at download.uib.de (http://download.uib.de/vmware_pxeclient.zip). The advantage of vmware (virtual hardware) is that is supports the standard drivers from windows.

Now you have to create a client in the opsi system. Start the installation with either a) the {opsi-configed}, or b) the command line.

.Graphic frontend of {opsi-configed}:
Using '{opsi-configed}', choose the client by pressing the tab 'Clients', which puts '{opsi-configed}' in the mode 'Configuration of clients'.

From the menu, choose 'OpsiClient/Create new opsi client'.  Then enter a description of the client:

* IP-name, 
* DNS (Internet) domain, 
* client description, 
* IP-number (which is only requested by the internal DHCP) and 
* MAC-address  

The client will be created in the opsi database.  If the client is configured as a PXE-client, then it will also be configured in the DHCP on the {opsi-server}.

.Command line opsi-admin

An opsi client may also be created at the command line:

[source,prompt]
----
opsi-admin -d method host_createOpsiClient <client-id> [opsiHostKey] [description] [notes] [hardwareAddress] [ipAddress] [inventoryNumber] [oneTimePassword] [created] [lastSeen]
----

e.g.:

[source,prompt]
----
opsi-admin -d method host_createOpsiClient testclient.domain.local "null" "Testclient" "" 00:0c:29:12:34:56 192.168.0.5
----

To see all created clients, in '{opsi-configed}' choose the client by pressing the tab 'Clients', which puts '{opsi-configed}' in the mode 'Configuration of clients', and reload the data by pressing F5 or use the context menu.

[[opsi-getting-started-firststeps-osinstall-tests-hwinvent]]
==== Hardware Inventory with the Netboot Product hwinvent

Using '{opsi-configed}', choose the client by pressing the tab 'Clients', which puts '{opsi-configed}' in the mode 'Configuration of clients'.

se non lo avete già fatto, reload all the data by clicking the reload button at the top left corner of the '{opsi-configed}' interface (or use the 'File' menu).

Switch to the tab 'Netboot products', look for the line that has 'hwinvent'. Go to the column 'Requested Action', and select the action 'setup'. Finally, save the new action with a click on the checkmark button at the top (or by right clicking the mouse and selecting 'save').

Now reboot the client (over PXE), and the bootimage with 'hwinvent' should start automatically. At first, the client reboots using the Linux boot image, and then it scans the hardware and sends the results back to the server.

To see the changes at the '{opsi-configed}' management interface, select reload with the button at the top or with the mouse.  You may see the update after selecting the tab 'Hardware information'.

[[opsi-getting-started-firststeps-osinstall-create-client-bootcd]]
==== Create a New Client using the opsi-client-bootcd

At the opsi download site you will find ISO images of the opsi-client-bootcd in http://download.uib.de/opsi4.0/. Just download the newest image and burn it to cdrom. Boot your computer from this CD. You should see the following image:

.Start image opsi-client-boot-cd
image::../images/opsi-client-boot-cd.png["Screenshot: Start image opsi-client-boot-cd",width=400]

Choose 'Start opsi (English)'. After a while, the following screen will appear. If your DHCP server gives IP-numbers to unknown DHCP clients, then most fields will already have valid values. You have to complete the missing data. You must at least give the hostname.

.bootimage/boot-cd configuration screen
image::../images/boot-cd-config.png["Screenshot: bootimage/boot-cd configuration screen",width=400]

Confirm with 'OK'.

.bootimage / boot-cd:  Choose how to create Client
image::../images/boot-cd-select.png["Screenshot: bootimage / boot-cd:  Choose how to create Client",width=200]

Choose 'Admin account'. This means that the client should register himself at the {opsi-server}. This procedure must be authorized.

.bootimage / boot-cd: Authenticate as member of {opsi-admin} group
image::../images/boot-cd-authent.png["Screenshot: bootimage / boot-cd: Authenticate as member of {opsi-admin} group",width=400]

Therefore you will get a login window, where you should authenticate yourself as a member of the {opsi-admin} group. If the authorization is successful, then the client gives its data to the server, at which point the client will be created at the server. In the next step, the server provides a list of Netboot products to the client.

.bootimage / boot-cd:: netboot product list
image::../images/boot-cd-product.png["Screenshot: bootimage / boot-cd:: netboot product list",width=200]

Now you may choose the operating system that you would like to install (or e.g. hwinvent for testing).

[[opsi-getting-started-firststeps-osinstall-fill-base-packages]]
==== OS-Installation: Complete the Base Package for Windows

The base package includes only the files that are used for automatic system software installation – but not the system software itself.

If you want to test the automatic system software installation of Windows XP or Windows 7, you have to complete these packages.

[[opsi-getting-started-firststeps-osinstall-fill-base-packages-nt5]]
==== NT 5 family: XP, 2003

[[opsi-getting-started-firststeps-osinstall-fill-base-packages-nt5-i386]]
===== Copy the i368 Directory

a) copy the `i386`-directory of an installation-CD from Microsoft Win2003/WinXP Professional into the directory `/opt/pcbin/install/win2003` or `/opt/pcbin/install/winxppro` directory. When the copying is complete, you have to change the rights of the `i386/` directory. Go to the `winxppro` or `win2003` directory, and then enter the following command: 
[source,prompt]
----
opsi-setup --set-rights i386
----

The files may also be copied over the network. Therefore, you have to connect to the {opsi-server} share 'opt_pcbin' as user 'pcpatch'. You will find the corresponding directory under `install\winxppro` or `install\win2003`.

[[opsi-getting-started-firststeps-osinstall-fill-base-packages-nt6]]
==== NT 6 family: Vista / 2008 / Win7

Because these installations only start from a Win32/Win64 environment, we must build a PE-Image which is used to start up the installation.

'"To install a 64-bit version of Windows you must use a 64-bit version of Windows PE. Likewise, to install a 32-bit version of Windows, you must use a 32-bit version of Windows PE."' +
http://technet.microsoft.com/en-us/library/cc766093.aspx

Therefore you need the Windows Automated Installation Kit (Windows AIK): +
http://www.microsoft.com/downloads/details.aspx?displaylang=en&FamilyID=696dd665-9f76-4177-a811-39c26d3b3b34

This site provides you with an ISO file, which may then be burnt to a CD or mounted by a virtual machine. The content of this CD must be installed in an OS mentioned in the previous system requirements.

[[opsi-getting-started-firststeps-osinstall-fill-base-packages-nt6-pe]]
===== Creating a PE

The console commands for creating Windows PE in 32- or 64-bit versions are nearly the same, except for the *<ARCH>* entries below. These have to be set to either *x86* , *amd64* or *ia64*.

* Creating an environment: +
Start a terminal as administrator (Start => Programs => Accessories => right click on „Command Prompt“ => Run as… => Administrator) and run the following command:
[source,prompt]
----
"%ProgramFiles%\Windows AIK\Tools\PETools\copype.cmd" <ARCH> C:\winpe
----

* Prepare Image for opsi: +
Start a terminal as administrator, and run the following command (in one line):
[source,prompt]
----
"%ProgramFiles%\Windows AIK\Tools\<ARCH>\imagex.exe" /mountrw "C:\winpe\winpe.wim" 1 "C:\winpe\mount"
----

* enter the next command (again in one line):
[source,prompt]
----
echo c:\opsi\startnet.cmd > "C:\winpe\mount\Windows\System32\startnet.cmd"
----
(Remark: The file `startnet.cmd` will be created by the opsi linux boot image after the script `setup.py` is executed. The `startnet.cmd` contains the call to wpeinit.)

* enter the next command (again in one line):
[source,prompt]
----
"%ProgramFiles%\Windows AIK\Tools\<ARCH>\imagex.exe" /commit /unmount "C:\winpe\mount"
----

* enter the next command (again in one line):
[source,prompt]
----
move "C:\winpe\winpe.wim" "C:\winpe\ISO\sources\boot.wim"
----

* Copy the directory `C:\winpe\ISO` (with the target name `winpe`) to `/opt/pcbin/install/win7/` (or `/opt/pcbin/install/win2008`). +
Adjust the file access rights by entering(e.g.): 
[source,prompt]
----
opsi-setup --set-rights /opt/pcbin/install/win7/winpe
----

[[opsi-getting-started-firststeps-osinstall-fill-base-packages-nt6-extendpe]]
===== Extending a PE

In some cases it is useful to extend a PE. Especially when using Dell-Hardware. Dell provides special network and storage drivers for use in PE. These instructions only work with Windows 7. (Windows Vista does not inherit the needed DISM- Deployment Image Servicing and Management.) These instructions assume that you have already completed the chapter "Creating a PE".

NOTE: The Windows Automated Installation Kit is not needed for following instructions.

The first step is to download Dell-PE-drivers from the Dell-Website. For Windows 7, you will need the WINPE 3.0 Drivers from Dell. The downloaded CAB-File must be extracted to localdisk. This can be done with 7zip or the command-line-tool Expand.exe. For simplicity, we recommend creating a directory called "dell-driver" on the localdisk, and then extracting the CAB-File into this directory.

* Use dism to scan the image, in order to determine the required index number. Normally a PE-image is a one-image-file, so you can use the index 1, but it is better to check at first. Start a terminal as administrator (Start => Programs => Accessories => right click on „Command Prompt“ => Run as… => Administrator) and run the following command:
[source,prompt]
----
dism /Get-WimInfo /WimFile:C:\winpe\ISO\sources\boot.wim
----

In the output of this command, you can see which images are included in the image file.

* The next command mounts the image for modification:
[source,prompt]
----
dism /Mount-Wim /WimFile:C:\winpe\ISO\sources\boot.wim /index:1 /MountDir:c:\winpe\mount
----

* To integrate the extracted drivers into the mounted image, you need to execute this command:
[source,prompt]
----
dism /Image:C:\winpe\mount /Add-Driver /Driver:c:\dell-driver\winpe\x64 /Recurse
----

If the architecture is 32Bit, the `x64` must be replaced with `x86`. The Driver-CAB from Dell inherits drivers for both architectures.

NOTE: If only one driver has to be integrated, then leave out the option `/Recurse`, and point directly to the driver-inf-File instead of the driver-directory. With the option `/ForceUnsigned` it is possible to integrate unsigned drivers to the image.

* For the changes to be committed, the images must be unmounted:
[source,prompt]
----
dism /Unmount-Wim /MountDir:c:\winpe\mount /Commit
----

* Copy the directory `C:\winpe\ISO` with the target name `winpe` to `/opt/pcbin/install/win7/` (or `/opt/pcbin/install/win2008`). +
Adjust the file access rights by entering(e.g.): 
[source,prompt]
----
opsi-setup --set-rights /opt/pcbin/install/win7/winpe
----

[[opsi-getting-started-firststeps-osinstall-fill-base-packages-nt6-unattend]]
===== unattend.xml

The control file for the unattended installation is the XML file `unattend.xml`, which you can find under `/opt/pcbin/install/win7/custom`. If you would like to make any modifications to this file, then do it in this directory and not in the opsi directory.

The file `unattend.xml` that comes with the opsi package, contains the activating of the Administrator account with the password 'nt123'.

Documentation of the file `unattend.xml` can be found (after the installing WAIK) in the directory `c:\Program Files\Windows\Waik\docs\chms`.

[[opsi-getting-started-firststeps-osinstall-fill-base-packages-nt6-drivers]]
===== Driver Integration

The integration of drivers works in the usual way described in the opsi manual: Place your driver directories in `/opt/pcbin/install/win7/drivers/drivers` and then call the `create_driver_links.py` script.

Please keep in mind that Vista/Win7 only accept signed drivers. Therefore, if you want to use driver packs like the driver packs from driverpacks.net, be sure to use only the Vista/Win7 versions.

[[opsi-getting-started-firststeps-osinstall-fill-base-packages-nt6-installfiles]]
===== Providing the Installation Files

Copy the complete installation DVD to +
`/opt/pcbin/install/win7/installfiles`
Adjust the file access rights by entering:
[source,prompt]
----
opsi-setup --set-rights /opt/pcbin/install/win7/installfiles
----

[[opsi-getting-started-firststeps-osinstall-fill-base-packages-nt6-logfiles]]
===== Installation Log files 

* `c:\Windows\Panther\setupact.log`: +
Logs until the end of setup phase 4 (running under WinPE) 

* `c:\Windows\Panther\setupact.err`: +
Error log including the end of setup phase 4 (running under WinPE) 

* `c:\Windows\Panther\UnattendGC\setupact.log`: +
Logs a specialize phase 

* `c:\Windows\Panther\UnattendGC\setupact.err`: +
Error log for a specialize phase 

* `c:\Windows\System32\Winevt\Logs\*` 

* `c:\Windows\ntbtlog.txt` (only when the startup protocol is activated) 

[[opsi-getting-started-firststeps-osinstall-productkey]]
==== Windows Product Key

If you are using the opsi license management module, then you may administrate your Windows product keys using the license management software. Information on how to do this can be found in the opsi manual.

If you don't want to use the license management module, then the product key can simply be made up using the product properties.

While creating a client, you can use the opsi management interface to enter the product key:

* choose a client
* change to the tab 'nettboot products'
* select the product (e.g. winxppro)
* change to the product property 'productkey' (on the right lower corner of the opsi management interface)
* type in your key
* leave the input field and save the changes

A other possibility is to use the command line. While working with an opsiserver, you can read and/or change the server defaults.
To read the server default use (you may need to modify the productId and you must change '<opsiserver.domain.local>' with the fqdn from your opsiserver. Be sure that you enter the commands in one line):
[source,prompt]
----
opsi-admin -d method productPropertyState_getObjects [] '{"productId":"winxppro","objectId":"opsiserver.domain.local"}'
----

The easiest way to modify the defaults, is to modify the file, and then update the objects with the modified file.

The first step would be to view the contents of an actual configuration file (you may need to modify the productId and you must change '<opsiserver.domain.local>' with the fqdn from your opsiserver. Be sure that you enter the commands in one line):
[source,prompt]
----
opsi-admin -d method productPropertyState_getObjects [] '{"productId":"winxppro","objectId":"opsiserver.domain.local"}' > /tmp/property_config.json
----

The second step would be to modify the file `/tmp/property_config.json`, and change the entries and values. Finally, you must update the objects using this modified file (enter this command in one line):
[source,prompt]
----
opsi-admin -d method productPropertyState_updateObjects < /tmp/property_config.json
----

You can check that the modifications were successful using the following command (you may need to modify the productId and you must change '<opsiserver.domain.local>' with the fqdn from your opsiserver. Be sure that you enter the commands in one line):
[source,prompt]
----
opsi-admin -d method productPropertyState_getObjects [] '{"productId":"winxppro","objectId":"opsiserver.domain.local"}'
----

[[opsi-getting-started-firststeps-osinstall-start]]
==== Start the Windows Installation

To start a windows installation:

* choose a client

* change to the tab 'nettboot products'

* select the product (e.g. winxppro)

* set the 'action request' to 'setup'

* save the changes by clicking the red check mark (which then changes to green)

Now the client should load the opsi linux bootimage via the network and start it. Before the Windows installation starts, you have to confirm.


[[opsi-getting-started-firststeps-osinstall-structure]]
==== Structure of the Unattended Installation Products

This chapter describes the following products

* win2k
* winxppro
* winvista
* win2003
* win2008
* winvista-x64
* win2008-x64
* win7
* win7-x64
* win2008r2

[[opsi-getting-started-firststeps-osinstall-structure-dirs]]
===== Directory Tree Overview

[source,configfile]
----
<productid>-
           |-i386/				NT5 only: Installations files
           |-installfiles/			NT6 only: Installations files
           |-winpe/				NT6 only
           |-opsi/				scripts and templates by opsi.org
           |  |-$oem$/					NT5 only: $oem$ according to MS
           |  |-posinst.d/				scripts after OS-install by opsi.org
           |  !-unattend.(txt/xml).template	  	Template by opsi.org
           |-custom/				scripts and templates by customer
           |  |-$oem$/					NT5 only: $oem$ according to MS by customer
           |  |-posinst.d/				scripts after OS-install by customer
           |  !-unattend.(txt/xml)			unattend.txt by customer
           |-drivers/				drivers directory
           |  |-drivers/			drivers directory
           |  |-pciids/				symbolic links to drivers
           |  |-vendors/			symbolic links to drivers
           |  |-classes/			symbolic links to drivers
           |  |-usbids/				symbolic links to drivers
           |  |-hdaudioids/			symbolic links to drivers
           |  |-pci.ids				PCI-IDs DB
           |  !-usb.ids				USB-IDs DB
           |-setup.py				installation script
           |-<productid>_<version>.control	meta data (only for info)
           |-<productid>.files		    	file list (created automatically)
           |-create_driver_links.py		driver management script
           |-show_drivers.py			driver management script
           |-download_driver_pack.py		driver management script
           !-extract_driver_pack.py		driver management script
----

[[opsi-getting-started-firststeps-osinstall-structure-files]]
===== File Descriptions

* `setup.py` +
This is the installation script which is executed by the boot image.

* `<productid>_<version>.control` +
Contains the meta data of the product as prepared from the package maintainer. These files are here for information purposes only. There will be no effect after changing these files.

* `<productid>.files` +
This file is created automatically and should not be changed.

* `create_driver_links.py` +
`show_drivers.py` +
`download_driver_pack.py` +
`extract_driver_pack.py` +
These are scripts for the simplified driver integration, which is described in its own chapter (<<opsi-getting-started-firststeps-osinstall-driverintegration,"Simplified driver integration for the automatic OS installation">>).

[[opsi-getting-started-firststeps-osinstall-structure-i386]]
===== Directory i386 / installfiles / winpe

* `i386` +
This directory contains the installation file from the `i386` directory on the windows installation CD (NT5 = Windows 2000 to XP).
It is possible to have multiple i386 directories (`i386` , `i386_en` , `i386_xxx`). The 'i386' directory that is used for the installation is controlled by the product property 'i386_dir'.

* `installfiles` +
This directory contains the all files from the windows installation DVD (NT6 = Windows Vista and above).

* `winpe` +
For Windows Vista, this directory contains a bootable winpe image among other files.

[[opsi-getting-started-firststeps-osinstall-structure-opsicustom]]
===== Directories opsi and custom

Both directories contain scripts and configuration files for the OS installation. During the installation process, the directories work together in such a way as to prioritize the use of the files in the custom directories.

The opsi directory contains files and templates that are maintained by opsi.org, and maybe replaced during the next update. So it is not a good idea to make specific (or customized) changes to these files in this location. Please use the custom directory for this purpose, because that directory is not subject to any changes by opsi.org.

The subdirectory `postinst.d` contains scripts which are executed after the OS installation is completed by the `posinst.cmd` program. These scripts are needed to install the opsi-client-agent, among other software. The scripts will be executed in alphabetic order. To make it easier to see the order in which the scripts will be executed, the name always starts with a 2 digit number (`10_dhcp.cmd`). If you want to make extensions, then please do so in the custom/postinst.d directory and start numbers between the 10, 20, 30 ,... (e.g. `13_myscript.cmd`). The starting numbers 10, 20, 30,... are reserved for use by opsi org / uib gmbh. The script `99_cleanup.cmd` is the last one and initiate a reboot.

[[opsi-getting-started-firststeps-osinstall-structure-drivers]]
===== Directory drivers

This directory is used for the integration of drivers and is described in the following chapter.

[[opsi-getting-started-firststeps-osinstall-driverintegration]]
==== Simplified Driver Integration during the Automatic Windows Installation

If a group of computers have drivers that are not part of the Windows default installation, it is best to put these computers into a pool and integrate their drivers during installation time.

Opsi supports the automatic integration of drivers into the installation, and therefore simplifies driver deployment.  In this case, the drivers simply need to be place into the correct directory.  When the installation script is called it searches through these directories and creates a catalog. The boot image automatically uses this catalog to embed the correct drivers.  Opsi supports the automatic installation of standard drivers, USB drivers, HD audio drivers, and disk controller drivers (text-mode drivers).

In order for a driver to be immediately installed with the Windows installation, you must place the drivers on the server in a specific format.  The drivers must be placed in the drivers directory, with the format '\*.inf' , where the file name describes the driver for the Windows setup program. The drivers in the 'setup.exe' or '*.zip' are not used here. If you have a computer that already has the drivers installed, then you can extract the appropriate drivers using the program 'double driver' (http://www.boozet.org/dd.htm).

There are many levels of driver integration:  

* General driver packages

* Preferred drivers that belong to your hardware, but are not assigned to specific computers

* Drivers that will be manually assigned to computers

* Drivers that will be automatically assigned to the computers using the fields <vendor>/<model>

Below is a detailed discussion about how to include each of these drivers

[[opsi-getting-started-firststeps-osinstall-driverintegration-generaldrivers]]
===== General Driver Packages

When the hardware configuration is very heterogeneous, then it may make sense to work with general driver packages. +
General drivers can be placed under `./drivers/drivers`. +
You can find example general driver packages here http://driverpacks.net/ . +
Download the appropriate driver package to a temporary directory, and then unpack the driver package using the opsi script extract_driver_pack.py as such:
[source,prompt]
----
./extract_driver_pack.py <path to the temporary directory with the compressed driverpacks>
----
This will unpack and store the drivers in the directory `./drivers/drivers/`. +
It may be the case that the drivers found by opsi in this location do not necessarily work with your hardware. +
For the drivers which are found in `./drivers/drivers/`, the driver will be matched to the corresponding hardware using the PCI IDs (i.e. USB- or HD_Audio-ID) in the description file, and then integrated into the Windows setup as needed.

[[opsi-getting-started-firststeps-osinstall-driverintegration-preferred]]
===== Preferred Drivers

In the case that you have to support special hardware, and you can find the additional drivers from the manufacturers, then use the following procedure to include them in the installation. +
Place the additional drivers in their own directory under: +
`./drivers/drivers/preferred`. +
(the naming and depth of the directory structure is not important).  Drivers that are found in the directory `./drivers/drivers/preferred` will be integrated into the Windows setup, assuming that opsi finds a suitable match to the drive hardware based off of the PCI IDs (i.e. USB or HD_Audo-ID) in the description file. +
Problems can occur when the same PCI ID of the drivers is found in `preferred`. In this case, a direct mapping of the drivers to the devices is needed. 

[[opsi-getting-started-firststeps-osinstall-driverintegration-additional]]
===== Drivers that will be Manually Assigned to Computers

When installing additional drivers based on the PCI-IDs or USB-IDs, they should be installed under the directory `./drivers/drivers/additional` (where name and depth of the directory structure is not important).  You can map one or more drivers to a client using the Product-Property 'additional_drivers' and a list of driver directories under `./drivers/drivers/additional`.  The directories specified by 'additional_drivers' are searched recursively until all drivers are found.  This method can be used to make a specific directory based on the client type (i.e. dell-optiplex-815).

When a driver is found under the drivers directory that is specified by 'additional_drivers' and also matches the PCI identifier, then other drivers in `drivers/preferred` or `drivers/` will not be used.  Therefore the drivers under 'additional_drivers' add functionality that would not have been found with the normal drivers.  Also, the drivers that are manually bound to a client using 'additional_drivers' receive priority over other drivers ('additional_drivers' can be thought of as 'super-preferred').

[[opsi-getting-started-firststeps-osinstall-driverintegration-byaudit]]
===== Drivers that will be Automatically Assigned to the Computers using the Fields <vendor>/<model>

The previously described mechanisms that directly map drivers to devices is automated since the 4.0.2 Release 2 of opsi.  Opsi will search the directory `./drivers/drivers/additional/byAudit` for a director name that matches the field 'Vendor' that was given in the Hardware Inventory. This 'Vendor' directory will be search for a 'Model' directory that corresponds to what is seen in Hardware Inventory.   If this directory is found, then it will be manually assigned to the product property 'additional_drivers'. +
The directory name 'byAudit' is case sensitive.  The directory names for 'Vendor' and 'Model' are not case sensitive ('Dell' and 'dELL' are treated the same way).

[[opsi-getting-started-firststeps-osinstall-driverintegration-structure]]
===== Structure of the Driver Directory and Driver Files:

[source,configfile]
----
/opt/
  !-pcbin/
     !-install/
        !-winxppro/
           !-drivers
              |-classes/		(Links to driver device classes)
              |-hdaudioids/		(Links to HD-Audio drivers)
              |-pciids/			(Links to PCI-ID drivers)
              |-pci.ids			(PCI database)
              |-usbids/			(Links to USB-ID drivers)
              |-usb.ids			(USB database)
              |-vendors/		(Links to manufacturer drivers)
              !-drivers			(place for general driver packages)
                 |-additional/		(manually assigned drivers)
                    |-byAudit/		Model-specific drivers that 
                       |-<vendor>		will be assigned by 
                          |-<model>		the Hardware Inventory
                 |-buildin/		(data for the i386 version)
                 |-preferred/		(certified drivers)
                 |-exclude/		(excluded drivers)
                 !-mydriverpacks/	(example driver packages)
----

[[opsi-getting-started-firststeps-osinstall-driverintegration-processing]]
===== Processing of the Different Levels of Driver Integration 

The top priority is given to drivers that are found using the property 'additional_drivers' or using the inventory data in `./drivers/drivers/additional/byAudit`.  Tests will be made during driver integration to determine which drivers are already installed on which hardware devices. When a driver is not found for a device, the following method will be used to search for drivers.

For devices that have drivers that were not listed in 'additional_drivers', opsi will search for, and integrate, an appropriate driver based off of the PCI ID (ie. USB-, HD_Audio-ID).  

'Integration' of drivers means the following:

* The driver will be copied to the local hard drive at `c:\drv\<num>`.

* The Windows Setup will search for the driver sub-directory under `c:\drv\` , where the sub-directory name will be read from the unattended file in the root 'unattend' sub-directory.

[[opsi-getting-started-firststeps-osinstall-driverintegration-drivercheck]]
===== Driver Addition and Checking

After any changes in the directory `./drivers/drivers` have been made, call the following command from the Netboot Products root directory in order to set the permissions:
[source,prompt]
----
opsi-setup --set-rights ./drivers
----

Then call the script `./create_driver_links.py`.  The script searches through the directories under './drivers/drivers' and generates a list of links using PCI-IDs, USB-IDs, HD-Audio-IDs that enables hardware to know about drivers.  The script will use the drivers in the preferred directories.   

The script `setup.py` examines the hardware of the installed computers and identifies the necessary drivers.  These will be copied to the disk and the file unattended.txt will be patched.  The script `create_driver_links.py` examines the NT5 products one at a time in the 'i386' tree and extracts the .inf files of the necessary drivers into 'windows_builtin'.  If you make a change to the i386 directory tree (i.e. after installing a service pack), then delete that directory and run `create_driver_links.py` again.  The recognized drivers for NT6 products are found in WinPE at 'windows_builtin'. 

With the following command, one can see the hardware inventory for a client:
[source,prompt]
----
./show_drivers.py <clientname>
----
When this is command is called, it will show a selection for which drivers would be chosen for installation to the Bootimage via PCI-IDs, USB-IDs, HD-Audio-IDs, and 'additional_drivers' (or 'byAudit'),  and which hardware still has no driver. 

Use the output of `show_drivers.py` to check and see which drivers need to be installed.

It could be that manufacturers include different drivers for different operating systems (i.e. Vista vs. Win7) or different configurations (ie. SATA vs. SATA RAID).  The `create_driver_links.py` cannot make this distinction.  If you think the wrong driver has been installed, then move the driver to the 'drivers/exclude' directory and then call `create_driver_links.py` again.  Drivers in the directory 'drivers/exclude' are not used during the integration.

Example output of a `show_drivers.py` call:

[source,opsifiles]
----
./show_drivers.py pcdummy

PCI-Devices
   [(Standardsystemgeräte), PCI Standard-PCI-zu-PCI-Brücke]
      No driver - device directory  /opt/pcbin/install/winxppro/drivers/pciids/1022/9602 not found
   [ATI Technologies Inc., Rage Fury Pro (Microsoft Corporation)]
      Using build-in windows driver
   [(Standard-IDE-ATA/ATAPI-Controller), Standard-Zweikanal-PCI-IDE-Controller]
      /opt/pcbin/install/winxppro/drivers/drivers/D/M/N/123
   [Realtek Semiconductor Corp., Realtek RTL8168C(P)/8111C(P) PCI-E Gigabit Ethernet NIC]
      /opt/pcbin/install/winxppro/drivers/drivers/preferred/realtek_gigabit_net_8111_8168b
   [IEEE 1394 OHCI-konformer Hostcontroller-Hersteller, OHCI-konformer IEEE 1394-Hostcontroller]
      No driver - device directory '/opt/pcbin/install/winxppro/drivers/pciids/197B/2380' not found
   [Advanced Micro Devices, Inc., AMD AHCI Compatible RAID Controller]
      /opt/pcbin/install/winxppro/drivers/drivers/preferred/ati_raid_sb7xx
   [(Standard-USB-Hostcontroller), Standard OpenHCD USB-Hostcontroller]
      No driver - device directory '/opt/pcbin/install/winxppro/drivers/pciids/1002/4397' not found
   [ATI Technologies Inc, ATI SMBus]
      /opt/pcbin/install/winxppro/drivers/drivers/preferred/ati_smbus

USB-Devices
   [(Standard-USB-Hostcontroller), USB-Verbundgerät]
      /opt/pcbin/install/winxppro/drivers/drivers/preferred/brother_844x_pGerb
   [Microsoft, USB-Druckerunterstützung]
      /opt/pcbin/install/winxppro/drivers/drivers/preferred/brother_844x_pGerb

Additional drivers
   [ati_hdaudio_azalia]
     /opt/pcbin/install/winxppro/drivers/drivers/additional/ati_hdaudio_azalia
----

Example with  'additional_drivers':
[source,opsifiles]
----
 ./show_drivers.py e5800
Manually selected drivers (additional)
   [hp_e5800]
      [/opt/pcbin/install/win7-x64-professional-msdn/drivers/drivers/additional/hp_e5800/sp52852/Vista64/HDXHPAI3.inf]
      [/opt/pcbin/install/win7-x64-professional-msdn/drivers/drivers/additional/hp_e5800/sp52852/Vista64/HDX861A.inf]
      [/opt/pcbin/install/win7-x64-professional-msdn/drivers/drivers/additional/hp_e5800/sp52852/Vista64/HDXHPAI1.inf]
      [/opt/pcbin/install/win7-x64-professional-msdn/drivers/drivers/additional/hp_e5800/sp52852/Vista64/HDXCPC.inf]
      [/opt/pcbin/install/win7-x64-professional-msdn/drivers/drivers/additional/hp_e5800/sp52852/Vista64/HDXHPAI2.inf]
      [/opt/pcbin/install/win7-x64-professional-msdn/drivers/drivers/additional/hp_e5800/sp50134/autorun.inf]
      [/opt/pcbin/install/win7-x64-professional-msdn/drivers/drivers/additional/hp_e5800/sp50134/ibxHDMI/IntcDAud.inf]
      [/opt/pcbin/install/win7-x64-professional-msdn/drivers/drivers/additional/hp_e5800/sp50134/HDMI/IntcHdmi.inf]
      [/opt/pcbin/install/win7-x64-professional-msdn/drivers/drivers/additional/hp_e5800/sp50134/Graphics/kit24890.inf]
      [/opt/pcbin/install/win7-x64-professional-msdn/drivers/drivers/additional/hp_e5800/sp50134/IIPS/Impcd.inf]
      [/opt/pcbin/install/win7-x64-professional-msdn/drivers/drivers/additional/hp_e5800/sp54284/Realtek 64bit/hp64win7.inf]

PCI-Devices
   [8086:27C8]  Intel : Intel(R) N10/ICH7 Family USB Universal Host Controller - 27C8
      /opt/pcbin/install/win7-x64-professional-msdn/drivers/drivers/preferred/R293337/WIN7
   [8086:27DA]  Intel : Intel(R) N10/ICH7 Family SMBus Controller - 27DA
      /opt/pcbin/install/win7-x64-professional-msdn/drivers/drivers/preferred/R293337/WIN7
   [8086:27C9]  Intel : Intel(R) N10/ICH7 Family USB Universal Host Controller - 27C9
      /opt/pcbin/install/win7-x64-professional-msdn/drivers/drivers/preferred/R293337/WIN7
   [8086:27DF]  Intel : Intel(R) ICH7 Family Ultra ATA Storage Controllers - 27DF
      /opt/pcbin/install/win7-x64-professional-msdn/drivers/drivers/preferred/R293337/WIN7
   [8086:27CA]  Intel : Intel(R) N10/ICH7 Family USB Universal Host Controller - 27CA
      /opt/pcbin/install/win7-x64-professional-msdn/drivers/drivers/preferred/R293337/WIN7
   [8086:2E30]  Intel : Intel(R) 4 Series Chipset Processor to I/O Controller - 2E30
      /opt/pcbin/install/win7-x64-professional-msdn/drivers/drivers/not_preferred/x64/C/Intel/1
   [8086:27CB]  Intel : Intel(R) N10/ICH7 Family USB Universal Host Controller - 27CB
      /opt/pcbin/install/win7-x64-professional-msdn/drivers/drivers/preferred/R293337/WIN7
   [8086:2E32]  Intel Corporation : Intel(R) G41 Express Chipset
      Manually selected [hp_e5800] /opt/pcbin/install/win7-x64-professional-msdn/drivers/drivers/additional/hp_e5800/sp50134/Graphics
   [8086:27CC]  Intel : Intel(R) N10/ICH7 Family USB2 Enhanced Host Controller - 27CC
      /opt/pcbin/install/win7-x64-professional-msdn/drivers/drivers/preferred/R293337/WIN7
   [8086:244E]  Intel : Intel(R) 82801 PCI-Brücke - 244E
      Using build-in windows driver
      This driver will not be integrated, because same device already integrated in: '/opt/pcbin/install/win7-x64-professional-msdn/drivers/drivers/not_preferred/x64/C/Intel/1/dmi_pci.inf'
   [8086:27D0]  Intel : Intel(R) N10/ICH7 Family PCI Express Root Port - 27D0
      /opt/pcbin/install/win7-x64-professional-msdn/drivers/drivers/preferred/R293337/WIN7
   [8086:27B8]  Intel : Intel(R) ICH7 Family LPC Interface Controller - 27B8
      /opt/pcbin/install/win7-x64-professional-msdn/drivers/drivers/preferred/R293337/WIN7
   [8086:27D2]  Intel : Intel(R) N10/ICH7 Family PCI Express Root Port - 27D2
      /opt/pcbin/install/win7-x64-professional-msdn/drivers/drivers/preferred/R293337/WIN7
   [8086:27C0]  Intel : Intel(R) N10/ICH7 Family Serial ATA Storage Controller - 27C0
      /opt/pcbin/install/win7-x64-professional-msdn/drivers/drivers/preferred/R293337/WIN7
   [8086:27D8]  Microsoft : High Definition Audio-Controller
      No driver - device directory '/opt/pcbin/install/win7-x64-professional-msdn/drivers/pciids/8086/27D8' not found
   [10EC:8136]  Realtek : Realtek RTL8102E/RTL8103E-Familie-PCI-E-Fast-Ethernet-NIC (NDIS 6.20)
      Manually selected [hp_e5800] /opt/pcbin/install/win7-x64-professional-msdn/drivers/drivers/additional/hp_e5800/sp54284/Realtek 64bit

USB-Devices
   [0461:0010]  (Standardsystemgeräte) : USB-Eingabegerät
      No driver - vendor directory '/opt/pcbin/install/win7-x64-professional-msdn/drivers/usbids/0461' not found
   [0461:4D20]  (Standardsystemgeräte) : USB-Eingabegerät
      No driver - vendor directory '/opt/pcbin/install/win7-x64-professional-msdn/drivers/usbids/0461' not found
   [058F:6366]  Kompatibles USB-Speichergerät : USB-Massenspeichergerät
      No driver - vendor directory '/opt/pcbin/install/win7-x64-professional-msdn/drivers/usbids/058F' not found
   [0461:0010]  (Standard-USB-Hostcontroller) : USB-Verbundgerät
      No driver - vendor directory '/opt/pcbin/install/win7-x64-professional-msdn/drivers/usbids/0461' not found

HD-Audio-Devices
   [10EC:0662]  Realtek High Definition Audio
      Manually selected [hp_e5800] /opt/pcbin/install/win7-x64-professional-msdn/drivers/drivers/additional/hp_e5800/sp52852/Vista64
----

Example with 'byAudit':
[source,opsifiles]
----
 ./show_drivers.py pctry5detlef
Manually selected drivers (additional)
   [/opt/pcbin/install/win7-x64-professional-msdn/drivers/drivers/additional/byAudit/nvidia/awrdacpi]
      [/opt/pcbin/install/win7-x64-professional-msdn/drivers/drivers/additional/byAudit/nvidia/awrdacpi/pctry5detlef/Display/Radeon X300-X550-X1050 Series Secondary (Microsoft Corporation - WDDM)/atiilhag.inf]
      [/opt/pcbin/install/win7-x64-professional-msdn/drivers/drivers/additional/byAudit/nvidia/awrdacpi/pctry5detlef/Display/Radeon X300-X550-X1050 Series (Microsoft Corporation - WDDM)/atiilhag.inf]
      [/opt/pcbin/install/win7-x64-professional-msdn/drivers/drivers/additional/byAudit/nvidia/awrdacpi/pctry5detlef/MEDIA/Realtek AC'97 Audio/oem21.inf]

PCI-Devices
   [1002:5B70]  ATI Technologies Inc. : Radeon X300/X550/X1050 Series Secondary (Microsoft Corporation - WDDM)
      Manually selected [/opt/pcbin/install/win7-x64-professional-msdn/drivers/drivers/additional/byAudit/nvidia/awrdacpi] /opt/pcbin/install/win7-x64-professional-msdn/drivers/drivers/additional/byAudit/nvidia/awrdacpi/pctry5detlef/Display/Radeon X300-X550-X1050 Series Secondary (Microsoft Corporation - WDDM)
      Multiple selected [/opt/pcbin/install/win7-x64-professional-msdn/drivers/drivers/additional/byAudit/nvidia/awrdacpi] /opt/pcbin/install/win7-x64-professional-msdn/drivers/drivers/additional/byAudit/nvidia/awrdacpi/pctry5detlef/Display/Radeon X300-X550-X1050 Series (Microsoft Corporation - WDDM)
   [10DE:0053]  (Standard-IDE-ATA/ATAPI-Controller) : Standard-Zweikanal-PCI-IDE-Controller
      No driver - device directory '/opt/pcbin/install/win7-x64-professional-msdn/drivers/pciids/10DE/0053' not found
   [10DE:005D]  (Standardsystemgeräte) : PCI Standard-PCI-zu-PCI-Brücke
      No driver - device directory '/opt/pcbin/install/win7-x64-professional-msdn/drivers/pciids/10DE/005D' not found
   [1022:1100]  AMD : AMD HyperTransport(tm)-Konfiguration
      Using build-in windows driver
   [10DE:0054]  (Standard-IDE-ATA/ATAPI-Controller) : Standard-Zweikanal-PCI-IDE-Controller
      /opt/pcbin/install/win7-x64-professional-msdn/drivers/drivers/preferred/evb_potsdam_fsc__esprimo_p625/FTS_NVIDIASATAAHCIDRIVERVISTA64V103042MCP78__1026963/NVIDIA_SATA_AHCI_DRIVER_Vista64_V10.3.0.42_MCP78 (textmode capable)
   [1022:1101]  AMD : AMD-Adresszuordnungskonfiguration
      Using build-in windows driver
   [10DE:0055]  (Standard-IDE-ATA/ATAPI-Controller) : Standard-Zweikanal-PCI-IDE-Controller
      /opt/pcbin/install/win7-x64-professional-msdn/drivers/drivers/preferred/evb_potsdam_fsc__esprimo_p625/FTS_NVIDIASATAAHCIDRIVERVISTA64V103042MCP78__1026963/NVIDIA_SATA_AHCI_DRIVER_Vista64_V10.3.0.42_MCP78 (textmode capable)
   [1022:1102]  AMD : AMD DRAM und HyperTransport(tm)-Nachverfolgungsmoduskonfiguration
      Using build-in windows driver
   [10DE:0057]  NVIDIA : NVIDIA nForce-Netzwerkcontroller
      Using build-in windows driver
   [1022:1103]  AMD : Sonstige AMD-Konfiguration
      Using build-in windows driver
   [10DE:0059]  Realtek : Realtek AC'97 Audio
      Manually selected [/opt/pcbin/install/win7-x64-professional-msdn/drivers/drivers/additional/byAudit/nvidia/awrdacpi] /opt/pcbin/install/win7-x64-professional-msdn/drivers/drivers/additional/byAudit/nvidia/awrdacpi/pctry5detlef/MEDIA/Realtek AC'97 Audio
   [10DE:005E]  NVIDIA : NVIDIA nForce4 HyperTransport-Brücke
      /opt/pcbin/install/win7-x64-professional-msdn/drivers/drivers/preferred/ga-ma78-pcbon4/chipset_win7-64/SMBUS
   [104C:8025]  Texas Instruments : OHCI-konformer Texas Instruments 1394-Hostcontroller
      No driver - device directory '/opt/pcbin/install/win7-x64-professional-msdn/drivers/pciids/104C/8025' not found
   [10DE:005A]  (Standard-USB-Hostcontroller) : Standard OpenHCD USB-Hostcontroller
      No driver - device directory '/opt/pcbin/install/win7-x64-professional-msdn/drivers/pciids/10DE/005A' not found
   [10DE:0050]  (Standardsystemgeräte) : PCI Standard-ISA-Brücke
      No driver - device directory '/opt/pcbin/install/win7-x64-professional-msdn/drivers/pciids/10DE/0050' not found
   [10DE:005B]  (Standard-USB-Hostcontroller) : Standard PCI-zu-USB erweiterter Hostcontroller
      No driver - device directory '/opt/pcbin/install/win7-x64-professional-msdn/drivers/pciids/10DE/005B' not found
   [1002:5B60]  ATI Technologies Inc. : Radeon X300/X550/X1050 Series (Microsoft Corporation - WDDM)
      Manually selected [/opt/pcbin/install/win7-x64-professional-msdn/drivers/drivers/additional/byAudit/nvidia/awrdacpi] /opt/pcbin/install/win7-x64-professional-msdn/drivers/drivers/additional/byAudit/nvidia/awrdacpi/pctry5detlef/Display/Radeon X300-X550-X1050 Series Secondary (Microsoft Corporation - WDDM)
      Multiple selected [/opt/pcbin/install/win7-x64-professional-msdn/drivers/drivers/additional/byAudit/nvidia/awrdacpi] /opt/pcbin/install/win7-x64-professional-msdn/drivers/drivers/additional/byAudit/nvidia/awrdacpi/pctry5detlef/Display/Radeon X300-X550-X1050 Series (Microsoft Corporation - WDDM)
   [10DE:0052]  NVIDIA : NVIDIA nForce PCI-Systemverwaltung
      Using build-in windows driver
   [10DE:005C]  (Standardsystemgeräte) : PCI Standard-PCI-zu-PCI-Brücke
      No driver - device directory '/opt/pcbin/install/win7-x64-professional-msdn/drivers/pciids/10DE/005C' not found

USB-Devices
   [1241:1111]  (Standardsystemgeräte) : USB-Eingabegerät
      No driver - vendor directory '/opt/pcbin/install/win7-x64-professional-msdn/drivers/usbids/1241' not found

HD-Audio-Devices
   No devices installed
----

TIPS::
* Directory names `NDIS1` are Vista-Drivers ; `NDIS2` are Win7-Driver

* Some chip driver contain description files, which perform a lot without actually providing drivers.  An example would be the `cougar.inf` or `ibexahci.inf` from Intel. If such a 'Pseudo-Driver' were to be placed in 'additional_drivers' (or 'byAudit'), then the other drivers in the 'preferred' subdirectory may be excluded.  It is better to move these directories to the 'preferred' subdirectory.     

* SATA drivers and SATA-RAID drivers refer to the same PCI ID.  A SATA-RAID driver will not function with a single-disk system.

* Check the output of `./show_drivers` carefully !

[[opsi-getting-started-softwintegration]]
== Integration of New Software Packets into the opsi Server

The primary objective of software distribution is to accomplish automatic software installation without user interaction. Software installation and user activity should be strictly separated. In most cases, the installation process requires administrative privileges which the user usually doesn't have. So the installation process has to be done independently from the user. This way, the user can neither interfere nor be affected by the software installation process. 

In order to do this, you have to write a script for the script driven installer, which is called an '{opsi-winst}' script.

[[opsi-getting-started-softwintegration-tutorial]]
=== A Brief Tutorial: How to write a {opsi-winst} Script

[[opsi-getting-started-softwintegration-tutorial-introduction]]
==== Introduction

This tutorial merely helps you to get started with opsi. It is no replacement for professional training (which you may order through uib), or even studying the complete opsi manuals.

The opsi Manuals can be found at: +
http://download.uib.de/docu
http://download.uib.de/opsi_stable/docu

Important Notes:
Winst reference card and Winst manual

Wiki (Scripte, Tips, Links): +
http://www.opsi.org/opsi_wiki/OpsiWikiPage

Support Forum: +
http://forum.opsi.org

Training and Support: +
Get Training by uib gmbh or an opsi partner: +
http://www.opsi.org/support/

[[opsi-getting-started-softwintegration-tutorial-general]]
==== Methods of Non-Interactive Installation

Regardless of whether or not you are using opsi or another management product, there are three different ways to install software without user interaction: 

. *Unattended or Silent Installation* +
The original setup programs from the software manufacturer can be executed from within a {opsi-winst} script in 'silent' or 'unattended' mode. It depends on whether or not the program supports a silent installation mode. A special case of this method is the unattended installation of MSI packages.

. *Interactive Setup with recorded Answers* +
The answers provided by the opsi administrator, while running the manufacturer's setup program during a pre-installation, can be automatically saved using the free tool 'Autoit' or Autohotkey. That requires providing an autoIt script for unattended installation

. *Analyze and Repackaging* +
The standard setup can be analyzed and 'recorded' by Windows to do the installation tasks by the '{opsi-winst}' program. Usually that is something like file installation to the local file system, followed by patching the registry

NOTE: opsi supports all of these variants. +
Usually a combination of all three different methods in one script provides the best result. For example, performing the basic installation using the original setup if available, and then doing some customizing by patching the registry or the file based configuration.


[[opsi-getting-started-softwintegration-tutorial-script-structure]]
==== Structure of a winst Script

An example of a simple winst script:
[source,winst]
----
[Actions]
WinBatch_tightvnc_silent_install

[WinBatch_tightvnc_silent_install]
"%ScriptPath%\tightvnc-1.3.9-setup.exe" /silent
----

A winst script contains *primary* and *secondary* sections. The section headers are in square brackets, similar to what you may have seen in ini-files. The primary section is noted by the identifier [Actions], and the secondary section is noted by the identifier [WinBatch_...]. 

The core work, like starting programs or copying files, is done in the secondary sections, not in the primary sections. These secondary sections are topic specific, and have a specific syntax that relates to their specific topic.

The name of a secondary section starts with a reserved word for that type of secondary section followed by a free identifier.

In the above example, the primary section +[Actions]+  calls a secondary section +[WinBatch_tightvnc_silent_install]+. +
This secondary section has the type +WinBatch+. The content of the secondary sections, of type 'WinBatch', are executed by the Windows API. In this case, the program `tightvnc-1.3.9-setup.exe` will be started with the parameter +/silent+.

[[opsi-getting-started-softwintegration-tutorial-primary-sections]]
==== Primary Sections

Initial::
The Initial section is used to set runtime parameters. +
This section is optional.

Actions::
The section +[Actions]+ is the main program. +
Any part of the code that is called more then one time can be placed in sub sections.

Sub-sections::
Primary sections which may be called multiple times or have their code in external files.

The primary sections are the main program which control the program flow. There you will find:

* Variables: strings and string lists
* if else endif statements
* for loops that traverse string lists
* Functions

.double code for deinstallation
image::../images/opsi-winst-without-delsub.png["example of repetitive code (for deinstallation)",width=300]

.avoid double code by using sub sections
image::../images/opsi-winst-with-delsub.png["avoid repetitive code by using sub sections",width=300]

[[opsi-getting-started-softwintegration-tutorial-secondary-sections]]
==== Important Kinds of Secondary Sections

Files::
File operations include

* copying (regarding the internal version information, recursive, ...)
* deleting files or directories
* creating directories

WinBatch::
Is used for calling programs using the Windows API. For example, WinBatch calls the setup programs in the silent mode.

DosBatch/DosInAnIcon::
The content of these sections is interpreted by the `cmd.exe` like normal batch files. +
A variant of 'DosBatch' is 'DosInAnIcon' which is run in a minimized window.

ExecWith::
A program is given as a parameter, and then that program interprets the content of this section (e.g. AutoIt).

Registry::
The 'Registry' sections are used for registry manipulations.

Linkfolder::
Link folder sections are used for the manipulation of start menus and desktop icons.

[[opsi-getting-started-softwintegration-tutorial-global-constants]]
==== Global Constants

Global constants are placeholders which can be used in primary and secondary sections. These placeholders are replaced by their values at runtime.

Examples:

+%ProgramFiles32Dir%+:: c:\program files
+%Systemroot%+::        c:\windows
+%System%+::            c:\windows\system32
+%Systemdrive%+::       c:\
+%Scriptpath%+::        <path to the running script>

[[opsi-getting-started-softwintegration-tutorial-second-example]]
==== Second Example: tightvnc

The following example shows a simple script that is used for a tightvnc installation. This script should contain only the winbatch call for the silent installation. If you call the sub-section silent installation more the one time, a confirmation window appears (which is a bug in the installer). This confirmation window will be closed by a 'autoit' script if it appears.

tightvnc.ins:
[source,winst]
----
[Actions]
Message "Install tightvnc 1.3.9 ..."
ExecWith_autoit_confirm "%ScriptPath%\autoit3.exe" WINST /letThemGo
WinBatch_tightvnc_silent_install
KillTask "autoit3.exe"

[WinBatch_tightvnc_silent_install]
"%ScriptPath%\tightvnc-1.3.9-setup.exe" /silent

[ExecWith_autoit_confirm]
; Wait for the confirm dialog which only appears if tightvnc was installed before as service
; Waiting for the window to appear
WinWait("Confirm")
; Activate (move focus to) window
WinActivate("Confirm")
; Choose answer no
Send("N")
----

[[opsi-getting-started-softwintegration-tutorial-elementary-commands]]
==== Elementary Commands for Primary Sections

[[opsi-getting-started-softwintegration-tutorial-elementary-commands-string-variable]]
===== String Variable

Declaration of a variable:: DefVar <variable name>

Setting a value:: Set <variable name> = <value>

Example:
[source,winst]
----
DefVar $ProductId$
Set $ProductId$ = "firefox"
----

IMPORTANT: The use of string variables is different in primary versus secondary sections. In the primary section, the string variables are handled as independent objects. String variables can only be declared and set to values in primary sections. Therefore you have to use a operator ('+') to concatenate variables and strings in a string expression. +
Example:`"Installing "+$ProductId$+" ..."` +
In secondary sections string variables are used as a placeholder for their values. +
Example: `"Installing $ProductId$ ..."` +
You should keep this in mind if you cut and paste string expressions between primary and secondary sections. +
The advantage of handling string variables in this format is that is possible to use these variables in secondary sections that are interpreted by other programs (DosBatch / Execwith).

[[opsi-getting-started-softwintegration-tutorial-elementary-commands-message]]
===== Message / showbitmap

Displaying text during runtime: +
`Message <string>`

Example:
[source,winst]
----
Message "Installing "+ $ProductId$ +" ..."
----

Displaying a picture during installation: +
`ShowBitMap [<file name>] [<sub title>]`

Example:
[source,winst]
----
ShowBitmap "%ScriptPath%\python.png" "Python"
----

[[opsi-getting-started-softwintegration-tutorial-elementary-commands-if-else-endif]]
===== if [else] endif

*Syntax:*
[source,winst]
----
if <condition>
	;statement(s)
[
else
	;statement(s)
]
endif
----

[[opsi-getting-started-softwintegration-tutorial-elementary-commands-functions]]
===== Functions

HasMinimumSpace:: Check for free space on the hard disk
FileExists:: Check for the existence of a file or directory

[[opsi-getting-started-softwintegration-tutorial-elementary-commands-error]]
===== Error, Logging and Comments

comment char ';':: Lines starting with the ';' char are simply ignored.
comment:: writes a comment to the log file
LogError:: writes error messages to the log file
isFatalError:: aborts the script, and return the installation state 'failed' to the server.

[[opsi-getting-started-softwintegration-tutorial-elementary-commands-requirements]]
===== Requirements

requiredWinstVersion:: Minimum required version of {opsi-winst}


[[opsi-getting-started-softwintegration-tutorial-template]]
==== Third example: The Generic Template 'opsi-template'

This third template should be used as a rough guide whenever you create your own opsi product. Do not cut-and-paste from this manual, but instead look at http://download.uib.de for a new version of the 'opsi-template' product package. Using the opsi-package-manager command you may install 'opsi-template' (-i) or extract (-x) at your server and then grab the scripts.

.setup32.ins: installation script
[source,winst]
----
; Copyright (c) uib gmbh (www.uib.de)
; This sourcecode is owned by uib
; and published under the Terms of the General Public License.
; credits: http://www.opsi.org/en/credits/

[Actions]
requiredWinstVersion >= "4.11.2.6"

DefVar $MsiId$
DefVar $UninstallProgram$
DefVar $LogDir$
DefVar $ProductId$  
DefVar $MinimumSpace$
DefVar $InstallDir$
DefVar $ExitCode$
DefVar $LicenseRequired$
DefVar $LicenseKey$
DefVar $LicensePool$

Set $LogDir$ = "%SystemDrive%\tmp"

; ----------------------------------------------------------------
; - Please edit the following values                             -
; ----------------------------------------------------------------
;$ProductId$ should be the name of the product in opsi
; therefore please: only lower letters, no umlauts, 
; no white space use '-' as a seperator
Set $ProductId$       = "opsi-template"
Set $MinimumSpace$    = "1 MB"
; the path were we find the product after the installation
Set $InstallDir$      = "%ProgramFiles32Dir%\<path to the product>"
Set $LicenseRequired$ = "false"
Set $LicensePool$     = "p_" + $ProductId$
; ----------------------------------------------------------------

if not(HasMinimumSpace ("%SystemDrive%", $MinimumSpace$))
	LogError "Not enough space on %SystemDrive%, " + $MinimumSpace$ + " on drive %SystemDrive% needed for " + $ProductId$
	isFatalError
	; Stop process and set installation status to failed
else
	comment "Show product picture"
	ShowBitmap "%ScriptPath%\" + $ProductId$ + ".png" $ProductId$
	
	if FileExists("%ScriptPath%\delsub32.ins")
		comment "Start uninstall sub section"
		Sub "%ScriptPath%\delsub32.ins"
	endif
	
	Message "Installing " + $ProductId$ + " ..."
	
	if $LicenseRequired$ = "true"
		comment "Licensing required, reserve license and get license key"
		Sub_get_licensekey
	endif
	
	comment "Start setup program"
	ChangeDirectory "%SCRIPTPATH%"
	Winbatch_install
	Sub_check_exitcode
	
	comment "Copy files"
	Files_install /32Bit
	
	comment "Patch Registry"
	Registry_install /32Bit
	
	comment "Create shortcuts"
	LinkFolder_install
	
endif

[Winbatch_install]
; Choose one of the following examples as basis for your installation
; You can use $LicenseKey$ var to pass a license key to the installer
;
; === Nullsoft Scriptable Install System ================================================================
; "%ScriptPath%\Setup.exe" /S
;
; === MSI package =======================================================================================
; You may use the parameter PIDKEY=$Licensekey$
; msiexec /i "%ScriptPath%\some.msi" /l* "$LogDir$\$ProductId$.install_log.txt" /qb! ALLUSERS=2 REBOOT=ReallySuppress
;
; === InstallShield + MSI=====================================================================================
; Attention: The path to the log file should not contain any whitespaces
; "%ScriptPath%\setup.exe" /s /v" /l* $LogDir$\$ProductId$.install_log.txt /qb! ALLUSERS=2 REBOOT=ReallySuppress"
; "%ScriptPath%\setup.exe" /s /v" /qb! ALLUSERS=2 REBOOT=ReallySuppress"
;
; === InstallShield =====================================================================================
; Create setup.iss answer file by running: setup.exe /r /f1"c:\setup.iss"
; "%ScriptPath%\setup.exe" /s /sms /f1"%ScriptPath%\setup.iss" /f2"$LogDir$\$ProductId$.install_log.txt"
;
; === Inno Setup ========================================================================================
; http://unattended.sourceforge.net/InnoSetup_Switches_ExitCodes.html
; You may create setup answer file by: setup.exe /SAVEINF="filename"
; You may use an answer file by the parameter /LOADINF="filename"
; "%ScriptPath%\setup.exe" /sp- /silent /norestart /nocancel /SUPPRESSMSGBOXES

[Files_install]
; Example of recursively copying some files into the installation directory:
;
; copy -s "%ScriptPath%\files\*.*" "$InstallDir$"

[Registry_install]
; Example of setting some values of an registry key:
;
; openkey [HKEY_LOCAL_MACHINE\Software\$ProductId$]
; set "name1" = "some string value"
; set "name2" = REG_DWORD:0001
; set "name3" = REG_BINARY:00 af 99 cd

[LinkFolder_install]
; Example of deleting a folder from AllUsers startmenu:
;
; set_basefolder common_programs
; delete_subfolder $ProductId$
;
; Example of creating an shortcut to the installed exe in AllUsers startmenu:
;
; set_basefolder common_programs
; set_subfolder $ProductId$
;
; set_link
; 	name: $ProductId$
; 	target: <path to the program>
; 	parameters:
; 	working_dir: $InstallDir$
; 	icon_file:
; 	icon_index:
; end_link
;
; Example of creating an shortcut to the installed exe on AllUsers desktop:
;
; set_basefolder common_desktopdirectory
; set_subfolder ""
;
; set_link
; 	name: $ProductId$
; 	target: <path to the program>
; 	parameters: <some_param>
; 	working_dir: $InstallDir$
; 	icon_file: <path to icon file>
; 	icon_index: 2
; end_link

[Sub_get_licensekey]
if opsiLicenseManagementEnabled
	comment "License management is enabled and will be used"

	comment "Trying to get a license key"
	Set $LicenseKey$ = demandLicenseKey ($LicensePool$)
	; If there is an assignment of exactly one licensepool to the product the following call is possible:
	; Set $LicenseKey$ = demandLicenseKey ("", $ProductId$)
	;
	; If there is an assignment of a license pool to a windows software id, it is possible to use:
	; DefVar $WindowsSoftwareId$
	; $WindowsSoftwareId$ = "..."
	; Set $LicenseKey$ = demandLicenseKey ("", "", $WindowsSoftwareId$)
	
	DefVar $ServiceErrorClass$
	set $ServiceErrorClass$ = getLastServiceErrorClass
	comment "Error class: " + $ServiceErrorClass$
	
	if $ServiceErrorClass$ = "None"
		comment "Everything fine, we got the license key '" + $LicenseKey$ + "'"
	else
		if $ServiceErrorClass$ = "LicenseConfigurationError"
			LogError "Fatal: license configuration must be corrected"
			LogError getLastServiceErrorMessage
			isFatalError
		else 
			if $ServiceErrorClass$ = "LicenseMissingError"
				LogError "Fatal: required license is not supplied"
				isFatalError
			endif
		endif
	endif
else
	LogError "Fatal: license required, but license management not enabled"
	isFatalError
endif


[Sub_check_exitcode]
comment "Test for installation success via exit code"
set $ExitCode$ = getLastExitCode
; informations to exit codes see
; http://msdn.microsoft.com/en-us/library/aa372835(VS.85).aspx
; http://msdn.microsoft.com/en-us/library/aa368542.aspx
if ($ExitCode$ = "0")
	comment "Looks good: setup program gives exitcode zero"
else
	comment "Setup program gives a exitcode unequal zero: " + $ExitCode$
	if ($ExitCode$ = "1605")
		comment "ERROR_UNKNOWN_PRODUCT	1605	This action is only valid for products that are currently installed."
		comment "Uninstall of a not installed product failed - no problem"
	else
		if ($ExitCode$ = "1641")
			comment "looks good: setup program gives exitcode 1641"
			comment "ERROR_SUCCESS_REBOOT_INITIATED	1641	The installer has initiated a restart. This message is indicative of a success."
		else
			if ($ExitCode$ = "3010")
				comment "looks good: setup program gives exitcode 3010"
				comment "ERROR_SUCCESS_REBOOT_REQUIRED	3010	A restart is required to complete the install. This message is indicative of a success."
			else
				logError "Fatal: Setup program gives an unknown exitcode unequal zero: " + $ExitCode$
				isFatalError
			endif
		endif
	endif
endif
----

.delsub32.ins: external deinstallation sub section 
[source,winst]
----
; Copyright (c) uib gmbh (www.uib.de)
; This sourcecode is owned by uib gmbh
; and published under the Terms of the General Public License.
; credits: http://www.opsi.org/en/credits/


Set $MsiId$ = '{XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX}'
Set $UninstallProgram$ = $InstallDir$ + "\uninstall.exe"

Message "Uninstalling " + $ProductId$ + " ..."

if FileExists($UninstallProgram$)
	comment "Uninstall program found, starting uninstall"
	Winbatch_uninstall
	sub_check_exitcode
endif
if not (GetRegistryStringValue32("[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\" + $MsiId$ + "] DisplayName") = "")
	comment "MSI id " + $MsiId$ + " found in registry, starting msiexec to uninstall"
	Winbatch_uninstall_msi
	sub_check_exitcode
endif

comment "Delete files"
Files_uninstall /32Bit

comment "Cleanup registry"
Registry_uninstall /32Bit

comment "Delete program shortcuts"
LinkFolder_uninstall

[Winbatch_uninstall]
; Choose one of the following examples as basis for program uninstall
;
; === Nullsoft Scriptable Install System ================================================================
; maybe better called as
; Winbatch_uninstall /WaitforProcessending "Au_.exe" /Timeoutseconds 10
; "$UninstallProgram$" /S
;
; === Inno Setup ========================================================================================
; "$UninstallProgram$" /silent /norestart /SUPPRESSMSGBOXES /nocancel


[Winbatch_uninstall_msi]
msiexec /x $MsiId$ /qb! REBOOT=ReallySuppress

[Files_uninstall]
; Example for recursively deleting the installation directory (don't forget the trailing backslash):
;
; del -sf "$InstallDir$\"

[Registry_uninstall]
; Example of deleting a registry key:
;
; deletekey [HKEY_LOCAL_MACHINE\Software\$ProductId$]

[LinkFolder_uninstall]
; Example of deleting a folder from AllUsers startmenu:
;
; set_basefolder common_programs
; delete_subfolder $ProductId$
;
; Example of deleting a shortcut from AllUsers desktop:
;
; set_basefolder common_desktopdirectory
; set_subfolder ""
; delete_element $ProductId$
[Sub_check_exitcode]
;(.... see above .....)
----

.uninstall32.ins: deinstallation script
[source,winst]
----
; Copyright (c) uib gmbh (www.uib.de)
; This sourcecode is owned by uib gmbh
; and published under the Terms of the General Public License.
; credits: http://www.opsi.org/en/credits/

[Actions]
requiredWinstVersion >= "4.11.2.6"

DefVar $MsiId$
DefVar $UninstallProgram$
DefVar $LogDir$
DefVar $ExitCode$
DefVar $ProductId$
DefVar $InstallDir$
DefVar $LicenseRequired$
DefVar $LicensePool$

Set $LogDir$ = "%SystemDrive%\tmp"

; ----------------------------------------------------------------
; - Please edit the following values                             -
; ----------------------------------------------------------------
Set $ProductId$       = "opsi-template"
Set $InstallDir$      = "%ProgramFiles32Dir%\<path to the product>"
Set $LicenseRequired$ = "false"
Set $LicensePool$     = "p_" + $ProductId$
; ----------------------------------------------------------------


comment "Show product picture"
ShowBitmap "%ScriptPath%\" + $ProductId$ + ".png" $ProductId$

Message "Uninstalling " + $ProductId$ + " ..."

if FileExists("%ScriptPath%\delsub32.ins")
	comment "Start uninstall sub section"
	Sub "%ScriptPath%\delsub32.ins"
endif

if $LicenseRequired$ = "true"
	comment "Licensing required, free license used"
	Sub_free_license
endif

[Sub_free_license]
comment "License management is enabled and will be used"

comment "Trying to free license used for the product"
DefVar $result$
Set $result$ = FreeLicense($LicensePool$)
; If there is an assignment of a license pool to the product, it is possible to use
; Set $result$ = FreeLicense("", $ProductId$)
;
; If there is an assignment of a license pool to a windows software id, it is possible to use
; DefVar $WindowsSoftwareId$
; $WindowsSoftwareId$ = "..."
; set $result$ = FreeLicense("", "", $WindowsSoftwareId$)
----

[[opsi-getting-started-softwintegration-tutorial-create-and-test-script]]
==== Interactive Creation and Testing of a {opsi-winst} Script

It is possible to interactively adapt and test your own opsi-winst script using winst32.exe.

Start by creating a directory where you will build and test your script (e.g. `c:\test`), and then copy the template scripts from the opsi-template (`setup.ins`, `delsub.ins` und `uninstall.ins`) to this directory.

Start the {opsi-winst} (`winst32.exe`) program via a double mouse click. (On Windows 7 Clients, you must right-click on the mouse button and select "run as Administrator"). If the opsi-client-agent is installed on your computer you will find the {opsi-winst} at the directory `C:\program files\opsi.org\opsi-client-agent\opsi-winst. If the {opsi-client} agent is not installed you will find the {opsi-winst} at the share 
'\\<opsiserver\opt_pcbin' in the directory `install\opsi-winst\files`.

After starting {opsi-winst}, you will see the following window:

.opsi-Winst Started in Interactive Mode
image::../images/winst-interactive["Screenshot: {opsi-Winst} started in interactive mode",400]

* 'Select Script' is used to choose the script that you want to execute.
* 'Start' will start the execution of the selected script. 
* 'View Log' is used to read the log file from the script that was run most recently.

Select the 'setup.ins' script and run it.

.{opsi-winst} log view window
image::../images/winst-log-view.png["{opsi-winst} log view window",400]

* Look at the log file to see how {opsi-winst} interpreted the script.

* After figuring out which setup.exe that you will use to install software, copy setup.exe to the directory where the scripts are located (e.g. `c:\test`).

* Open the `setup.ins` script with a editor. You may use any text editor you like. We suggest the 'jEdit' with syntax high lightning for {opsi-winst} which is part of the essential {opsi-product}s.

.jEdit with a opsi script
image::../images/jedit-with-winst-script.png["jEdit with a opsi script",400]

* You may now change the script using the editor. Save the changes (keep the editor open).

* Now switch to the {opsi-winst} and start the script again. (You don't have to reselect the script. Just press the 'start' button).

* Just have a look at the log again and see how the program flow changed according to your script changes.

* You can interactively develop a script until it fits your needs by performing these steps in this order: +
 - Change the script and save +
 - run the script +
 - review the log +


The next chapter contains some hints about handle any problems that may arise while building a opsi-winst script. <<opsi-getting-started-softwintegration-create-opsi-package-newprod>> describes how to create an {opsi-product} from your scripts, and how to install the products on the {opsi-server}.


[[opsi-getting-started-softwintegration-tutorial-template-details]]
==== Suggestions on How to Solve Problems with {opsi-winst} Scripts

[[opsi-getting-started-softwintegration-tutorial-find-switches]]
===== Search for Unattend or Silent Switches

For an „unattended“ or „silent” setup, the original setup will be switched to an unattended non-interactive mode using the proper command line arguments.

The problem is to find the correct arguments

.Look on the internet:
Before you start integrating a new package, you'd better first have a look online to see if somebody has already done that job for you:

Ready to run {opsi-winst} scripts, built by the community, can be found at: +
https://forum.opsi.org/wiki/

A collection of links to web sites with switch collections can be found here +
http://www.opsi.org/en/software-integration-web-links

.Search the software producer's site:
A lot of software manufacturers are aware of the needs of unattended software distribution, so there are often some hints and instructions in the product documentation or on the software producer's website.

.Identify the manufacturer of the setup program:
Most setup programs are built using frameworks like 'Inno', 'NSIS', 'Installshield' or 'Wise'.   Each one of these setup frameworks has their own switch.  The following method can be used to determine the framework and other necessary information:  The input strings can be determined using the command line program 'strings' given the setup program 'setup.exe', and the output framework names can be found using 'grep' or 'findstr'.

The Linux commands looks like this (change <mysetup.exe> to the name of your setup.exe):

[source,prompt]
----
strings <mysetup.exe> | grep -i -E "(inno|nsis|installshield|wise)"
----

Windows does not have a native `strings` command, so you will have to install it. You can download a `strings.exe` program from here: http://technet.microsoft.com/en-us/sysinternals/bb897439

To use this program, enter these commands at the command line interface (change <mysetup.exe> to the name of your setup.exe):
[source,prompt]
----
strings.exe <mysetup.exe> | findstr /i /r "inno installshield nsis wise"
----

The same method is used in the `opsi-setup-detector`.  See the example below: 

.opsi setup detector
image::../images/opsi-setup-detector.png[width="100mm"]

This GUI program can be called from the Windows context menu Explore.  

.opsi setup detector in Windows Explore context menu
image::../images/opsi-setup-detector-context-small-en.png[width="70mm"]

The 'opsi setup detector' is part of the 'opsi-adminutils' package.  The program can be downloaded as a stand-alone application from:

http://download.uib.de/opsi4.0/helper/opsisetupdetector.exe

At opsi.org, you can find a web link: +
http://www.opsi.org/en/software-integration-web-links +
to the section 'Installer specific switches', which has web links to sites that give hints on how to detect the manufacturer of the setup program.

[[opsi-getting-started-softwintegration-tutorial-winst-commands]]
===== Some Important {opsi-winst} Commands

A short overview of the {opsi-winst} commands can be found in the reference card:
http://download.uib.de/opsi4.0/doc/opsi-winst-reference-card.pdf

All syntax details are described in the {opsi-winst} manual:
http://download.uib.de/opsi4.0/doc/winstdoc-en.pdf

Here are some hints regarding important methods:

.Stringlisten
String lists can be powerful tools to review the output from other programs. Read the {opsi-winst} manual for details.

.ExitWindows
* `ExitWindows /Reboot` +
Reboot after the script is finished

* `ExitWindows /ImmediateReboot` +
Reboot now

* `ExitWindows /ImmediateLogout`
Exit the {opsi-winst} now

.Product Properties
For some products it is important to know which product properties can modify the installation in order to make a client-specific installation. Creating these properties is described below in <<opsi-getting-started-softwintegration-create-opsi-package,"Creating an opsi package">>.

To evaluate these properties, {opsi-winst} provides the function `GetProductProperty`

[source,winst]
----
if GetProductProperty("example-property", "no") = "yes"
	Files_copy_extra_files
endif
----

[[opsi-getting-started-softwintegration-tutorial-opsiadmin]]
===== Installation When the User is Logged on 

Before we begin, we assume that you have tried an unattended installation using an {opsi-winst} script, and the installation worked OK when the user had administrative privileges. 
However with some software products, you will see that the installation fails when started from within the opsi deployment software (opsi-client-agent). A possible reason for that difference might be that the installation process requires knowledge about the user environment or profile. 

In the case of a MSI package, the option 'ALLUSERS=2' might help.
Example:

[source,winst]
----
[Actions]
DefVar $MsiLogFile$
Set $MsiLogFile$ = "c:\tmp\myproduct.log"
winbatch_install_myproduct

[winbatch_install_myproduct]
msiexec /qb /l* $MsiLogFile$ /i "%ScriptPath%\files\myproduct.msi" ALLUSERS=2
----

Another possibility is that the installation starts a second process and stops before the second process is finished. So from the point of view of the {opsi-winst} script, the task is finished while in fact the second process is still working (installing / uninstalling). +
In this case, you may use the modifier +/WaitSeconds <seconds>+ , or
+/WaitForProcessEnding "program.exe" /TimeOutSeconds "<seconds>"+, in the WinBatch section so that the script waits for the end of the second process.

Another more complex way to solve the problem is to create a temporary administrative user account and use this account for the program installation. For a detailed description on how to do this, please refer to the {opsi-winst} manual chapter 8.3 'Script for installation in the context of a local administrator' and use the template 'opsi-template-with-admin'.

[[opsi-getting-started-softwintegration-tutorial-msi]]
===== Working with MSI-packages

With Windows 2000, Microsoft launched its own installation concept based on the Microsoft Installer Service „MSI“. Since then, many setup programs have become MSI compliant.

To be MSI compliant means to provide a packet with installation instructions for the MSI. Usually this is a file named 'product.msi'.

In practice, the „setup.exe“ of a product contains a 'product.msi' file and an additional control program for the installation. The control program unpacks the 'product.msi' and pops up a window that asks if it is allowed to start the installation. If installation has been approved, then the control program checks whether or not MSI is installed, and if so passes 'product.msi' to MSI. If no MSI is found, then the control program tries to install MSI.

If you were to interrupt the installation at that point, you will often find the unpacked MSI-package in a temporary directory.

For example, this package can be used for an unattended installation with the statement:
[source,winst]
----
msiexec /i "%ScriptPath%\Product.msi" /qb-! ALLUSERS=2 REBOOT=ReallySuppress
----

[[opsi-getting-started-softwintegration-tutorial-customizing]]
===== Customization after a silent/unattended Installation

After a successful silent installation, some customizing might be useful. The {opsi-winst} is a powerful tool to do that job. First, find out what patches have to be applied. For example, that could mean analyzing which registry settings are affected by the GUI customizing tools.

You can use the tools shown in <<opsi-getting-started-softwintegration-tutorial-analyse-and-repackage>>. Some other tools can be found here:

http://www.sysinternals.com/ +
http://www.german-nlite.de/files/guides/regshot/regshot.html

[[opsi-getting-started-softwintegration-tutorial-autoit]]
===== Integration with Automated Answers for the setup Program

Another fast way of integration is to provide an automated answer file for the setup process. The answer file contains pre-defined answers.  To be more precise, the answer file is used by a control tool, which waits for the setup to come up with the interactive windows.  The control tool then passes input to these windows as defined in the answer file. As a control tool we recommend 'AutoIt'. The AutoIt program and the documentation can be found at: http://www.hiddensoft.com/autoit3.

AutoIt provides a lot of commands to control the setup process. Also, several error states can be handled (if known in advance) with the '[ADLIB]' section in the script.

There is, however, a fundamental challenge in using AutoIt: +
The AutoIt script must provide input for every window that might pop up during installation. So if any unexpected window pops up, which isn't handled in the [ADLIB] section, AutoIt provides no input for this window and the installation stops at that point while waiting for input. This input could be done interactively by a user, and then the script can take over again and handle the next windows. 

Another situation that may cause failure of an AutoIt installation: +
The user can interfere with the installation if the mouse and keyboard are not disabled. Therefore we regard 'unattended' or 'silent' setup as a more stable solution.

A combination of both might do a good job: +
The 'silent'-setup does the main installation and the AutoIt script handles special conditions that might occur.

If you use the opsi option of running the installation on another desktop than the current desktop, or if the current desktop is locked, then you will find that some autoit functions do not work properly under these conditions.

Therefore you should avoid using the following autoit commands in '{opsi-winst}' scripts:

* winwait()

* winactivate()

* Send()

Because these commands are so widely used, we provide substitutes:

*winwait()* +
may be replaced by +
winexists() +
with the following code (with the additional functionality of a timeout after 30 seconds):
[source,configfile]
----
$seconds = 0
$exists = 0
While ($seconds <= 30) and ($exists = 0)
    $exists = WinExists("Setup")
    $seconds = $seconds + 1
    sleep(1000)
WEnd
----

*Send()* +
should be replaced by +
controlsend() and controlclick() +
Therefore, you should use the program `Au3info.exe` to get the 'ControlId' needed by these commands. Please use the numerical 'ControlId', because the other variants do not seem to work properly:
[source,configfile]
----
ControlClick("Setup", "", 1)
----

Below is an example from of our jedit installation script. +
In this script we produce a log file from the autoit activities, which may be integrated in the '{opsi-winst}' log file with the following commands:
[source,winst]
----
setloglevel=7
set $resultlist$ = loadTextFile("c:\tmp\au3.log")
setloglevel=6
----

An example:
[source,configfile]
----
[ExecWith_autoit_confirm]
; exact title match
Opt("WinTitleMatchMode", 3)
$mylog = FileOpen("C:\tmp\au3.log", 2)
FileWriteLine($mylog,"auto-it started - waiting for the window")
; do not use winwait(), it will fail on other desktops than current
$seconds = 0
$exists = 0
While ($seconds <= 30) and ($exists = 0)
    $exists = WinExists("Setup")
    FileWriteLine($mylog,"winexists result (1=exists): " & $exists )
    $seconds = $seconds + 1
    sleep(1000)
WEnd
FileWriteLine($mylog,"window detected - sending answer")
; say no
$result = ControlClick("Setup", "", 1)
FileWriteLine($mylog,"answer sended: result (1=success) : " & $result)
FileClose($mylog)
Sleep(500)
;and good bye
Exit
----

see also: +
http://www.autoitscript.com/wiki/FAQ#Why_doesn.27t_my_script_work_on_a_locked_workstation.3F +
http://www.autoitscript.com/autoit3/docs/ +
http://www.autoitscript.com/autoit3/docs/intro/controls.htm +
http://www.autoitscript.com/autoit3/docs/functions.htm


[[opsi-getting-started-softwintegration-tutorial-analyse-and-repackage]]
===== Analyze and Repackage

When a software developer builds a setup for deployment, the developer usually knows about the required components of the software that have to be installed. But if somebody has the setup as a black box, then at first they need to analyze what the setup does. This can be done by monitoring the setup activities with the appropriate tools (e.g. monitoring files and registry access) or by comparing the system states before and after installation.

To analyze the before or after states, there are a lot of tools. For Example:

* 'WinINSTALL LE' which is currently not available as freeware: +
http://www.ondemandsoftware.com

* 'InstallWatch Pro' +
http://download.fyxm.net/download-now-InstallWatch-Pro-OS-OS-Info-83813.html

* 'appdeploy-repackager' +
http://www.itninja.com/media/downloads/appdeploy-repackager.msi



[[opsi-getting-started-softwintegration-tutorial-deinstall]]
===== How to deinstall Products

To uninstall a software product from a computer, you need an 'uninstall' script to perform the deletion. The fundamental difficulty in software deletion is deciding what exactly has to be removed. Not all of the files that came with a software package can be deleted afterwards. Sometimes a packet comes with standard modules that are also referred to by other programs. Often only the software manufacturer himself knows what parts have to be removed. The manufacturer's setup might offer an unattended deinstall option which can be embedded in the opsi deinstall script. Otherwise {opsi-winst} provides several commands for software deletion:

.Using an uninstall routine
If the product manufacturer provides an option for software deletion, you must checked whether or not it can be run unattended (or in silent mode). If it requires some user interaction, an AutoIt script combined with the uninstall routine might do the job. The uninstall statement can be embedded in a [WinBatch] section of the {opsi-winst} script:
[source,winst]
----
[WinBatch_start_ThunderbirdUninstall]
"%SystemRoot%\UninstallThunderbird.exe" /ma
----

When using an uninstall program, always run a test to see if all of the files have been deleted and the computer is still in a stable state.

Products that are installed by MSI normally come with an uninstall option, which is usually the program `msiexec.exe` combined with the parameter `/x`. The parameter `/qb-!` is for the unattended mode (or without user interaction). So here is an example unattended uninstall command:

[source,winst]
----
msiexec.exe /x some.msi /qb-! REBOOT=ReallySuppress
----

Instead of the package name, you could also use the GUID (Global Unique ID) with `msiexec.exe`. This GUID identifies the product in the system, which can be found in the registry directory 
'HKLM\Software\Microsoft\Windows\CurrentVersion\Uninstall'

A request using the GUID looks like this:
[source,winst]
----
msiexec.exe /x {003C5074-EB37-4A75-AC4B-F5394E08B4DD} /qb-!
----

If none of these methods are available or sufficient, the uninstallation can be done using a {opsi-winst} script as described below:

.Useful {opsi-winst} commands for uninstall

If a product has been installed by {opsi-winst} functions, or if there is no uninstall routine for the product, the complete deinstallation has to be done by a {opsi-winst} script. {opsi-winst} comes with some powerful uninstall functions. This chapter provides a brief overview of the uninstall functions, and more detailed information can be found in the {opsi-winst} handbook.

Basic uninstallation means deleting one or more files from the file system. This command can be executed from a {opsi-winst} files section:
[source,winst]
----
delete -f <file name>
----

or to delete a directory including sub directories:

[source,winst]
----
delete -sf <dir name>\
----

The parameter 'f' means 'force' – or to delete the files even if they are marked as 'read only' – and the parameter 's' means including the 'subdirectories'. A file or directory can be deleted from all user profiles using the option '/AllNTUserProfiles' (see {opsi-winst} manual for details).

Directories containing files with the attribute 'hidden' or 'system' can be deleted by using a 'DosInAnIcon'-section:

[source,winst]
----
[DosInAnIcon_deleteDir]
rmdir /S /Q "<List>"
----

To stop a running process before deletion use the `killtask` command with the process' name (look at the task manager for process name):

[source,winst]
----
KillTask "thunderbird.exe"
----

If the product – or part of it – runs as a service, you will have to stop the service before deleting the files. One way to do so, is to set the service state to “inactive“ in the registry and restart the computer. Or to stop the service by using the command 'net stop', which doesn't need a reboot:
[source,winst]
----
net stop <servicename>
----

Deleting DLL files also requires special attention, since DLLs could also be used by other products. There is no general way of handling this.

To delete registry entries with {opsi-winst} you can use the command DeleteVar. This command deletes entries from the currently open key:

[source,winst]
----
DeleteVar <VarName>
----

To delete a registry key with all sub keys and registry variables, you can use the {opsi-winst} command DeleteKey:
[source,winst]
----
DeleteKey [HKLM\Software\Macromedia]
----


[[opsi-getting-started-softwintegration-tutorial-64bit]]
===== Known Issues with the 64 Bit Support

The opsi installer {opsi-winst} is a 32 bit program. There are no known problems when installing 32 bit software on a 64 bit system using {opsi-winst}. For the installation of 64 bit software, some constants (like '%ProgramFilesDir%') give wrong values.

New Versions of {opsi-winst} have special commands to handle these problems. So read the {opsi-winst} manual (http://download.uib.de/opsi4.0/doc/winstdoc-en.pdf) for these issues.


[[opsi-getting-started-softwintegration-create-opsi-package]]
=== Creating an opsi Package

In opsi new software is integrated into the system as a package. This package contains the installation files, the {opsi-winst} installation script, and any meta data.

The advantages of this format are essentially:

* Simplified menu driven handling using the program 'opsi-newprod'.
* Holding all meta data in one file, which is easy to edit.
* Optional menu driven installation of the package, with optional default overriding.
* Information about the package will be saved; including product version, package version, and customer extensions. The package information is stored in the installation directory, and all information can be seen in the package name and the opsi-configeditor. This means that different package versions can be easily handled (product life cycle management).
* For creating and unpacking products, no root privileges are required. Privileges of the group 'pcpatch' are sufficient.

The packet itself is merely a Gzip compressed cpio archive. This archive includes three directories:

* `CLIENT_DATA` +
holds the files which are to be copied into the product directory (`/opt/pcbin/install/<productid>`).

* `OPSI` +
The file named `control` holds the product meta data (like the product dependencies). The files `preinst` and `postinst` will be executed before and after the installation. Any customer extensions might be added here.


[[opsi-getting-started-softwintegration-create-opsi-package-handling]]
==== Create, Pack, and Unpack a New Product

In order to create a new opsi package, you must login to to the server and do some things at the command line. To do this from windows you may use putty.exe:
(http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html). 

The essential commands to create and install packages are:

* `opsi-newprod`
* `opsi-makeproductfile`
* `opsi-package-manager -i <{opsi-product}-file>`

The privileges of the group 'pcpatch' are required to create a new product.

You should create products in the directory `/home/opsiproducts`. This directory is also available as share 'opsi_workbench' . The group 'pcpatch' has to be owner of the directory and the directory permissions are 2770 ('set group ID' bit is set for group pcpatch).

[[opsi-getting-started-softwintegration-create-opsi-package-newprod]]
===== Create with opsi-newprod

WARNING: Do not use any country-specific symbols (umlaut), since the actual country code might vary for different code tables.


To start creating a new product, change directories to the product directory, and start the creation of the new product by entering the command `opsi-newprod`. The next question asks about the type of product to create. Choose the type 'localboot' for products which should be installable by '{opsi-client-agent}'/'{opsi-winst}'. The product type 'netboot' is used for products which are activated as a bootimage (like OS installation)

.Choose the product type: localboot
image::../images/newprod-localboot.png["Screenshot: Choose the product type: localboot",width=400]

Confirm your choice with tab (or F12). Next, fill in the basic product parameters. At the top of the window is an explanation for the current input field.

.Input of the product information
image::../images/newprod-product-info.png["Screenshot: Input of the product information",width=400]

Product Id:: is a distinct short name for the product, independent from the product version (we recommend to use only plain ASCII letters and '-', no white space, no special characters)

Product name:: is the full name of the product

Description:: is an additional description of the product.

Advice:: is some additional information on how to handle the product (a note).

Product version:: is the version of the packed software (max 32 chars).

Package Version:: is the version of the package for the product version. For example, this helps to distinguish between packages with the same product version but with modified '{opsi-winst}' scripts.

License required:: is only relevant to netboot products.

Priority:: controls the installation sequence. Possible Values are between 100 (at the very beginning) and -100 (at the end). Note: product dependencies also have influence on the installation sequence. See the opsi manual for more information.

After the product information is completed, fill in which action scripts should be provided:

.Input of the {opsi-winst} script names for different actions
image::../images/newprod-script-names.png["Screenshot: Input of the {opsi-winst} script names for different actions",width=400]

After editing the product information you should mention the script you want to use for different activities.

Usually the *+Setup script+* is named `setup.ins`

Usually the *+Uninstall script+* is named `uninstall.ins`

An *+Update-Script+* will be used for minor changes on existing big installations. If this product is switched to the required action 'setup', then the update script will be automatically executed after the setup script.

An *+Always-Script+* will be executed at the beginning of every activity of '{opsi-client-agent}' (e.g. on every boot).

A *+Once-Script+* has the resulting state `not_installed`. It is a very special kind of script, and you should only use it if you really know what you doing.

A *+Custom-Script+* doesn't change the resulting state.  It is a very special kind of script, and you should only use it if you really know what you are doing.

A *+userLoginScript+* is used to modify the user's profile after the user logs into the system. It only works with the opsi extension 'User Profile Management', which is described at the 'User Profile Management' chapter in the opsi-manual.


|=======================
| Type | resulting state | resulting action 
| setup | installed | none
| uninstall | not_installed | none
| update | installed | none
| always | installed | always
| once | not_installed | none
| custom | _unchanged_ | _unchangend_
| User login | _unchanged_ | _unchanged_
|=======================

The next step is to define one or more product dependencies. If there are no product dependencies, select 'No'.

.Create product dependency: No/Yes
image::../images/newprod-product-new-dependency.png["Screenshot: Create product dependency: No/Yes",width=400]

To create a product dependency, enter the following data (help is available at the top of the window):

Dependency for Action:: For which product action shall the dependency be created, or when is the dependency checked (setup, uninstall ...).

Required product id:: Product id of the required product.

Required product class id:: For future use, leave it empty! 

Required action:: Select the required action (if any) for the required product. Actions can be as 'setup', 'deinstall', 'update'. If no 'required action' is set, a 'required installation status' must be set

Required installation status:: Select the required status of the required product (if any). Usually this is 'installed'. So the required product will be installed if it isn't installed on the client yet. If no 'required installation status' is set, a 'required action' must be set

Requirement type:: This is regarding the installation order. If the required product has to be installed before the installation of the actual product, this is set to 'before'. If it has to be installed after the actual product, set 'requirement type' to 'after'. Leave it blank if the installation order doesn't matter.

NOTE: The possibility to define deinstall actions or dependencies is broken.
After defining a product dependency, you will be asked if you want to create another product dependency. If you choose 'Yes', then the procedure for defining a product dependency is repeated.  If you choose 'No', then you will be asked to define some product properties, which means defining additional switches for product customization.

NOTE: The installation sequence results from a combination of product dependencies and product priorities. For details on how this is done, and what you can configure, see the opsi-manual.

.A(nother) product property to create?
image::../images/newprod-new-property.png["Screenshot:  A(nother) product property to create?",width=400]

If you answer 'Yes', you will have to describe the product properties.

The product properties are client specific, and have names (keys) which can hold different values. These values can be evaluated by the '{opsi-winst}' script, and result in installing different options at installation time. 

First we have to decide if our property is a text value ('unicode') or a logical value e.g. true/false ('boolean'). If you are not sure choose 'unicode'.


.Choose the data type of the property
image::../images/newprod-property-type.png["Screenshot: Choose the data type of the property",width=400]

Next, a description for the switch needs to be specified.  This description will be shown in the 'opsi-configeditor' as a help text and also when the package is unpacked. Next, you can define the set of values for the switch (separated by comma). If this is left blank, then any value is allowed for the switch.

.Description of the product properties
image::../images/newprod-property-desc.png["Screenshot: Description of the product properties",width=400]

Next, you can decide if the product property has a default value (switch).

.Default value of the product property
image::../images/newprod-property-default.png["Screenshot: Default value of the product property",width=400]

If you choose 'boolean' as the data type, then the description will contain only the 'Property name' and 'Property description'.

.Description of a boolean property
image::../images/newprod-property-boolean.png["Screenshot: Description of a boolean property",width=400]

After defining a product property, you will be asked if you want to create another product property. If you choose 'Yes', then the procedure of defining a property repeats.  If you choose 'No', then you will be asked for name and email of the product maintainer. This data will be written to the changelog.

.Input of the maintainer data
image::../images/newprod-maintainer.png["Screenshot: Input of the maintainer data",width=400]

Finally, the basic definitions for the new product are done.

Using the list command (`ls`), you can see the directory structure as described above. Change to the `OPSI` folder and list the content. The `control` file now contains the data you just defined, and you can load the file into an editor to view or change the entries.

.Example of a `control` file:

[source,configfile]
----
[Package]
version: 1
depends: 
incremental: False

[Product]
type: localboot
id: mytest
name: My Test
description: A test product
advice: 
version: 3.14
priority: 10
licenseRequired: False
productClasses: 
setupScript: setup.ins
uninstallScript: 
updateScript: 
alwaysScript: 
onceScript: 
customScript: 
userLoginScript: 

[ProductDependency]
action: setup
requiredProduct: javavm
requiredStatus: installed

[ProductProperty]
type: unicode
name: mytextprop
multivalue: False
editable: True
description: hint
values: ["off", "on"]
default: ["off"]

[ProductProperty]
type: bool
name: myboolprop
description: yes or no
default: False

[Changelog]
mytest (3.14-1) testing; urgency=low

  * Initial package

 -- jane doe <j.doe@opsi.org>  Mi, 14 Jul 2010 12:47:53 +0000
----

For the next step, you will have to copy the product '{opsi-winst}' script, and any necessary data files (i.e. program-installation-executable.exe), into the `CLIENT_DATA` folder. 

So if the script you have written is currently at `c:\test`, just mount the share '\\<opsiserver\opsi_workbench' e.g. to 'w:', and then copy the complete content of `c:\test` to the directory 'CLIENT_DATA'.

[[opsi-getting-started-softwintegration-create-opsi-package-makeproductfile]]
===== Build the Package with opsi-makeproductfile

Now you may build the package. Change to the root directory of the product (maybe `/home/opsiproducts/myproduct/`, and enter 'opsi-makeproductfile'. The product package will be built.  The package (`<package name>`) will be a file that has a format similar to `/home/opsiproducts/<myproduct>/<myproduct_ProductVersion-PackageVersion>.opsi`.

Finally, install the package. The resulting package can be installed on the {opsi-server} with the command +
`opsi-package-manager -i <package name>`.

`opsi-makeproductfile` can be started with different options:

[source,prompt]
----
#  opsi-makeproductfile --help

Usage: opsi-makeproductfile [-h] [-v|-q] [-F format] [-l log-level] [-i|-c custom name] [-I required version] [-t temp dir] [source directory]
Provides an opsi package from a package source directory.
If no source directory is supplied, the current directory will be used.
Options:
   -v          verbose
   -q          quiet
   -l          log-level 0..9
   -n          do not compress
   -F          archive format [tar|cpio], default: cpio
   -h          follow symlinks
   -I          incremental package
   -i          custom name (add custom files)
   -c          custom name (custom only)
   -C          compatibility mode (opsi 3)
   -t          temp dir
----

Use the option '-C' (compatibility mode to opsi 3) to build  packages on a opsi 4 server which are required to be installable at opsi 3 servers as well.

If there is already a package file with the same version information, opsi-makeproductfile will ask for overwrite confirmation:

[source,prompt]
----
Package file '/home/opsiproducts/mytest/mytest_3.14-1.opsi' already exists.
Press <O> to overwrite, <C> to abort or <N> to specify a new version:
----
Choosing 'o' will overwrite, 'c' abort, and 'n' will ask for new version information.

The created opsi-package can be installed at the {opsi-server} with the command: +
`opsi-package-manager -i <paketname>`

More information about the opsi-package-manager can be found in the opsi-manual.

[[opsi-getting-started-more-info]]
== More Information
More detailed information can be found in the opsi-manual.

If you need help during your evaluation of opsi, then more help can be found at https://forum.opsi.org 

For production-level installations, we offer commercial support:
http://uib.de/en/home/index.html



