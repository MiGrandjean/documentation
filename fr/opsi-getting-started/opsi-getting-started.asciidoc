////
; Copyright (c) uib gmbh (www.uib.de)
; This documentation is owned by uib
; Until we found a better license:
; All rights reserved.
; credits: http://www.opsi.org/credits/
////

:Author:    uib gmbh
:Email:     info@uib.de
:Date:      05.04.2011
:Revision:  4.0
:toclevels: 6
:doctype:   book

// Include common opsi terms
include::../common/opsi_terms.asciidoc[]

= Mise en route d'opsi (opsi-Version 4.0.1)


[[opsi-getting-started-introduction]]
== Introduction
Cette instructions expliquent en détail l'installation et le démarrage d'un serveur OPSI. Elles commencent à partir du package d'installation fourni et conduisent à une installation d'essai d'un client. 

La configuration réseau montrèe est un exemple et concerne un réseau sans serveur DHCP concurrent (par exemple un réseau de test isolé avec un serveur OPSI et quelques clients pour les premiers essais).

Nous vous recommandons fortement de faire les premiers essais avec OPSI dans un réseau de test, séparé d'autres serveurs DHCP. Une connexion temporaire au réseau principal peut se faire pour le téléchargement des packages de produit actuel.

Pour une intégration des OPSI dans votre environnement de production existant, uib fournit des services de consultation pour vous.

[[opsi-getting-started-introduction-first-steps]]
=== Étapes à suivre pour l'installation et la mise en route
Les quatre étapes pour installer et démarrer un serveur OPSI sont:

. installation de base du serveur
. configuration du serveur: + 
configuration du réseau, réglage mot de passe, mise à jour du serveur
. téléchargement et installation des produits OPSI requis pour les clients
. réalisation des paquets des logiciels du système de base de Windows en utilisant le CD original de Windows

À ce moment un client peut être installé automatiquement.

Pour répondre à vos exigences, il existe différentes versions d'une installation de base disponibles. La procédure d'installation spéciale pour les différentes versions est décrite dans le chapitre 2 de cette introduction.

[[opsi-getting-started-introduction-hardware-preconditions]]
=== Configuration matérielle requise

Pour un serveur OPSI le matériel suivant est recommandé:

* Intel-x86-compatible PC

* carte réseau pris en charge par le noyau Linux standard
* un disque dur avec une capacité de 16 Go ou plus
* un lecteur de CD ROM amorçable

Pour les essais, comme pour l'environnement de production, les exigences en capacité du serveur sont modérés.

Travailler avec une machine VMware demande un ordinateur hôte raisonnable. Pour les tests un client peut être lancè dans une autre machine VMware sur le même ordinateur hôte.


[[opsi-getting-started-introduction-software-and-configuration-preconditions]]
=== Exigence de configuration

Votre serveur et votre réseau doivent se conformer aux exigences suivantes pour installer OPSI et travailler avec :

* *nom de domaine DNS valide* +
Votre nom de domaine DNS doit contenir au moins un nom de domaine et un domaine de premier niveau. Ainsi, le nom de domaine pleinement qualifié (FQDN) doit contenir un ou plusieurs points. +
Noms de domaine valides, par exemple: 'uib.local' , 'uib.de', 'subdomain.domain.de'
Noms de domaine non valable, par exemple: 'mydomain' parce que ce n'est qu'un domaine de premier niveau.
voir aussi: +
http://fr.wikipedia.org/wiki/Nom_de_domaine

* *nom d'hôte DNS valide* +
Les noms d'hôte (aussi le nom d'hôte du client) doivent suivre les règles de nommage. Elles peuvent contenir des lettres ASCII a-z, des chiffres 0-9 et le trait d'union '-'. Le soulignement ne sont pas autorisés. +
voir aussi: +
http://fr.wikipedia.org/wiki/Hostname

* *résolution de nom correcte pour le serveur* +
Exécutez la commande suivante et vérifiez le résultat: +
`getent hosts $(hostname -f)` +
Le résultat devrait ressembler à l'exemple suivant: +
'192.168.1.1 server.domain.tld server' +
Le résultat a le schéma: +
'<Adresse IP> <nom d'hôte pleinement qualifié> <nom d'hôte>' +
Si le résultat est différent (contient par exemple '127.0.0.1 'ou'localhost ') ou le nom d'hôte pleinement qualifié ne contient pas un ou plusieurs points vous devez corriger votre résolution de nom (DNS ou le fichier `/etc/hosts`). 

[[opsi-getting-started-installation]]
== Installation

[[opsi-getting-started-installation-base]]
=== Installation de base du serveur opsi

Ce chapitre décrit les différentes versions de l'installation d'un serveur OPSI. Vous pouvez choisir votre type d'installation et passez les autres étapes.

Si toutes les étapes nécessaires ont réussi, le système de serveur est prêt pour la configuration et le démarrage. Enfin, vous devez mettre à jour votre système en fonction du chapitre 'mise à jour du serveur OPSI'.

Nous recommandons d'utiliser une machine virtuelle à des fins d'évaluation.

Afin de faire fonctionner le système, vous devez exécuter les commandes dans
[source,prompt]
----
les champs marqués
----
(par exemple, avec un copier-coller à partir de ce document)

Si vous avez des problèmes, s'il vous plaît demandez de l'aide à https://forum.opsi.org 

[[opsi-getting-started-installation-base-vm]]
==== Lancement d'une machine Vmware

Un '{opsi-server}' peut être installé comme une machine virtuelle, quand les exigences de rendement sont faibles. Pour VMware une machine virtuelle configuré prêt à l'emploi est fournie. Les fichiers sont disponibles sur Internet. Afin d'utiliser cette machine, le lecteur VMware gratuit est suffisant. 

Vous pouvez également utiliser VMware ESX. Dans ce cas, vous devez utiliser le convertisseur de VMware pour importer la machine virtuelle. Il peut arriver que vous devez changer le contrôleur SCSI manuellement après l'importation d'ESX.


[[opsi-getting-started-installation-base-vm-start]]
===== Premier démarrage

Si vous avez un serveur exécutant VMware ou un lecteur de VMware, cela ne prend que quelques clics de souris pour une installation de base de '{opsi-server}':

* Téléchargez le fichier 'opsi4.0-servervm.zip' depuis internet.

* Décompressez le fichier et un repertoire 'opsidemo' sera créé.

* Démarrez le lecteur VMware. Recherchez avec l'explorateur de fichiers le répertoire 'opsidemo' et choisissez le fichier 'opsidemo.vmx'. Vous pouvez obtenir un message que le CD-ROM et un dispositif de disquettes ont une autre adresse. Vous pouvez ignorer ce message au démarrage de la machine virtuelle.

Le lecteur VMware est gratuit et disponible pour tous les systèmes d'exploitation commun sur vmware.com. Habituellement, il peut être installé sans problèmes, si le matériel de l'ordinateur hôte (en particulier la mémoire) répond aux besoins des logiciels parallèles en cours d'exécution.

La machine virtuelle fourni par uib est basé sur Linux. Les propriétés de notre système hôte sont décrits dans le fichier de configuration 'opsidemo.vmx'. Si vous exécutez l'image 'opsi-server' sous Windows ou si vos périphériques sous Linux ont une autre adresse, vous devez adapter le fichier.
 

[[opsi-getting-started-installation-base-vm-lang]]
===== Choix de la langue
La première étape est de choisir la langue préférée:

.Choix de la langue
image::../images/1stboot-language-selection.png["Screenshot: Language selection",width=400]

[[opsi-getting-started-installation-base-vm-1stboot]]
===== Premier démarrage
Pour travailler avec le serveur OPSI il doit être connecté à Internet. Pour la configuration réseau le script '1stboot.py' démarre automatiquement au premier démarrage.
Vous pouvez appeler '1stboot.py' à partir de la ligne de commande si quelque chose s'est mal passé.

WARNING: Vous ne pouvez pas utiliser '1stboot.py' pour renommer votre 'opsi-server' après!

Le fichier journal de '1stboot.py' est '/var/lib/1stboot/1stboot.log'. 

.1stboot.py Masque de démarrage
image::../images/1st-startup-mask.png["Screenshot: 1stboot.py Startup mask",width=400]

Remplissez les informations de configuration de votre réseau et répondez aux questions.

.1stboot Masque de saisie
image::../images/1stboot-input-mask.png["Screenshot: 1stboot Input mask",width=400]

Dans la suite il vous sera demandé :

server name::		Nom de ce serveur (sans nom de domaine) ex. +opsidemo+

domain::		DNS-Domain (pas de Windows-Domain) – le nom doit inclure un point ex. +opsi.local+

ip address::		Adresse de ce serveur ex. +192.168.1.50+

netmask::		Masque réseau de ce serveur ex. +255.255.255.0+

windows domain::	Nom du domaine Windows (pas le domaine DNS)

country::		Pour la création du certificat SSL: Identification de la nation (2 lettre capital) ex. +DE+

state::			Pour la création du certificat SSL: Identification de l'état fédéral ex. +RPL+

city::	Pour la création du certificat SSL: Identification de la ville ex. +Mainz+

organization::		Pour la création du certificat SSL: Identification de l'organisation ex. +uib gmbh+

organisational unit:: Pour la création du certificat SSL: Identification du bureau (optionnel)

email address::	Pour la création du certificat SSL: adresse mail (optionnel)

gateway::	Adresse IP de la passerelle internet ex. +192.168.1.1+

proxy::	Si l'accès a internet se fait via un proxy, rentrer ici les informations: ex. 				http://myuser:mypass@192.168.1.5:8080

DNS server:: adresse IP du serveur de nom ex. +192.168.1.1+

mail relay:: adresse IP du serveur de mail ex. +192.168.1.1+

tftp server::	adresse IP du serveur tftp (normalement le même serveur)

Password of root::	Mot de passe de root

Une fois terminé le programme '1stboot.py' la machine sera redémarré.

Note technique sur le programme 1stboot.py: +
Le programme travaille avec des modèles pour pouvoir modifier les fichiers de configuration. Les modèles sont dans : `/var/lib/1stboot/templates/`. +
Ils peuvent être modifié pour une utilisation ultérieure. 

[[opsi-getting-started-installation-base-vm-second-start]]
===== Deuxième démarrage

Après le redémarrage connectez vous comme 'root' avec votre mot de passe root.

L'interface graphique utilisateur du serveur OPSI est démarré (mis en œuvre en tant que gestionnaire de fenêtres durable). Une fenêtre d'accueil du navigateur Firefox revient avec de nouvelles instructions et d'information faisant référence au document de mise en route (le document que vous lisez actuellement).

Si vous obtenez le message qu'il n'ya pas de connexion réseau, vous devez à nouveau redémarrer le serveur. Cela pourrait résoudre le problème.

.Vue de l'interface web de configuration de opsi-server
image::../images/opsiserver_start_gui.png["Screenshot: View of fresh started opsi-server",400]

Si les informations de configuration réseau sont correctes, vous êtes en mesure de vous connecter à distance sur le serveur OPSI:

* Via ssh (dans les systèmes linux toujours existant, sous Windows avec putty, s. http://www.chiark.greenend.org.uk/~sgtatham/putty/) +
vous pouvez taper sur la ligne de commande du serveur. 

Comme nom d'utilisateur vous utilisez 'root' et pour vous authentifier le mot de passe de root.

[[opsi-getting-started-installation-base-vm-term]]
===== Fenêtre du terminal

Dans la suite, certaines commandes a mettre dans la ligne de commande. Il pourrait être un moyen rapide pour obtenir le résultat souhaité.

Une fenêtre de saisie des commandes à savoir une fenêtre de terminal que vous pouvez obtenir de différentes manières:

* Accès à distance par ssh sur '{opsi-server}' (voir le dernier chapitre)

* Ouvrir une fenêtre de terminal dans la surface graphique en cliquant sur l'icône de terminal dans la barre d'icônes.

* Ouvrir une fenêtre de terminal dans la surface graphique avec un clic droit de la souris dans la surface et le choix de „Terminal“. +
Conseil utile: la surface graphique a de nombreuses surfaces de travail accessibles avec les boutons de choix dans le coin supérieur gauche de l'écran.


Il est très avantageux de mettre les commandes d'exemple de ce manuel avec un couper/coller dans une fenêtre de terminal (dans la mesure où l'environnement de l'application le support).


Les extraits de l'exemple des fichiers de configuration sont formatés comme ceci:
[source,configfile]
----
depoturl = smb://smbhost/sharename/path
----

Les extraits pour les commandes que vous avez à exécuter sont formaté comme ceci:
[source,prompt]
----
cd /tmp
ls -l
----

Les chevrons '< >' marquent des noms abstraits. Dans un cadre concret toute la mention '<nom abstrait>' doit être remplacé par un vrai nom. +
Exemple: Le partage de fichiers, où opsi place les paquets des logiciels, peut être abstraitement noté comme '<opsi-depot-share>'. Si le partage de fichiers réel est `/opt/pcbin/install`, alors vous devez remplacer le nom abstrait avec exactement cette chemain. L'emplacement du paquet '<opsi-depot-share>/ooffice' devient `/opt/pcbin/install/ooffice`. .

[[opsi-getting-started-installation-base-vm-network]]
===== Vérifier et si nécessaire corriger la connexion réseau

Si la configuration réseau est correcte et que l'ordinateur est connecté à l'Internet, vous pouvez accéder a n'importe quelle adresse sur Internet avec le navigateur dans la fenêtre de démarrage.

Si tout ne fonctionne pas, vous devez ouvrir une fenêtre de terminal (peut-être l'accès à distance n'est pas encore possible, mais le terminal directement sur le serveur oui) et de prouver les vérifications de connexion réseau habituel. 

Vous pouvez accéder à la commande suivante dans la fenêtre de terminal
[source,prompt]
----
1stboot.py
----

et taper la configuration du réseau de nouveau. 

Un redémarrage est forcé avec la commande
[source,prompt]
----
reboot
----

Si la connexion réseau fonctionne vous pouvez insérer les paquets OPSI ou les actualiser. Et construire l'environnement pour le test de la première installation. Par conséquent sauter les chapitres suivants et continuer avec <<opsi-getting-started-installation-config>>.

[[opsi-getting-started-installation-base-deb]]
==== Installation d'un système Debian / Ubuntu

Opsi 4.0 est conçu et testé pour:

* Debian : Lenny

* Ubuntu: Lucid

S'il vous plaît lisez le chapitre <<opsi-getting-started-introduction-software-and-configuration-preconditions>> (si vous ne l'avez pas encore fait).

Dans ce chapitre, nous supposons que vous connaissez le système de paquets de debian (des renseignements sur le sujet, vous les trouverez dans les livres appropriés, sur les pages de manuel ou sous http://www.debian.org/doc/).

S'il vous plaît notez que un serveur OPSI a besoin de place de stockage dans `/opt/pcbin` et `/var/lib/opsi`. Dans les deux répertoires un espace libre d'au moins 8 Go est recommandée.

Nous recommandons les installations suivantes:

[source,prompt]
----
aptitude install wget lsof host python-mechanize p7zip-full cabextract openbsd-inetd
----

opsi a besoin que samba soit installé:

[source,prompt]
----
aptitude install samba samba-common smbclient smbfs samba-doc
----

Si vous souhaitez utiliser MySQL comme Backend par exemple pour l'inventaire et la gestion des licences, vous aurez besoin de mysql-server ainsi:
[source,prompt]
----
aptitude install mysql-server
----

Vérifiez l'entrée du serveur opsi dans `/etc/hosts` ou la sortie de
[source,prompt]
----
getent hosts $(hostname -f)
----

Le résultat devrait ressembler à l'exemple suivant: +
'192.168.1.1 server.domain.tld server' +
Le résultat a le schéma: +
'<Adresse-IP> <nom d'hôte pleinement qualifié> <nom d'hôte>' +
Si le résultat est différent (contient par exemple '127.0.0.1' ou 'localhost') ou le nom d'hôte pleinement qualifié ne contient pas un ou plusieurs points, vous devez corriger votre résolution de noms (DNS ou le fichier `/ etc / hosts `). 

Pour commencer l'installation de OPSI, ajoutez dans le fichier '/etc/apt/sources.list':

Ubuntu Lucid:
[source,configfile]
----
deb http://download.opensuse.org/repositories/home:/uibmz:/opsi:/opsi40/xUbuntu_10.04 ./
----

Debian Lenny:
[source,configfile]
----
deb http://download.opensuse.org/repositories/home:/uibmz:/opsi:/opsi40/Debian_5.0 ./
----

Maintenant exécutez les commandes pour importer la clé de signature du dépôt:

Ubuntu Lucid:

[source,prompt]
----
wget -O - http://download.opensuse.org/repositories/home:/uibmz:/opsi:/opsi40/xUbuntu_10.04/Release.key | apt-key add -
----

Debian Lenny:

[source,prompt]
----
wget -O - http://download.opensuse.org/repositories/home:/uibmz:/opsi:/opsi40/Debian_5.0/Release.key | apt-key add -
----

toutes: +
Vérifiez la réussite d'importation de clé:
[source,prompt]
----
apt-key list
----
devrait contenir la sortie: +
`pub   1024D/4DC87421 2010-07-23 [verfällt: 2012-09-30] +
uid    home:uibmz OBS Project <home:uibmz@build.opensuse.org>`

Exécutez les commandes suivantes pour installer OPSI sur votre serveur:

[source,prompt]
----
aptitude update
aptitude remove tftpd
update-inetd --remove tftpd
aptitude install opsi-atftpd
aptitude install opsi-depotserver
aptitude install opsi-configed
----

Lors de l'installation de tftpd peut vous être demandé le répertoire pour tftp. Répondez avec `/tftpboot`. A la question sur le support multicast vous pouvez répondre 'no'.

Pendant l'installation de opsiconfd vous seront demandé des informations pour la préparation du certificat SSL.

Au cours de l'installation du serveur OPSI vous devez permettre le patching des fichiers `dhcpd.conf` et `smb.conf`. Répondez avec 'yes' a la question. Il vous sera aussi demandé un mot de passe pour l'utilisateur 'pcpatch'. Définissez un nouveau mot de passe et s'il vous plaît examinez le chapitre 'Changement du mot de passe'.

Parce que vous installez OPSI sur une machine existante, nous supposons d'une configuration réseau correcte. Ainsi, vous pouvez continuer avec <<opsi-getting-started-installation-config-backend>>

[[opsi-getting-started-installation-base-ucs]]
==== Installation sur un univention corporate server (UCS)

S'il vous plaît lisez le chapitre <<opsi-getting-started-introduction-software-and-configuration-preconditions>> (si vous ne l'avez pas encore fait).

opsi 4.0 est testé et relâché pour UCS 2.4

Est possible d'installer opsi4ucs sur un UCS Master, Backup ou Slave. +
L'installation sur Memberservers n'est pas prise en charge. 

Le paquet opsi4ucs-ldap-schema doit être installé sur un UCS Master.

La documentation qui suit suppose que OPSI doit être installé sur un UCS Master.

Vérifiez l’entrée du serveur opsi dans  `/etc/hosts` ou la sortie de
[source,prompt]
----
getent hosts $(hostname -f)
----

Le résultat devrait ressembler à l’exemple suivant: +
'192.168.1.1 server.domain.tld server'. +
Le résultat a le schéma: +
'<Adresse-IP> <nom d'hôte pleinement qualifié> <nom d'hôte>'. +
Si le résultat est différent (contient par exemple '127.0.0.1' ou 'localhost') ou le nom d’hôte pleinement qualifié ne contient pas un ou plusieurs points, vous devez corriger votre résolution de noms (DNS ou le fichier `/etc/hosts`). 

Utilisez la commande suivante pour activer les dépôts UCS non maintenus sur votre serveur :
[source,prompt]
----
ucr set repository/online/component/backports4opsi=yes repository/online/component/backports4opsi/server=apt.univention.de repository/online/component/backports4opsi/parts=unmaintained
----
Vous n'avez pas besoin d'exécuter cette commande sur le maître si vous voulez installer seulement le schéma opsi.

Ajoutez le dépôt opsi dans votre `/etc/apt/sources.list` avec:
[source,prompt]
----
echo "deb http://download.opensuse.org/repositories/home:/uibmz:/opsi:/opsi40/ucs2.4 ./" >> /etc/apt/sources.list
----

Maintenant exécutez les commandes pour importer la clé de signature du dépôt:

[source,prompt]
----
wget -O - http://download.opensuse.org/repositories/home:/uibmz:/opsi:/opsi40/ucs2.4/Release.key | apt-key add -
----
Pour installer OPSI sur un UCS Master, exécutez les commandes suivantes:

[source,prompt]
----
aptitude update
aptitude install opsi4ucs-ldap-schema
aptitude install opsi4ucs
----
Pour installer OPSI sur un UCS Backup ou Slave, exécutez les commandes suivantes:

D'abord exécutez les commandes suivantes sur le Master:
[source,prompt]
----
aptitude update
aptitude install opsi4ucs-ldap-schema
----

Maintenant, exécutez les commandes suivantes sur votre système cible (Backup ou Slave):

[source,prompt]
----
aptitude update
aptitude install opsi4ucs
----

Si le rôle du serveur est quelque chose d'autre que UCS Master, il est requis d'exécuter le script join après l'installation.
[source,prompt]
----
univention-run-join-scripts
----

Maintenant vous pouvez trouver un lien vers l'interface de gestion OPSI en accédant à l'URL `https://<servername>`.

Seuls les membres du groupe 'opsiadmin' sont autorisés à utiliser l'interface de gestion OPSI. S'il vous plaît utilisez Univention-Admin pour modifier les appartenances aux groupes d'un utilisateur. L'Administrateur sera ajouté au groupe opsiadmin automatiquement lors de la procédure d'installation de OPSI.

Pour augmenter les performances du serveur LDAP il faudra indexer l'attribut opsiHostId. Pour ce faire, il suffit d'exécuter la commande suivante sur UCS master:
[source,prompt]
----
ucr set ldap/index/eq=$(ucr get ldap/index/eq),opsiHostId
/etc/init.d/slapd stop
slapindex
/etc/init.d/slapd start
----

Parce que vous installez OPSI sur une machine existante, nous supposons d'une configuration de réseau correct. Ainsi, vous pouvez continuer avec <<opsi-getting-started-installation-config-backend>>

[[opsi-getting-started-installation-base-opensuse]]
==== Installation sur openSUSE

S’il vous plaît lisez le chapitre <<opsi-getting-started-introduction-software-and-configuration-preconditions>> (si vous ne l’avez pas encore fait).

opsi 4.0 est testé et relâché pour openSUSE 11.3.

Premières notes générales:

Ces paquets sont testés avec openSUSE 11.3. Nous n'avons aucune information si opsi 4.0 fonctionnera avec les autres versions.

uib gmbh recommandent vivement aux fins d'évaluation l'utilisation de opsi-VM.

Préparatifs nécessaires:

* La commande `hostname -f` doit renvoyer un nom de domaine pleinement qualifié contenant deux points, par exemple 'opsidemo.uib.local'

* Vérifiez l'entrée du serveur opsi dans `/etc/hosts` ou la sortie de :
+
[source,prompt]
----
getent hosts $(hostname -f)
----
+
Le résultat devrait ressembler à l’exemple suivant: +
'192.168.1.1 server.domain.tld server'. +
Le résultat a le schéma: +
'<Adresse-IP> <nom d'hôte pleinement qualifié> <nom d'hôte>'. +
Si le résultat est différent (contient par exemple '127.0.0.1' ou 'localhost') ou le nom d’hôte pleinement qualifié ne contient pas un ou plusieurs points, vous devez corriger votre résolution de noms (DNS ou le fichier `/etc/hosts`). 

* Samba doit être configuré

* Si la machine doit également agir en tant que DHCP-server, le démon dhcpd doit être configuré et devrait être opérationnel

Vous pouvez utilisez zypper pour ajouter le dépôt opsi pour SUSE:
[source,prompt]
----
zypper ar –refresh http://download.opensuse.org/repositories/home:/uibmz:/opsi:/opsi40/openSUSE_11.3/home:uibmz:opsi:opsi40.repo
zypper -p 100 mr home_uibmz_opsi_opsi40
----

Une fois que le dépôt est ajoutée vous pouvez commencer l'installation de OPSI:

[source,prompt]
----
zypper refresh
<Accept the key>
zypper -v install opsi-depotserver opsi-configed
/etc/init.d/opsiconfd restart
/etc/init.d/opsipxeconfd restart
----

Parce que vous installez OPSI sur une machine existante, nous supposons d'une configuration de réseau correct. Ainsi, vous pouvez continuer avec <<opsi-getting-started-installation-config-backend>>

WARNING: les commandes Unix qui sont utilisés dans les chapitres suivants fonctionnent sur ​​les systèmes Debian. Peut-être que vous devez les changer afin de travailler sur votre système linux.

[[opsi-getting-started-installation-base-sles]]
==== Installation sur Suse Linux Enterprise Server (SLES)

S'il vous plaît notez:

* opsi 4.0 est construit pour SLES 11 SP1

* opsi sur SLES est nouveau.

* Nous n'avons aucune expérience avec les installations de production de OPSI sur SLES.

* Nous n'avons aucune information si OPSI 4.0 fonctionne avec d'autres versions SLES .

* uib gmbh recommandent vivement aux fins d'évaluation l'utilisation de opsi-VM.

S’il vous plaît lisez le chapitre <<opsi-getting-started-introduction-software-and-configuration-preconditions>> (si vous ne l’avez pas encore fait).

opsi 4.0 est testé et relâché pour SLES 11 SP1.

Premières notes générales:

Ces paquets sont testés avec openSUSE 11.3. Nous n’avons aucune information si opsi 4.0 fonctionnera avec les autres versions.

uib gmbh recommandent vivement aux fins d'évaluation l'utilisation de opsi-VM.
Préparatifs nécessaires:

* La commande `hostname -f` doit renvoyer un nom de domaine pleinement qualifié contenant deux points, par exemple 'opsidemo.uib.local'

* Vérifiez l’entrée du serveur opsi dans `/etc/hosts` ou la sortie de:
+
[source,prompt]
----
getent hosts $(hostname -f)
----
+
Le résultat devrait ressembler à l’exemple suivant: +
'192.168.1.1 server.domain.tld server'. +
Le résultat a le schéma: +
'<Adresse-IP> <nom d'hôte pleinement qualifié> <nom d'hôte>'. +
Si le résultat est différent (contient par exemple '127.0.0.1' ou 'localhost') ou le nom d’hôte pleinement qualifié ne contient pas un ou plusieurs points, vous devez corriger votre résolution de noms (DNS ou le fichier `/etc/hosts`). 

* Samba doit être configuré

* Si la machine doit également agir en tant que DHCP-server, le démon dhcpd doit être configuré et devrait être opérationnel

Vous pouvez utilisez zypper pour ajouter le dépôt opsi pour SLES:

[source,prompt]
----
zypper ar --refresh http://download.opensuse.org/repositories/home:/uibmz:/opsi:/opsi40/SLE_11_SP1/home:uibmz:opsi:opsi40.repo
zypper -p 100 mr home_uibmz_opsi_opsi40
----

Une fois que le dépôt est ajoutée vous pouvez commencer l’installation de OPSI:

[source,prompt]
----
zypper refresh
<Accept the key>
zypper -v install opsi-depotserver opsi-configed
/etc/init.d/opsiconfd restart
/etc/init.d/opsipxeconfd restart
----

Parce que vous installez OPSI sur une machine existante, nous supposons d’une configuration de réseau correct. Ainsi, vous pouvez continuer avec <<opsi-getting-started-installation-config-backend>>

WARNING: les commandes Unix qui sont utilisés dans les chapitres suivants fonctionnent sur ​​les systèmes Debian. Peut-être que vous devez les changer afin de travailler sur votre système linux.

[[opsi-getting-started-installation-base-rhel]]
==== Installation sur RedHat Enterprise Linux (RHEL)

S'il vous plaît notez:

* opsi 4.0 est construit pour RHEL 5.

* opsi sur RHEL est nouveau. 
* Nous n’avons aucune expérience avec les installations de production de OPSI sur RHEL. 
* Nous n’avons aucune information si OPSI 4.0 fonctionne avec d’autres versions RHEL.
* uib gmbh recommandent vivement aux fins d'évaluation l’utilisation de opsi-VM.

S’il vous plaît lisez le chapitre <<opsi-getting-started-introduction-software-and-configuration-preconditions>> (si vous ne l’avez pas encore fait).

opsi 4.0 est testé et relâché pour RHEL 5.

Préparatifs nécessaires:

* La commande `hostname -f` doit renvoyer un nom de domaine pleinement qualifié contenant deux points, par exemple 'opsidemo.uib.local'

* Vérifiez l’entrée du serveur opsi dans `/etc/hosts` ou la sortie de :
+
[source,prompt]
----
getent hosts $(hostname -f)
----
+
Le résultat devrait ressembler à l’exemple suivant: +
'192.168.1.1 server.domain.tld server'. +
Le résultat a le schéma: +
'<Adresse-IP> <nom d'hôte pleinement qualifié> <nom d'hôte>'. +
Si le résultat est différent (contient par exemple '127.0.0.1' ou 'localhost') ou le nom d’hôte pleinement qualifié ne contient pas un ou plusieurs points, vous devez corriger votre résolution de noms (DNS ou le fichier `/etc/hosts`). 

* Samba doit être configuré

* Si la machine doit également agir en tant que DHCP-server, le démon dhcpd doit être configuré et devrait être opérationnel

Inscrivez-vous au réseau Red Hat:
[source,prompt]
----
rhn_register
----

Ajoutez le dépôt opsi pour RHEL :
Créez le fichier `/etc/yum.repos.d/opsi40.repo` avec le contenu suivant:

[source,configfile]
----
[opsi4]
name=opsi4.0 for RHEL/ CentOS $releasever - $basearch
baseurl=http://download.opensuse.org/repositories/home:/uibmz:/opsi:/opsi40/RedHat_RHEL-5/
enabled=1
gpgcheck=1
gpgkey=http://download.opensuse.org/repositories/home:/uibmz:/opsi:/opsi40/RedHat_RHEL-5/repodata/repomd.xml.key
----

Une fois que le dépôt est ajoutée vous pouvez commencer l’installation de OPSI:

[source,prompt]
----
yum makecache
yum remove tftp-server
yum install opsi-depotserver opsi-configed
   Importing GPG key 0x4DC87421 "home:uibmz OBS Project <home:uibmz@build.opensuse.org>" from http://download.opensuse.org/repositories/home:/uibmz:/opsi:/opsi40/RedHat_RHEL-5/repodata/repomd.xml.key
   Is this ok [y/N]: y
/etc/init.d/opsiconfd restart
/etc/init.d/opsipxeconfd restart
----


Parce que vous installez OPSI sur une machine existante, nous supposons d’une configuration de réseau correct. Ainsi, vous pouvez continuer avec <<opsi-getting-started-installation-config-backend>>

WARNING: les commandes Unix qui sont utilisés dans les chapitres suivants fonctionnent sur ​​les systèmes Debian. Peut-être que vous devez les changer afin de travailler sur votre système linux.

[[opsi-getting-started-installation-base-centos]]
==== Installation sur CentOS Server

S'il vous plaît notez:

* opsi 4.0 est construit pour CentOS 5.

* opsi sur CentOs est nouveau. 
* Nous n’avons aucune expérience avec les installations de production de OPSI sur CentOS. 
* Nous n’avons aucune information si OPSI 4.0 fonctionne avec d’autres versions CentOS.
* uib gmbh recommandent vivement aux fins d'évaluation l’utilisation de opsi-VM.

S’il vous plaît lisez le chapitre <<opsi-getting-started-introduction-software-and-configuration-preconditions>> (si vous ne l’avez pas encore fait).

opsi 4.0 est testé et relâché pour CentOS 5.

Préparatifs nécessaires:

* La commande `hostname -f` doit renvoyer un nom de domaine pleinement qualifié contenant deux points, par exemple 'opsidemo.uib.local'

* Vérifiez l’entrée du serveur opsi dans `/etc/hosts` ou la sortie de :
+
[source,prompt]
----
getent hosts $(hostname -f)
----
+
Le résultat devrait ressembler à l’exemple suivant: +
'192.168.1.1 server.domain.tld server'. +
Le résultat a le schéma: +
'<Adresse-IP> <nom d'hôte pleinement qualifié> <nom d'hôte>'. +
Si le résultat est différent (contient par exemple '127.0.0.1' ou 'localhost') ou le nom d’hôte pleinement qualifié ne contient pas un ou plusieurs points, vous devez corriger votre résolution de noms (DNS ou le fichier `/etc/hosts`). 

* Samba doit être configuré

* Si la machine doit également agir en tant que DHCP-server, le démon dhcpd doit être configuré et devrait être opérationnel

Ajoutez le dépôt opsi pour CentOS:
Créez le fichier `/etc/yum.repos.d/opsi40.repo` avec le contenu suivant:

[source,configfile]
-----
[opsi4]
name=opsi4.0 for RHEL/ CentOS $releasever - $basearch
baseurl=http://download.opensuse.org/repositories/home:/uibmz:/opsi:/opsi40/CentOS_CentOS-5/
enabled=1
gpgcheck=1
gpgkey=http://download.opensuse.org/repositories/home:/uibmz:/opsi:/opsi40/CentOS_CentOS-5/repodata/repomd.xml.key
----

Une fois que le dépôt est ajoutée vous pouvez commencer l’installation de OPSI:

[source,prompt]
----
yum makecache
yum install opsi-depotserver opsi-configed
   Importing GPG key 0x4DC87421 "home:uibmz OBS Project <home:uibmz@build.opensuse.org>" from http://download.opensuse.org/repositories/home:/uibmz:/opsi:/opsi40/CentOS_CentOS-5/repodata/repomd.xml.key
   Is this ok [y/N]: y
/etc/init.d/opsiconfd restart
/etc/init.d/opsipxeconfd restart
----

Parce que vous installez OPSI sur une machine existante, nous supposons d’une configuration de réseau correct. Ainsi, vous pouvez continuer avec <<opsi-getting-started-installation-config-backend>>

WARNING: les commandes Unix qui sont utilisés dans les chapitres suivants fonctionnent sur ​​les systèmes Debian. Peut-être que vous devez les changer afin de travailler sur votre système linux.

[[opsi-getting-started-installation-config]]
=== Mise à jour et configuration du serveur OPSI

[[opsi-getting-started-installation-config-proxy]]
==== Entrée Proxy dans apt-configuration
Adapter, si nécessaire, le fichier `/etc/apt/apt.conf` à votre réseau (mettre le bon proxy ou commenter/supprimer les lignes). Vous pouvez modifier votre fichier avec par exemple un programme comme „midnight commander“:


[source,prompt]
----
mcedit /etc/apt/apt.conf
----


[[opsi-getting-started-installation-config-update]]
==== Mise à jour du serveur opsi
Mettez à jour le serveur OPSI avec les commandes:

[source,prompt]
----
aptitude update
aptitude safe-upgrade
----

Si la version du serveur OPSI n'a pas changé, la mise à niveau ne doit pas être un problème. La façon dont les serveurs OPSI peut être mis à jour à partir de versions antérieures, est décrite dans le Guide de mise à jour.

[[opsi-getting-started-installation-config-backend]]
==== Configuration du Backend

opsi supports, pour stocker ses données, différents backends.

Les backends les plus importants sont:

* file (stockage dans des fichiers)
* ldap (stockage dans un annuaire ldap)
* mysql (stockage dans une base MySQL)

A côté de ces principaux backend, il ya des backends spéciaux:

* opsipxeconfd (le service pour le démarrage pxe de opsi)
* dhcpd (utilisé pour configurer et redémarrer le service DHCP local)
* jsonrpc (pour rediriger tous les appels à un autre serveur opsi via JSON RPC)

Différents types de données peuvent être stockées dans différents backend. Donc, pour certaines actions (des appels de méthode) plus d'un backend devront être impliqués. Par conséquent, la méthode de différents appels sera affecté au backend. Ceci est fait dans le fichier `/etc/opsi/backendManager/dispatch.conf.`

Voici un exemple: 
[source,configfile]
----
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# =      backend dispatch configuration                                     =
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
#
# Ce fichier configure les méthodes qui sont expédiés à laquelle backends.
# Les entrées doivent suivre la forme:
# <expression régulière qui correspondent à un nom(s) de méthode> : <liste séparée par des virgules du nom(s) de backend>
#
# Les noms de backend doivent correspondre à une configuration de backend 
# nom de base du fichier <nom du backend>.conf dans /etc/opsi/backends.
# Pour chaque méthode exécutée
# la première expression régulière correspondant sera décisive.

#
# Les configurations typiques
#    file, opsipxeconfd et dhcpd backend:
#       backend_.*         : file, opsipxeconfd, dhcpd
#       host_.*            : file, opsipxeconfd, dhcpd
#       productOnClient_.* : file, opsipxeconfd
#       configState_.*     : file, opsipxeconfd
#       .*                 : file
#
#    jsonrpc, opsipxeconfd et dhcpd backend:
#       backend_.*         : jsonrpc, opsipxeconfd, dhcpd
#       .*                 : jsonrpc
#
#    ldap comme backend principal, mysql comme hw/sw invent 
#     et license management backend, opsipxeconfd et dhcpd backend:
#       backend_.*         : ldap, mysql, opsipxeconfd, dhcpd
#       host_.*            : ldap, opsipxeconfd, dhcpd
#       productOnClient_.* : ldap, opsipxeconfd
#       configState_.*     : ldap, opsipxeconfd
#       license.*          : mysql
#       softwareLicense.*  : mysql
#       audit.*            : mysql
#       .*                 : ldap
#
#     mysql et opsipxeconfd seulement
backend_.*         : mysql, opsipxeconfd
host_.*            : mysql, opsipxeconfd
productOnClient_.* : mysql, opsipxeconfd
configState_.*     : mysql, opsipxeconfd
.*                 : mysql
----

Dans ce fichier, vous trouverez en haut des explications et des exemples. Dans les lignes qui ne sont pas des commentaires, vous trouverez dans la première colonne le nom de l'appel de méthode OPSI (avec joker \*) et dans la deuxième colonne, la liste des backends qui doivent être appelés. Si une méthode est appelée la première ligne correspondant sera utilisé. La dernière ligne (.*) correspond à tous les appels de méthode OPSI.

La valeur par défaut après l'installation des paquets OPSI est le backend fichier.

Maintenant, au premier démarrage (même si vous n'avez pas modifié le fichier) et après tout changement à ​​ce fichier de configuration vous devez appeler:

[source,prompt]
----
opsi-setup --init-current-config
opsi-setup --set-rights
/etc/init.d/opsiconfd restart
/etc/init.d/opsipxeconfd restart
----

Les droits d'accès pour appeler les méthodes OPSI sont configurés dans  `/etc/opsi/backendManager/acl.conf`.

[[opsi-getting-started-installation-config-passwords]]
==== Changer les mots de passe

Dans le système il y a un pseudo-utilisateur 'pcpatch'. Pour l'installation des logiciels le PC utilise le pseudo-utilisateur 'pcpatch' et vous pouvez accéder aux données de configuration sur les partages conçues. 

L'utilisateur 'pcpatch' doit être aménagé avec un mot de passe correct. Appelez dans une fenêtre de terminal le programme 'opsi-admin' et il configurera le mots de passe de 'pcpatch' pour opsi, unix et samba (après l'envoi de la commande, vous devez mettre le mot de passe):

[source,prompt]
----
opsi-admin -d task setPcpatchPassword
----


[[opsi-getting-started-installation-config-java]]
==== Vérification de la configuration java

Administrez les serveurs OPSI et les clients connectés avec le programme 'opsi-configed'. Le programme est écrit en Java et utilisez au minimum la version Java 6 ou la version 1.6 (nombre d'ancienne version).

Pour verifier la version Java tapez 
[source,prompt]
----
java -version
----
dans une fenêtre de terminal.  

Adaptez, dans une fenêtre de terminal, avec `update-alternatives` la version Java si ce n'est pas indiqué avec un minimum de „1.6.0“:
[source,prompt]
----
update-alternatives --config java

There are 3 alternatives which provide `java'.
  Selection    Alternative
 -----------------------------------------------
 +    1        /usr/lib/j2se/1.4/bin/java
*     2        /usr/lib/j2sdk1.5-sun/bin/java
      3        /usr/lib/j2re1.6-sun/bin/java

Press enter to keep the default[*], or type selection number: 3
Using `/usr/lib/j2re1.6-sun/bin/java' to provide `java'.
----

[[opsi-getting-started-installation-config-users-and-groups]]
==== Créer des utilisateurs et gérer les groupes opsiadmin / pcpatch

L'administration de OPSI est autorisé seulement pour les utilisateur membres du groupe UNIX 'opsiadmin'.

Dans l'exemple suivant nous créons l'utilisateur 'adminuser' comme vous devrez créer un compte pour vous.

Nous allons créer l'utilisateur:
[source,prompt]
----
useradd -m -s /bin/bash adminuser
----

maintenant le mot de passe unix:
[source,prompt]
----
passwd adminuser
----

et maintenant le mot de passe samba:
[source,prompt]
----
smbpasswd -a adminuser
----

Créez et testez l'appartenance au groupe
[source,prompt]
----
adduser adminuser opsiadmin
getent group opsiadmin
----

la commande getent devrait avoir un résultat comme: +
'opsiadmin:!:1001:opsiconfd,adminuser'

Même 'root' doit être membre du groupe 'opsiadmin' afin d'utiliser les commandes d'administration de OPSI.

Tous les utilisateurs qui construisent des paquets OPSI (`opsi-makeproductfile`), qui installent (`opsi-package-manager`) ou qui modifient manuellement les fichiers de configuration doivent être également dans le groupe 'pcpatch' :

[source,prompt]
----
adduser adminuser pcpatch
----

Le Test 

[source,prompt]
----
grep pcpatch /etc/group
----
résultats +
'pcpatch:x:992:adminuser' 

root est autorisé à faire quoi que ce soit, même sans être explicitement enregistré dans le groupe.

[[opsi-getting-started-installation-config-dhcp]]
=== Configuration du DHCP

Important:

Un fonctionnement correct de la résolution des noms de et du DHCP est essentielle pour OPSI. Pour simplifier la configuration, la machine virtuelle OPSI est livré avec un serveur DHCP. Au contraire, dans la plupart des environnements de production, un serveur DHCP existe et doit être utilisé conjointement avec OPSI. Les deux alternatives sont décrites ci-dessous.

[[opsi-getting-started-installation-config-dhcp-at-opsi]]
==== Utiliser le serveur DHCP du serveur OPSI

Le serveur DHCP sur la VM OPSI est configuré sans les baux libres, donc les clients inconnus ne recevront aucun adresse IP de ce serveur DHCP. 

Si vous créez un client sur le serveur OPSI en utilisant le OPSI-configed il créera également une entrée dhcp pour ce client. Par conséquent, vous devez fournir l'adresse IP et l'adresse MAC.

[[opsi-getting-started-installation-config-at-other-server]]
==== Utilisation d'un serveur DHCP externe

Si vous utilisez un serveur DHCP externe vous pouvez désactiver le serveur DHCP sur le serveur OPSI:

[source,prompt]
----
/etc/init.d/dhcp3-server stop
update-rc.d -f dhcp3-server remove
update-rc.d dhcp3-server stop 20 2 3 4 5 .
----

Ensuite vous devez configurer votre serveur DHCP externe pour dire aux clients que notre serveur OPSI est maintenant le serveur de démarrage. Si votre DHCP externe s'exécute sur Linux, vous nécessité les entrées suivantes pour les clients dans le fichier `/etc/dhcp3/dhcpd.conf`.

'next-server <ip du serveur opsi>;' +
'filename "linux/pxelinux.0";'

Remplacez '<ip du serveur opsi>' avec l'adresse IP du serveur opsi.

En utilisant un serveur Windows les entrées correspondantes peuvent être 'bootserver' ou 'startserver' et 'bootfile' ou 'startfile' ('Options 66 / 67').

Si vous créez un client sur le serveur OPSI vous devez fournir l'adresse MAC, mais pas l'adresse IP.

[[opsi-getting-started-installation-config-dhcp-backend]]
==== Vérification de la configuration du backend pour les entrées DHCP

Que vous utilisiez le dhcp du serveur OPSI ou non, vous avez à configurer ce qui suit sur le serveur OPSI.

Dans le fichier `/etc/opsi/backendManager/dispatch.conf` est défini le backend qui dois être utilisé par OPSI (file, ldap, mysql).

Les lignes 'backend_.*' et 'host_.*' configurent comment les changements sur les entrées hôte sont traitées. Si vous utilisez le serveur DHCP du serveur OPSI le dhcpd backend doit être ajouté ici. +
L'entrée concordant est (par exemple):
[source,configfile]
----
backend_.*         : file, opsipxeconfd, dhcpd
host_.*            : file, opsipxeconfd, dhcpd
----

Si le serveur DHCP du serveur opsi n'est pas utilisé, aussi le dhcpd backend n'est pas nécessaire:
[source,configfile]
----
backend_.*         : file, opsipxeconfd
host_.*            : file, opsipxeconfd
----

Après avoir adapté la configuration du backend, vous devez exécuter:

[source,prompt]
----
opsi-setup --init-current-config
opsi-setup --set-rights
/etc/init.d/opsiconfd restart
/etc/init.d/opsipxeconfd restart
----

[[opsi-getting-started-installation-config-modules]]
=== Installation et vérification du fichier d'activation

Même si OPSI est open source, il ya des composants qui ne sont pas libres à ce moment. Ces éléments sont développés dans un projet de co-financement qui signifie que tant que les coûts de développement complet sont payés par les co-bailleurs de fonds, ils ne sont autorisés à être utilisés que par les co-bailleurs de fonds ou à des fins d'évaluation. Une fois acquis les coûts de développement, nous allons donner ces modules à tout le monde gratuitement. Pour contrôler l'utilisation de ces éléments jusqu'à ce qu'ils soient libres, il ya un fichier d'activation `/etc/opsi/modules`, qui est protégé contre les modifications par une signature électronique. Si ce fichier d'activation n'existe pas seules la partie libre de OPSI va fonctionner.

Si vous avez besoin pour évaluation d'un fichier d'activation temporaire valable s'il vous plaît contactez 'info@uib.de'. 

Si vous devenez un co-bailleur de fonds, vous obtiendrez un fichier d'activation illimitée. Copiez le fichier comme root dans `/etc/opsi`. 

Ensuite lancez la commande:

[source,prompt]
----
opsi-setup --set-rights /etc/opsi
----

Vous pouvez vérifier l'état ​​d'activation avec l'une des méthodes suivantes:

En utilisant opsi-configed choisissez l'entrée de menu Help/opsi-Module qui affiche une fenêtre avec l'état d'activation.

En ligne de commmande vous pouvez utiliser la commande opsi-admin avec la méthode 'backend_info'. (Remarque: Ne donnez jamais votre fichier d'activation ou la sortie de cette commande à des tierces personnes sans supprimer la signature).
[source,prompt]
----
opsi-admin -d method backend_info
----

Exemple:
[source,configfile]
----
{
"opsiVersion" : "4.0.1",
"modules" :
          {
          "customer" : "uib GmbH",
          "dynamic_depot" : true,
          "vista" : true,
          "treeview" : true,
          "license_management" : true,
          "swondemand" : true,
          "expires" : "2011-04-30",
          "valid" : true,
          "multiplex" : true,
          "signature" : "THIS-IS-NOT-A-VALID-SIGNATURE",
          "vpn" : true,
          "mysql_backend" : true,
          "high_availability" : true
          }
}
----

Nous rappelons que vous avez besoin de modules-file seulement pour les composants supplémentaires et non pour un usage général de opsi.

[[opsi-getting-started-installation-config-get-essential-products]]
=== Installation minimale de OPSI

Une importante nouvelle fonctionnalité de opsi 4.0 est un outil simple pour mettre à jour les produits OPSI à partir d'un dépot préconfigurée avec la commande  `opsi-product-updater`. Cet outil compare la version des produits installés localement avec les versions disponibles sur le dépot en vue de leur mise à jour. Il est également possible d'installer des produits supplémentaires. Le fonctionnement de `opsi-product-updater` works est configuré dans le fhicier `/etc/opsi/opsi-product-updater.conf`. Le dépot par défaut est http://download.uib.de/opsi4.0/products qui peut être utilisé pour installer le nouveau produits essentiels OPSI.

`opsi-product-updater` il a les caractéristiques de base suivantes:

* *autoInstall*: + 
Installe tous les produits disponibles dans le dépôt.

* *autoUpdate*: + 
Installe les produits disponibles à partir du dépôt, seulement s'il existe une ancienne version dejà installée sur votre serveur.

* *autoSetup*: 
Après l'installation d'une mise à jour d'un produit, une requête est envoyée pour configurer tous les clients qui ont installés ce produit.

Pour plus de détails sur cette fonctionnalité consultez le manuel opsi-manual.

Vous devriez maintenant télécharger et installer les produits OPSI avec la commande:
[source,prompt]
----
opsi-product-updater -i -vv
----

Si `opsi-product-updater` échoue, il peut s'avérer nécessaire d'ajouter un proxy dans le fichier de configuration:
[source,configfile]
----
[repository_uib]
proxy =
----

S'il vous plaît notez que les produits du système d'exploitation comme winxppro et win7 ne sont pas prêts après l'installation. L'installation doit être complétée par les fichiers d'installation des supports d'installation concordant (voir <<opsi-getting-started-firststeps-osinstall-fill-base-packages>>).

[[opsi-getting-started-installation-config-configed]]
=== Démarrer l'interface de gestion opsi-configed

Opsi offre avec l'interface opsi-configed une gestion confortable.

Vous pouvez la démarrer de plusieurs façons:

* dans un navigateur (n'importe où dans le réseau) à l'adresse  https://<opsi-server>:4447/configed un site web avec un OPSI-configed intégré apparaît. Condition préalable est une version  >= 1.6 de java installés.

* cliquez sur l'onglet droit de votre souris sur la surface graphique pour ouvrir le menu contextuel et choisissez „opsi config editor“.

* L'éditeur de configuration est également un composant de opsi-adminutils qui peut aussi être copié localement sur le client.

Connectez-vous avec un compte utilisateur du groupe opsiadmin (dans la VM OPSI vous pouvez utiliser root, étant donné que vous avez créé de nouveaux comptes utilisateurs)

La manipulation est facile, surtout auto expliquant. Alors, voici seulement une indication:
Toute modification doit être sauvegardé afin de prendre effet. Pour voir les changements vous devez recharger les données. 

Vous trouverez une description détaillée sur le manuel OPSI. 

[[opsi-getting-started-firststeps]]
== Première étape

La prochaine étape après l'installation du serveur OPSI est l'intégration des clients. Ici, nous avons deux possibilités:

* L'intégration des clients Windows existantes dans opsi
* Installation d'une nouvelle machine Windows utilisant opsi

Les deux méthodes sont décrites ci-dessous et vous êtes libre de choisir la manière dont vous souhaitez tester dans un premier temps.

[[opsi-getting-started-firststeps-software-deployment]]
=== Déploiement de logiciel

[[opsi-getting-started-firststeps-software-deployment-client-integration]]
==== Intégration des clients existants

Pour intégrer les clients Windows dans opsi, le produit opsi-client-agent doit être installé sur ces systèmes. Il y a différentes façons de le faire qui sont décrits ci-dessous. Après l'installation, vous devriez voir les client dans l'onglet 'clients' de opsi-configed.

[[opsi-getting-started-firststeps-software-deployment-client-integration-service-setup]]
===== Utilisation de service_setup.cmd

Cette méthode est le premier choix pour les installations sur un seul ordinateur ou à des fins de réparation. Pour les déploiements de masse, voir le chapitre ci-dessous.

. Connectez-vous avec des droits d'administration sur le client.
. montez le partage \\<opsiserver>\opt_pcbin sur une lettre de lecteur.
. lancer le script install\opsi-client-agent\service_setup.cmd
. Le script se connecte au opsi-webservice pour créer les informations client côté serveur, et pour obtenir le pckey. La connexion utilise la combinaison utilisateur/mot_de_passe enregistrée dans config.ini. Si la connexion échoue, une fenêtre de login apparaît, remplissez avec utilisateur/mot_de_passe. L'utilisateur fournie doit être membre du groupe 'opsiadmin'.

Attention: Lors de l'installation le client redémarre sans préavis!

[[opsi-getting-started-firststeps-software-deployment-client-integration-opsi-deploy]]
===== Utilisation de opsi-deploy-client-agent

Le script `opsi-deploy-client-agent` installe le opsi-client-agent directement depuis le serveur OPSI sur les clients. Pour les clients sont requis:

* un partage ouvert de C$
* un partage ouvert de admin$
* un compte administratif

Le script crée le informations client sur le serveur et copie les fichiers d'installation, les informations de configuration et le pckey pour le client et lance l'installation sur le client.

Avec le script `opsi-deploy-client-agent` vous pouvez installer une liste de clients par lots. Le script se trouve dans `/opt/pcbin/install/opsi-client-agent`.

Exécutez ce script avec les privilèges 'root'.

[source,prompt]
----
bonifax:/home/uib/oertel# cd /opt/pcbin/install/opsi-client-agent
bonifax:/opt/pcbin/install/opsi-client-agent# ./opsi-deploy-client-agent -h
Usage: opsi-deploy-client-agent [options] [host]...
Deploy opsi client agent to the specified clients.
The c$ and admin$ must be accessable on every client.
Simple File Sharing (Folder Options) should be disabled on the Windows machine.
Options:
    -h        show this help text
    -V        show version information
    -v        increase verbosity (can be used multiple times)
    -u        username for authentication (default: Administrator)
              example for a domain account: -u "<DOMAIN>\\<username>"
    -p        password for authentication
    -c        use fqdn instead of hostname for smb/cifs connection
    -x        try installation even if ping fails
    -r        reboot computer after installation
    -s        shutdown computer after installation
    -f        file containing list of clients (one hostname per line)
    -S        skip known opsi clients
    -t        number of concurrent deployment threads (default: 1)
----

[[opsi-getting-started-firststeps-software-deployment-product-tests]]
==== Premiers essais

[[opsi-getting-started-firststeps-software-deployment-product-tests-inventory]]
===== Inventaire matériel et logiciel avec les produits hwaudit and swaudit

Choisissez dans `opsi-configed`, le mode 'Configuration of clients' dans l'onglet 'Clients'.

Si ne l'avez pas encore fait, rechargez toutes les données en cliquant sur ​​le bouton de rechargement en haut, coin gauche de `opsi-configed` (ou utilisez le menu 'File').

Passez à l'onglet 'Product configuration', cherchez la ligne du logiciel système souhaité ('hwaudit' et/ou 'swaudit'). Allez à la colonne 'Requested Action' et sélectionnez l'action 'setup'. Enfin enregistrer avec un click sur le bouton (ou avec le menu contextuel).

Maintenant redémarrez le client, 'hwaudit' et/ou 'swaudit' devraient être lancé. Le client analyse l'inventaire matériel et/ou logiciels, et renvoient les résultats au serveur.

Vous pouvez voir ces données au niveau des onglets 'Hardware information' et 'Software inventory'.


[[opsi-getting-started-firststeps-software-deployment-product-tests-hwinvent]]
===== L'inventaire matériel avec le produit netboot hwinvent

Choisissez dans `opsi-configed`, le mode 'Configuration of clients' dans l'onglet 'Clients'.

Si ne l'avez pas encore fait, rechargez toutes les données en cliquant sur ​​le bouton de rechargement en haut, coin gauche de `opsi-configed` (ou utilisez le menu 'File').

Passez à l'onglet 'Netboot products', cherchez la ligne du logiciel système souhaité ('hwinvent'). Allez à la colonne 'Requested Action' et sélectionnez l'action 'setup'. Enfin enregistrer avec un click sur le bouton (ou avec le menu contextuel).

Maintenant redémarrez le client (over PXE), l'image de démarrage avec 'hwinvent' devrait être lancé. Par conséquent, le client après le redémarrage, charge une image de démarrage linux qui analyse le matériel et renverra les résultats au serveur.

Vous pouvez voir ces données par l'onglet 'Hardware information'.

[[opsi-getting-started-firststeps-osinstall]]
=== Installation d'une nouvelle machine Windows utilisant opsi (Installation OS)

[[opsi-getting-started-firststeps-osinstall-create-client-configed]]
==== Création d'un nouveau client via l'interface de gestion OPSI

Vous avez besoin d'un client (minimum 512 MB de RAM) qui est en mesure de démarrer par le réseau via PXE. Pour un premier essai, nous approuvons au téléchargement d'une image vmware correspondant sur download.uib.de (http://download.uib.de/vmware_pxeclient.zip). L'avantage de vmware (matériel virtuel) est le support des pilotes standard de Windows.

Maintenant, vous devez créer un client dans le système OPSI. Démarrez l'installation avec a) opsi-configed ou b) en ligne de commande.

.Interface graphique de opsi-configed:
Choisissez dans `opsi-configed`, le mode 'Configuration of clients' dans l'onglet 'Clients'.

Choisissez l'option de menu 'OpsiClient/Create new opsi client' et la description du client:

* Nom IP, 
* DNS (Internet) domaine, 
* description du client, 
* Adresse IP (qui est seulement demandé par le DHCP interne) et
* Adresse MAC  

Le client sera créé dans le base de données OPSI et (s'il est configuré) simultanément en tant que PXE-client dans la configuration DHCP sur le serveur OPSI.

.Ligne de commande opsi-admin

Un client OPSI peut être créé également par ligne de commande:

[source,prompt]
----
opsi-admin -d method host_createOpsiClient <client-id> [opsiHostKey] [description] [notes] [hardwareAddress] [ipAddress] [inventoryNumber] [oneTimePassword] [created] [lastSeen]
----

par exemple:

[source,prompt]
----
opsi-admin -d method host_createOpsiClient testclient.uib.local "Testclient" "" 00:0c:29:12:34:56 192.168.0.5
----

Pour voir tous les clients créés, choisissez dans `opsi-configed` le mode 'Configuration of clients' l'onglet 'Clients' et rechargez le données en appuyant sur 'F5' ou via le menu contextuel.

[[opsi-getting-started-firststeps-osinstall-tests-hwinvent]]
==== L'inventaire matériel avec le produit netboot hwinvent

Choisissez dans `opsi-configed`, le mode 'Configuration of clients' dans l'onglet 'Clients'.

Si ne l’avez pas encore fait, rechargez toutes les données en cliquant sur ​​le bouton de rechargement en haut, coin gauche de `opsi-configed` (ou utilisez le menu 'File').

Passez à l’onglet 'Netboot products', cherchez la ligne du logiciel système souhaité ('hwinvent'). Allez à la colonne 'Requested Action' et sélectionnez l’action 'setup'. Enfin enregistrer avec un click sur le bouton (ou avec le menu contextuel).

Maintenant redémarrez le client (over PXE), l’image de démarrage avec 'hwinvent' devrait être lancé. Par conséquent, le client après le redémarrage, charge une image de démarrage linux qui analyse le matériel et renverra les résultats au serveur.

Vous pouvez voir ces données par l’onglet 'Hardware information'.

[[opsi-getting-started-firststeps-osinstall-create-client-bootcd]]
==== Créer un nouveau client utilisant le opsi-client-bootcd

Sur le site de téléchargement OPSI vous trouverez dans http://download.uib.de/opsi4.0/ des images ISO de opsi-client-bootcd. Il suffit de télécharger la dernière image et la graver sur cdrom. Démarrez votre ordinateur à partir de ce CD. Vous devriez voir l'image suivante:


.Démarrer l'image opsi-client-boot-cd
image::../images/opsi-client-boot-cd.png["Screenshot: Start image opsi-client-boot-cd",width=400]

Choisissez 'Start opsi (english)'. Après un certain temps l'écran suivant apparaît. Si votre serveur DHCP donne l'adresse IP à un client inconnu, la plupart des choses sera achevée. Vous devez remplir les données manquantes. Au moins vous devez donner le nom d'hôte.

.bootimage/boot-cd écran de configuration
image::../images/boot-cd-config.png["Screenshot: bootimage/boot-cd configuration screen",width=400]

Confirmez avec 'OK'.

.bootimage / boot-cd:  Choisissez comment créer le client
image::../images/boot-cd-select.png["Screenshot: bootimage / boot-cd:  Choose how to create Client",width=200]

Choisissez 'Admin account'. Cela signifie que le client doit se faire enregistrer sur le serveur OPSI. Cette procédure doit être autorisée.

.bootimage / boot-cd: Authentifier en tant que membre du groupe opsiadmin
image::../images/boot-cd-authent.png["Screenshot: bootimage / boot-cd: Authentificate as member of opsiadmin group",width=400]

Vous obtiendrez une masque de connexion, où vous devez authentifier en tant que membre du groupe opsiadmin. Si vous réussi l'authentification, le client donnera ses données au serveur et le client sera créé sur le serveur. Dans la prochaine étape le serveur donne la liste des produits netboot, au client.

.bootimage / boot-cd:: Liste des produits netboot
image::../images/boot-cd-product.png["Screenshot: bootimage / boot-cd:: netboot product list",width=200]

Maintenant vous pouvez choisir le système d'exploitation que vous souhaitez installer (ou, par exemple hwinvent pour testing).

[[opsi-getting-started-firststeps-osinstall-fill-base-packages]]
==== Installation OS: Compléter l'ensemble de base pour Windows

L' ensemble de base inclut seuls les fichiers pour l'installation automatique du logiciel système - et non le logiciel système en lui même. (The base package, include, only files for automatic system software installation – not the system software for his own.)

Si vous souhaitez tester le système automatique d'installation de logiciels pour Windows XP ou Windows 7, vous devez compléter ces paquets.

[[opsi-getting-started-firststeps-osinstall-fill-base-packages-nt5]]
==== NT 5 family: XP, 2003

[[opsi-getting-started-firststeps-osinstall-fill-base-packages-nt5-i386]]
===== Copiez le répertoire i368

a) copiez le répertoire `i386` d'un CD d'installation pour Microsoft Win2003/WinXP professionnel dans le répertoire `/opt/pcbin/install/win2003` ou `/opt/pcbin/install/winxppro`. Lorsque la copie de fichiers est terminé, vous devez changer les droits du répertoire `i386/`. Basculer vers le répertoire `winxppro` ou `win2003` et tapez la commande suivante: 
[source,prompt]
----
opsi-setup --set-rights i386
----

Les fichiers peuvent également être copiés sur le réseau. Donc, vous devez connecter le partage 'opt_pcbin' comme utilisateur 'pcpatch' au serveur opsi. Vous trouverez le répertoire correspondant sous `install\winxppro` ou `install\win2003`.

[[opsi-getting-started-firststeps-osinstall-fill-base-packages-nt6]]
==== NT 6 family: Vista / 2008 / Win7

Parce que ces installations commencent seulement à partir d'un environnement Win32/Win64 nous devons construire une PE-Image, qui sera utilisé pour démarrer l'installation.

'"Pour installer une version 64-bit de Windows vous devez utiliser une version 64-bit de Windows PE. De même, pour installer une version 32-bit de Windows, vous devez utiliser une version 32-bit de Windows PE."' +
http://technet.microsoft.com/en-us/library/cc766093.aspx

Donc vous avez besoin du Kit d'installation automatisée (Windows AIK): +
http://www.microsoft.com/downloads/details.aspx?displaylang=en&FamilyID=696dd665-9f76-4177-a811-39c26d3b3b34

Ce que vous obtenez est un fichier ISO, qui pourra être gravés sur CD ou monté dans une machine virtuelle. Le contenu de ce CD doit être installé dans un système d'exploitation mentionnés dans la configuration système requise.

[[opsi-getting-started-firststeps-osinstall-fill-base-packages-nt6-pe]]
===== Création d'un PE

Les commandes pour créer un Windows PE dans la version 32- or 64-bit sont presque les mêmes, sauf pour les entrées *<ARCH>* ci-dessous. Ceux-ci doivent être soit *x86* , *amd64* ou *ia64*.

. Créer un environnement: +
Ouvrez un terminal en tant qu'administrateur (Start => Programs => Accessories => clic droit sur „Command Prompt“ => Run as… => Administrator) et exécutez la commande suivante:
[source,prompt]
----
"%ProgramFiles%\Windows AIK\Tools\PETools\copype.cmd" <ARCH> C:\winpe
----

. Préparer l'image pour opsi: +
Ouvrez un terminal en tant qu'administrateur et exécutez la commande suivante (sur une seule ligne):
[source,prompt]
----
"%ProgramFiles%\Windows AIK\Tools\<ARCH>\imagex.exe" /mountrw "C:\winpe\winpe.wim" 1 "C:\winpe\mount"
----

commande suivante (de nouveau dans une seule ligne):
[source,prompt]
----
echo c:\opsi\startnet.cmd > "C:\winpe\mount\Windows\System32\startnet.cmd"
----
(Remarque: Le fichier `startnet.cmd` sera créé par l'image de démarrage linux de OPSI en exécutant le script `setup.py`. Le fichier `startnet.cmd` contient l'appel pour wpeinit.)

commande suivante (de nouveau dans une seule ligne):
[source,prompt]
----
"%ProgramFiles%\Windows AIK\Tools\<ARCH>\imagex.exe" /commit /unmount "C:\winpe\mount"
----

commande suivante (de nouveau dans une seule ligne):
[source,prompt]
----
move "C:\winpe\winpe.wim" "C:\winpe\ISO\sources\boot.wim"
----

. Copiez le répertoire `C:\winpe\ISO` avec les nom de destination `winpe` dans `/opt/pcbin/install/win7/` respectivement `/opt/pcbin/install/win2008`.

Réglez les droits d'accès du fichier (par exemple): 
[source,prompt]
----
opsi-setup --set-rights /opt/pcbin/install/win7/winpe
----

[[opsi-getting-started-firststeps-osinstall-fill-base-packages-nt6-unattend]]
===== unattend.xml

Le fichier de contrôle pour l'installation sans assistance est le `unattend.xml` que vous trouverez ci-dessous `/opt/pcbin/install/win7/custom`. Si vous souhaitez apporter des modifications à ce fichier, faitez-le dans ce répertoire et non pas dans le répertoire OPSI.

Le fichier `unattend.xml` livré avec le paquet opsi, contient l'activation du compte administrateur avec le mot de passe 'nt123'.

Vous trouverez de la documentation pour `unattend.xml` (après l'installation du kit WAIK) dans le répertoire `c:\Program Files\Windows\Waik\docs\chms`.

[[opsi-getting-started-firststeps-osinstall-fill-base-packages-nt6-drivers]]
===== Intégration des pilotes

L'intégration des pilotes fonctionne à la manière habituelle décrite dans le manuel OPSI: Placez vos répertoires pilotes dans `/opt/pcbin/install/win7/drivers/drivers` et puis exécutez le script `create_driver_links.py`.

S'il vous plaît garder à l'esprit que Vista/Win7 acceptent seuls les pilotes signés. Donc, si vous souhaitez utiliser des packs de pilote comme les packs de pilote à partir de driverpacks.net, assurez-vous d'utiliser uniquement les versions Vista/Win7.

[[opsi-getting-started-firststeps-osinstall-fill-base-packages-nt6-installfiles]]
===== Fournir les fichiers d'installation

Copiez le DVD d'installation complète dans +
`/opt/pcbin/install/win7/installfiles`
Réglez les droits d'accès de fichier:
[source,prompt]
----
opsi-setup --set-rights /opt/pcbin/install/win7/installfiles
----

[[opsi-getting-started-firststeps-osinstall-fill-base-packages-nt6-logfiles]]
===== Les fichiers journaux de l'installation

* `c:\Windows\Panther\setupact.log`: +
Fichier journal jusqu'à la fin de la phase d'installation 4 (fonctionnant sous WinPE) 

* `c:\Windows\Panther\setupact.err`: +
Fichier journal des erreurs jusqu'à la fin de la phase d'installation 4 (fonctionnant sous WinPE) 

* `c:\Windows\Panther\UnattendGC\setupact.log`: +
Fichier journal depuis la phase spécialisé 

* `c:\Windows\Panther\UnattendGC\setupact.err`: +
Fichier journal des erreurs depuis la phase spécialisé

* `c:\Windows\System32\Winevt\Logs\*` 

* `c:\Windows\ntbtlog.txt` (seulement avec le protocole de démarrage activé) 

[[opsi-getting-started-firststeps-osinstall-productkey]]
==== Clé de produit Windows

Si vous utilisez le module de gestion de licence OPSI, vous pouvez gérer vos clés de produit Windows par la gestion des licences. Vous trouverez les informations sur la façon de le faire dans le manuel OPSI.

Si vous ne souhaitez pas utiliser le module de gestion des licences, la clé de produit peut être fourni utilisant les propriétés du produit:

Si vous avez encore créé un client, vous pouvez utiliser l'interface de gestion OPSI pour entrer la clé de produit:

* choisissez un client
* allez à l'onglet 'nettboot products'
* sélectionnez le produit (par exemple winxppro)
* allez à la propriété du produit 'productkey' (dans le coin inférieur droit de l'interface de gestion de opsi)
* entrez votre clé
* quittez le champ de saisie et enregistrez les modifications

Une autre possibilité est d'utiliser la ligne de commande. Sans donner un client spécial vous pourrez lire/modifier le serveur par défaut.
Pour lire le serveur par défaut, vous pouvez utiliser:
[source,prompt]
----
opsi-admin -d method getProductProperties_hash winxppro
----

Pour définir le serveur par défaut, vous pouvez utiliser (sur une seule ligne):
[source,prompt]
----
opsi-admin -d method setProductProperty winxppro "productkey" "ABCDE-FGHIJ-KLMNO-QRTUV-WXYZ1"
----

[[opsi-getting-started-firststeps-osinstall-start]]
==== Démarrer l'installation de Windows

Pour démarrer un'installation de Windows:

* choisissez un client

* allez à l'onglet 'nettboot products'

* sélectionnez le produit (par exemple winxppro)

* définir le 'action request' pour l'installation

* enregistrez le modifications en cliquant sur le crochet rouge (qui vire au vert)

Maintenant le client devrait charger l'image de boot linux de OPSI via le réseau et le démarrer. Avant que les installations Windows démarrent, vous devez confirmer une fois.


[[opsi-getting-started-firststeps-osinstall-structure]]
==== Structure des produits d'une installation sans assistance

Ce chapitre décrit les produits suivants

* win2k
* winxppro
* winvista
* win2003
* win2008
* winvista-x64
* win2008-x64
* win7
* win7-x64
* win2008r2

[[opsi-getting-started-firststeps-osinstall-structure-dirs]]
===== Aperçu de l'arborescence des répertoires

[source,configfile]
----
<productid>-
           |-i386/				    NT5 seulement: fichiers d'installation
           |-installfiles/		NT6/7 seulement: fichiers d'installation
           |-winpe/				    NT6/7 seulement
           |-opsi/				    scripts et modèles par opsi.org
           |  |-$oem$/				$oem$ selon MS
           |  |-posinst.d/		scripts après OS installer par opsi.org
           |  !-unattend.txt.template	  modèles par opsi.org
           |-custom/				  scripts et modèles par le client
           |  |-$oem$/				$oem$ selon MS par le client
           |  |-posinst.d/		scripts après OS installer par le client
           |  !-unattend.txt	unattend.txt par le client
           |-drivers/				  répertoire des pilotes
           |  |-drivers/			répertoire des pilotes
           |  |-pciids/				liens symboliques aux pilotes
           |  |-vendors/			liens symboliques aux pilotes
           |  |-classes/			liens symboliques aux pilotes
           |  |-usbids/				liens symboliques aux pilotes
           |  |-hdaudioids/		liens symboliques aux pilotes
           |  |-pci.ids				PCI-IDs DB
           |  !-usb.ids				USB-IDs DB
           |-setup.py				  script d'installation
           |-<productid>_<version>.control	méta-données (uniquement pour info)
           |-<productid>.files		    Liste des fichiers (créé automatiquement)
           |-create_driver_links.py		script de gestion des pilotes
           |-show_drivers.py			    script de gestion des pilotes
           |-download_driver_pack.py	script de gestion des pilotes
           !-extract_driver_pack.py		script de gestion des pilotes
----

[[opsi-getting-started-firststeps-osinstall-structure-files]]
===== Les fichiers


* `setup.py` +
C'est le script d'installation qui est exécuté par l'image de démarrage

* `<productid>_<version>.control` +
Contient le méta-données du produit préparé par le responsable du paquet. Ce fichier est ici seulement à titre d'information. Les modifications apportées à ce fichier seront sans aucun effet.

* `<productid>.files` +
Ce fichier est créé automatiquement et ne devrait pas être changé.

* `create_driver_links.py` +
`show_drivers.py` +
`download_driver_pack.py` +
`extract_driver_pack.py` +
Ce sont des scripts pour l'intégration pilote simplifié qui sont décrits dans son chapitre (<<opsi-getting-started-firststeps-osinstall-driverintegration,"L'intégration simplifié du pilote pour l'installation automatisée de l'OS">>).

[[opsi-getting-started-firststeps-osinstall-structure-i386]]
===== Répertoire i386 / installfiles / winpe


* `i386` +
Ce répertoire contient le fichier d'installation du répertoire `i386` du cd d'installation de Windows (NT5 = de Windows 2000 à XP)
Il est possible d'avoir plusieurs répertoires i386 (`i386` , `i386_en` , `i386_xxx`). Le répertoire 'i386' utilisé pour l'installation est contrôlée par la propriété du produit 'i386_dir'.

* `installfiles` +
Ce répertoire contient tous les fichiers d'installation du DVD de Windows (NT6 = Windows Vista et au-dessus)

* `winpe` +
Ce répertoire contient à Windows Vista et surtout une l'image WinPE bootable.

[[opsi-getting-started-firststeps-osinstall-structure-opsicustom]]
===== Répertoire opsi / custom

Ces deux répertoires contiennent des scripts et des fichiers de configuration pour l'installation de l'OS. Pendant l'installation ils travaillent ensemble avec une priorité pour les fichiers du répertoire personnalisé.

Le répertoire OPSI contient des fichiers et des modèles qui sont mis à jour par opsi.org et peuvent-être remplacé par la mise à jour suivante. Donc ce n'est pas une bonne idée d'apporter des modifications personnalisées à cet endroit. S'il vous plaît utilisez le répertoire personnalisé pour cette fin qui n'est pas objet de modifications par opsi.org.

Le sous-répertoire `postinst.d` contient des scripts qui sont exécutés après l'installation complété de l'OS est complété par `posinst.cmd`. Ces scripts sont nécessaires pour installer par exemple opsi-client-agent. Le scripts seront exécutés dans l'ordre alphabétique. Pour rendre plus facile à voir dans quel ordre les scripts sont exécutés, le nom commence toujours avec 2 chiffres (`10_dhcp.cmd`). Si vous voulez faire des extensions s'il vous plaît utilisez le répertoire custom/postinst.d et les numéros de départ entre les 10, 20, 30 ,... (par exemple `13_myscript.cmd`). Le numéros de départ 10,20, 30,... sont réservés à l'usage de opsi.org / uib gmbh. Le script `99_cleanup.cmd` est le dernier et sert a lancer un redémarrage.

[[opsi-getting-started-firststeps-osinstall-structure-drivers]]
===== Répertoire drivers

Ce répertoire est utilisé pour l'intégration des pilotes et est décrits dans le chapitre suivant.

[[opsi-getting-started-firststeps-osinstall-driverintegration]]
==== L'intégration simplifié du pilote pour l'installation automatisée de l'OS

Si certains matériels client ne sont pas supportée par les pilotes Windows standard, il pourrait être utile et parfois même nécessaire d'intégrer de nouveaux pilotes dans l'installation automatisée. En ce qui concerne les dispositifs réseau, ceci est très recommandable, car un client sans le réseau n'est pas accessible à distance, et il ne pourra pas se connecter à aucun dépôt pour repatrier automatiquement les logiciels necessaire. 

Opsi soutient votre travail avec une détection et une intégration des pilotes automatique. Vous n'avez qu'à placer les drivers dans le bon répertoire. Par l'appel d'un script  (`create_driver_links.py`) un catalogue est créé, qui permet à l'image de démarrage de trouver les bons pilotes pour le matériel détecté via l'identification PCI, USB ou HD-Audio. Les pilotes pour les contrôleurs de stockage de masse (les pilotes en mode texte) peuvent également être intégrés de la même manière.

Le serveur peut fournir des pilotes supplémentaires pour être installé lors de l'installation Windows. Tous ces pilotes doivent posséder un fichier '.inf', qui détient les informations d'installation du pilote.Tous les pilotes qui sont paquetés en tant que fichier exécutable, ne peuvent pas être utilisés à cette fin (mais souvent, ils peuvent être dépaquetés pour obtenir les fichiers d'installation simple).
Si vous avez une machine fonctionnant avec les bons pilotes installés, vous pouvez utiliser le programme 'double driver' (http://www.boozet.org/dd.htm) pour extraire ces pilotes et les enregistrer sur le serveur OPSI.

Si vous avez juste certains matériels différents, vous pouvez prendre les pilotes fournis par le fabricant du matériel et mettre ça dans le partage de fichiers de la distribution.

Mais si vous avez un grand nombre de matériels différents, il peut être pratique d'utiliser des paquets prêts pour un tas de pilotes Windows, tel que fourni par 
http://driverpacks.net/.

Vous pouvez télécharger le driverpacks actuel (!!! environ 2,5 GB !!!) depuis http://driverpacks.net/DriverPacks/overview.php et l'enregistrer sur le serveur. Puis appeler: 
[source,prompt]
----
/opt/pcbin/install/winxppro/extract_driver_pack.py <chemin vers le driverpacks compressé>
----

Les pilotes seront décompressé et stockés dans le répertoire `winxppro/drivers/drivers/D`.

Structure de l'arborescence du répertoire des pilotes:
[source,configfile]
----
/opt/
  !-pcbin/
     !-install/
        !-winxppro/
           !-drivers
              |-classes/            (liens vers les pilotes par les classes de périphériques)
              |-hdaudioids/         (liens vers les pilotes HD-Audio)
              |-pciids/             (liens vers les pilotes via identification PCI)
              |-pci.ids             (base de données identification PCI)
              |-usbids/             (liens vers les pilotes via identification USB)
              |-usb.ids             (base de données identification USB)
              |-vendors/            (Liens vers les pilotes par les fournisseurs)
              !-drivers             (espace générale pour les packs de pilotes)
                 |-additional/      (pour les pilotes qui ne sont pas détectés)
                 |-buildin/         (fichiers inf à partir du repertoire i386)
                 |-preferred/       (les pilotes préféré pour votre matériel)
                 !-mydriverpacks/   (pack de pilotes exemple)
----

Des pilotes supplémentaires peuvent être ajoutées, chacune dans son sous-répertoire dans `winxppro/drivers/drivers/preferred`.

Après l'ajout de nouveaux pilotes (ou tout autre changement) modifier les droits avec (par exemple):
[source,prompt]
----
opsi-setup --set-rights /opt/pcbin/install/winxppro/drivers
----

Exécutez ensuite le script `create_driver_links.py` à partir du répertoire winxppro. Le script recherche tous les répertoires sous `drivers` et crée des liens pour attribuer les pilotes à son matériels (utilisant PCI-IDs, USB-IDs, HD-Audio-IDs). Les pilotes trouvé sous le répertoire `preferred` seront en effet préféré contre d'autres avec les mêmes ID sous d'autres répertoires. Lors de l'installation, le script `setup.py` à partir de l'image de démarrage, identifie le matériels du client et détermine les pilotes requis. Les pilotes seront copiés sur le disque dur, et le fichier `unattend.txt` (qui est le fichier de contrôle pour l'installation automatisée de Windows) sera corrigé en conséquence.

Le script `create_driver_links.py` extraits aussi les informations du pilote depuis le répertoire `i386` ou `installfiles`  vers le répertoire 'buildin'. Si vous apportez des modifications à ces répertoires (par exemple, en intégrant un service pack) vous devez supprimer le répertoire buildin et appeler à nouveau `create_dirver_links.py`.

S'il ya des données d'inventaire matériel pour un client, ces données peuvent être utilisées pour dresser la liste des pilotes qui seront choisis par l'image de démarrage pour ce client:
[source,prompt]
----
winxppro/show_drivers.py <nom_du_client>
----

Des pilotes supplémentaires qui doivent être utilisés par l'installation même si elles n'ont pas été sélectionnées via PCI-IDs doivent être placée sous le répertoire   `winxppro/drivers/drivers/additional`. En utilisant la propriété du produit 'additional_drivers' il est possible de donner une liste, séparé par des virgule, des chemins des pilotes sous le répertoire supplémentaire qui devrait être utilisé par le programme d'installation de Windows. Les répertoires indiqués dans la propriété 'additional_drivers' sont recherchées de façon récursive pour les pilotes et tous les répertoires pilotes détecté sont intégrés à l'installation. Vous pouvez utiliser les liens symboliques dans le répertoire des pilotes supplémentaires.

Exemple de la sortie de show_drivers.py : 

[source,prompt]
----
./show_drivers.py pcdummy

PCI-Devices
   [(Standardsystemgeräte), PCI Standard-PCI-zu-PCI-Brücke]
      No driver - device directory  /opt/pcbin/install/winxppro/drivers/pciids/1022/9602 not found
   [ATI Technologies Inc., Rage Fury Pro (Microsoft Corporation)]
      Using build-in windows driver
   [(Standard-IDE-ATA/ATAPI-Controller), Standard-Zweikanal-PCI-IDE-Controller]
      /opt/pcbin/install/winxppro/drivers/drivers/D/M/N/123
   [Realtek Semiconductor Corp., Realtek RTL8168C(P)/8111C(P) PCI-E Gigabit Ethernet NIC]
      /opt/pcbin/install/winxppro/drivers/drivers/preferred/realtek_gigabit_net_8111_8168b
   [IEEE 1394 OHCI-konformer Hostcontroller-Hersteller, OHCI-konformer IEEE 1394-Hostcontroller]
      No driver - device directory '/opt/pcbin/install/winxppro/drivers/pciids/197B/2380' not found
   [Advanced Micro Devices, Inc., AMD AHCI Compatible RAID Controller]
      /opt/pcbin/install/winxppro/drivers/drivers/preferred/ati_raid_sb7xx
   [(Standard-USB-Hostcontroller), Standard OpenHCD USB-Hostcontroller]
      No driver - device directory '/opt/pcbin/install/winxppro/drivers/pciids/1002/4397' not found
   [ATI Technologies Inc, ATI SMBus]
      /opt/pcbin/install/winxppro/drivers/drivers/preferred/ati_smbus

USB-Devices
   [(Standard-USB-Hostcontroller), USB-Verbundgerät]
      /opt/pcbin/install/winxppro/drivers/drivers/preferred/brother_844x_pGerb
   [Microsoft, USB-Druckerunterstützung]
      /opt/pcbin/install/winxppro/drivers/drivers/preferred/brother_844x_pGerb

Additional drivers
   [ati_hdaudio_azalia]
     /opt/pcbin/install/winxppro/drivers/drivers/additional/ati_hdaudio_azalia
----

[[opsi-getting-started-softwintegration]]
== Intégration des paquets de nouveaux logiciels dans le déploiement de logiciels opsi.

L'objectif principal de la distribution de logiciels est d'accomplir l'installation du logiciel automatiquement sans interaction de l'utilisateur. L'installation de logiciels et l'activité des utilisateurs doivent être strictement séparés. Dans la plupart des cas, le processus d'installation nécessite des privilèges d'administration que l'utilisateur n'a généralement pas. Donc, le processus d'installation doit être effectuée de façon indépendante de l'utilisateur. De cette façon, l'utilisateur ne peut pas interférer ni être affecté par un processus d'installation du logiciel. 

Pour ce faire, vous devez écrire un script pour le moteur d'installation de opsi-winst.

[[opsi-getting-started-softwintegration-tutorial]]
=== Un petit tutoriel: Comment écrire un script opsi-winst

[[opsi-getting-started-softwintegration-tutorial-introduction]]
==== Introduction

Ce tutoriel devrait vous aider à commencer avec opsi. Ce n'est pas un remplacement pour la formation professionnelle (que vous pouvez commander par uib) ou encore l'étude des manuels complets.


Vous trouverez les manuels OPSI à: +
http://download.uib.de/doku
http://download.uib.de/opsi_stable/doku

Le plus important:
Winst reference card et le manuel Winst

Wiki (Script, Conseils, Liens): +
http://www.opsi.org/opsi_wiki/OpsiWikiPage

Forum de Support: +
http://forum.opsi.org

Formation et Support: +
Suivez une formation par uib gmbh ou un partner opsi: +
http://www.opsi.org/support/

[[opsi-getting-started-softwintegration-tutorial-general]]
==== Méthodes d'installation non interactive

Peu importe si vous utilisez OPSI ou un autre produit, il existent trois façons d'installer un logiciel sans interaction de l'utilisateur: 

. *Unattended ou installation en mode silencieux* +
Les programmes d'installation existante, du fabricant de logiciels d'origine, peuvent être exécuté à partir d'un script opsi-winst en mode 'silent' ou 'unattended'. Cela dépend du programme d'installation si le mode d'installation silencieuse est prise en charge. Un cas particulier de cette méthode est l'installation sans assistance de paquets MSI.

. *Installation interactive avec réponses enregistrées* +
Les réponses interactives, requis par le programme d'installation d'origine, peuvent être donnée automatiquement à l'aide de l'outil gratuit 'Autoit' ou Autohotkey. Cela signifie fournir un script autoIt pour une installation automatique.

. *Analyse et Repaquetage* +
La configuration standard peut être analysé et 'recorded' pour faire les tâches d'installation directement par le programme 'opsi-winst'. Habituellement, ca veut dire créer le fichier d'installation du système fichiers local et de patcher le registre.

NOTE: opsi prend en charge toutes ces variantes. +
Habituellement, une combinaison de toutes les différentes manières, dans un script, fait le meilleur travail. Comme faire l'installation de base par la configuration d'origine si possible, puis faire un peu de personnalisation, par un patch du registre ou un fichier de configuration de base.


[[opsi-getting-started-softwintegration-tutorial-script-structure]]
==== Structure d'un script winst

Dans un premier temps un exemple simple d'un script winst:
[source,winst]
----
[Actions]
WinBatch_tightvnc_silent_install

[WinBatch_tightvnc_silent_install]
"%ScriptPath%\tightvnc-1.3.9-setup.exe" /silent
----

Un script winst contient des sections *primary* et *secondary*. Les entêtes de sections sont entre crochets, comme vous le savez à partir des fichiers ini. Les section principale est ici [Actions] et la section secondaire est ici [winbatch_...]. 

Le travail de base comme le démarrage des programmes ou la copie de fichiers n'est pas faite dans les sections primaires, mais dans les sections secondaires. Ces sections secondaires sont à sujet précis et ont une syntaxe spécifique en fonction de leur thème spécifique..

Le nom d'une section secondaire commence avec un mot réservé pour le type de section secondaire suivi d'un identificateur libre.


A cet exemple, la section primaire +[Actions]+  appelle une section secondaire +[WinBatch_tightvnc_silent_install]+. +
Cette section secondaire est du type +WinBatch+. Le contenu des sections secondaires de type 'winbatch' sont exécutées par l'API Windows. Dans ce cas, le programme `tightvnc-1.3.9-setup.exe` sera lancé avec le paramètre +/silent+.

[[opsi-getting-started-softwintegration-tutorial-primary-sections]]
==== Sections primaires:

Initial::
La section +[Initial]+ est utilisée pour définir les paramètres d'exécution. +
Cette section est facultative.

Actions::
La section +[Actions]+ est le coeur du programme principale. +
Certaines parties du code, qui sont appelés plus d'une fois, peuvent être écrite en sous-sections.

Sous-sections::
Sections primaires qui peuvent être appelée plusieurs fois ou qui ont leur code dans des fichiers externes.

Les sections primaires sont le programme principal qui contrôle le flux du programme. Pour cela vous avez:

* Variables: chaînes et les listes de chaînes
* déclarations if else endif
* for loops par le biais des listes de chaînes
* Fonctions

.double code for deinstallation
image::../images/opsi-winst-without-delsub.png["double code for deinstallation",width=300]

.avoid double code by using sub sections
image::../images/opsi-winst-with-delsub.png["avoid double code by using sub sections",width=300]

[[opsi-getting-started-softwintegration-tutorial-secondary-sections]]
==== Types important de sections secondaires

Files::
Fichier des opérations similaires

* copie (en ce qui concerne les informations de interne version, récursif, ...)
* suppression des fichiers ou des répertoires
* création des répertoires


WinBatch::
Est utilisé pour appeler des programmes par l'intermédiaire de l'API Windows. Par exemple, pour appeler les programmes d'installation en mode silencieux.

DosBatch/DosInAnIcon::
Le contenu de ces sections est interprété par `cmd.exe` comme un fichiers batch normale. +
Une variante des 'DosBatch' est 'DosInAnIcon', qui est appelé dans une fenêtre réduite.

ExecWith::
Le contenu des cette section est interprété par le programme qui est donné comme paramètre pour cette section (par exemple AutoIt).

Registry::
Les sections 'Registry' sont utilisées pour les manipulations du registre.

Linkfolder::
Les sections 'Linkfolder' sont utilisés pour la manipulation du menu de démarrage et des icônes du bureau.

[[opsi-getting-started-softwintegration-tutorial-global-constants]]
==== Constantes globales

Les constantes globales sont des espaces réservés qui peuvent être utilisés dans les sections primaires et secondaires. Ces espaces réservés sont remplacés par leurs valeurs à l'exécution.

Exemples:

+%ProgramFiles32Dir%+:: c:\program files
+%Systemroot%+::        c:\windows
+%System%+::            c:\windows\system32
+%Systemdrive%+::       c:\
+%Scriptpath%+::        <chemin d'accès au script exécutant>

[[opsi-getting-started-softwintegration-tutorial-second-example]]
==== Deuxième exemple: tightvnc

Aux fins des explications un script simple pour une installation de TightVNC. Ce script ne doit contenir que l'appel à WinBatch pour l'installation en mode silencieux. Mais si vous appelez cette installation en mode silencieux plus d'une seule fois, il apparaît une fenêtre de confirmation (qui est un bug dans l'installateur). Cette fenêtre de confirmation sera fermé par un script 'autoit' si elle apparaît.

tightvnc.ins:
[source,winst]
----
[Actions]
Message "Installiere tightvnc 1.3.9 ..."
ExecWith_autoit_confirm "%ScriptPath%\autoit3.exe" WINST /letThemGo
WinBatch_tightvnc_silent_install
KillTask "autoit3.exe"

[WinBatch_tightvnc_silent_install]
"%ScriptPath%\tightvnc-1.3.9-setup.exe" /silent

[ExecWith_autoit_confirm]
; Wait for the confirm dialog which only appears if tightvnc was installed before as service
; Waiting for the window to appear
WinWait("Confirm")
; Activate (move focus to) window
WinActivate("Confirm")
; Choose answer no
Send("N")
----

[[opsi-getting-started-softwintegration-tutorial-elementary-commands]]
==== Commandes élémentaires pour les sections primaires
===== Variable chaîne de caractères

Déclaration d'une variable:: DefVar <nom de la variable>

Fixer une valeur:: Set <nom de la variable> = <value>

Exemple:
[source,winst]
----
DefVar $ProductId$
Set $ProductId$ = "firefox"
----

IMPORTANT: L'utilisation de variable chaîne de caractères est différente dans les sections primaires et secondaires. Dans la section primaire les Variable chaîne de caractères sont traités comme des objets indépendants. Les variable chaîne de caractères peuvent seulement être déclaré et réglé sur les valeurs dans les sections primaires. Par conséquent, vous devez utiliser un opérateur ('+') pour concaténer des variables et chaînes de caractères dans une expression de chaîne. +
Exemple:`"Installing "+$ProductId$+" ..."` +
Dans les sections secondaires les variables chaîne de caractères sont utilisés comme un espace réservé pour leurs valeurs. +
Example: `"Installing $ProductId$ ..."` +
Vous devez garder cela à l'esprit si vous copiez et collez les expressions de chaîne entre les sections primaires et secondaires. +
L'avantage des ce genre de manipulation des variables de chaîne est qu'il est possible d'utiliser ces variables dans les sections secondaires qui sont interprétés par d'autres programmes (DosBatch / Execwith).

===== Message / showbitmap

Afficher du texte pendant l'exécution: +
`Message <chaîne de caractères>`

Exemple:
[source,winst]
----
Message "Installing "+ $ProductId$ +" ..."
----

Afficher une image lors de l'installation: +
`ShowBitMap [<nom du fichier>] [<sous-titre>]`

Exemple:
[source,winst]
----
ShowBitmap "%ScriptPath%\python.png" "Python"
----

===== if [else] endif

*Syntaxe:*
[source,winst]
----
if <condition>
	;statement(s)
[
else
	;statement(s)
]
endif
----

===== Fonctions

HasMinimumSpace:: Vérifie l'espace libre sur le disque dur.
FileExists:: Vérifie l'existence d'un fichier ou d'un répertoire.

===== Erreur, journalisation et commentaires
comment char ';':: Les lignes commençant par ';' char sont tout simplement ignorés.
comment:: écrit un commentaire dans le fichier journal
LogError:: écrit des messages d'erreur dans le fichier journal
isFatalError::abandon l'execution des scripts et retourne l'état d'installation 'failed' au serveur.

===== Exigences

requiredWinstVersion:: Version minimale requise pour opsi-winst


[[opsi-getting-started-softwintegration-tutorial-template]]
==== Troisième exemple: Le modèle générique 'opsi-template'

On vous encourage à utiliser ce modèle à chaque fois que vous créez des produits propres opsi. Ne utilisez pas une copie de ce manuel mais regardez sur http://download.uib.de pour une nouvelle version du paquet 'opsi-template'. Utilisant la commande opsi-package-manager vous pouvez installer ce paquet (-i) ou l'extraire (-x) sur votre serveur, puis récupérer les scripts.

.setup.ins: script d'installation
[source,winst]
----
; Copyright (c) uib gmbh (www.uib.de)
; This sourcecode is owned by uib
; and published under the Terms of the General Public License.
; credits: http://www.opsi.org/credits/

[Actions]
requiredWinstVersion >= "4.10.5"

DefVar $MsiId$
DefVar $UninstallProgram$
DefVar $LogDir$
DefVar $ProductId$
DefVar $MinimumSpace$
DefVar $InstallDir$
DefVar $ExitCode$
DefVar $LicenseRequired$
DefVar $LicenseKey$
DefVar $LicensePool$

Set $LogDir$ = "%SystemDrive%\tmp"

; ----------------------------------------------------------------
; - Please edit the following values                             -
; ----------------------------------------------------------------
Set $ProductId$       = "opsi-template"
Set $MinimumSpace$    = "1 MB"
; the path were we find the product after the installation
Set $InstallDir$      = "%ProgramFilesDir%\path to the product"
Set $LicenseRequired$ = "false"
Set $LicensePool$     = "p_" + $ProductId$
; ----------------------------------------------------------------

if not(HasMinimumSpace ("%SystemDrive%", $MinimumSpace$))
	LogError "Not enough space on %SystemDrive%, " + $MinimumSpace$ + " on drive %SystemDrive% needed for " + $ProductId$
	isFatalError
	; Stop process and set installation status to failed
else
	comment "Show product picture"
	ShowBitmap "%ScriptPath%\\" + $ProductId$ + ".png" $ProductId$
	
	if FileExists("%ScriptPath%\delsub.ins")
		comment "Start uninstall sub section"
		Sub "%ScriptPath%\delsub.ins"
	endif
	
	Message "Installing " + $ProductId$ + " ..."
	
	if $LicenseRequired$ = "true"
		comment "Licensing required, reserve license and get license key"
		Sub_get_licensekey
	endif
	
	comment "Start setup program"
	Winbatch_install
	Sub_check_exitcode
	
	comment "Copy files"
	Files_install
	
	comment "Patch Registry"
	Registry_install
	
	comment "Create shortcuts"
	LinkFolder_install
	
	; comment "Test for installation success"
	; Test if software marked as installed in registry
	; if (GetRegistryStringValue("[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\{XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX}] DisplayName") = "")
	; 	logError "Fatal: After Installation [HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\{XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX}] not found"
	; 	isFatalError
	; else
	; 	comment "Successful Installation"
	; endif

endif

[Winbatch_install]
; Choose one of the following examples as basis for your installation
; You can use $LicenseKey$ var to pass a license key to the installer
;
; === Nullsoft Scriptable Install System =================================
; "%ScriptPath%\Setup.exe" /S
;
; === MSI package ========================================================
; You may use the parameter PIDKEY=$Licensekey$
; msiexec /i "%ScriptPath%\some.msi" /l* "$LogDir$\$ProductId$.install_log.txt" /qb! ALLUSERS=2 REBOOT=ReallySuppress
;
; === InstallShield + MSI=================================================
; Attention: The path to the log file should not contain any whitespaces
; "%ScriptPath%\setup.exe" /s /v" /l* $LogDir$\$ProductId$.install_log.txt /qb! ALLUSERS=2 REBOOT=ReallySuppress"
; "%ScriptPath%\setup.exe" /s /v" /qb! ALLUSERS=2 REBOOT=ReallySuppress"
;
; === InstallShield ======================================================
; Create setup.iss answer file by running: setup.exe /r /f1"c:\setup.iss"
; "%ScriptPath%\setup.exe" /s /sms /f1"%ScriptPath%\setup.iss" /f2"$LogDir$\$ProductId$.install_log.txt"
;
; === Inno Setup ========================================================
; http://unattended.sourceforge.net/InnoSetup_Switches_ExitCodes.html
; You may create setup answer file by: setup.exe /SAVEINF="filename"
; You may use an answer file by the parameter /LOADINF="filename"
; "%ScriptPath%\setup.exe" /sp- /silent /norestart

[Files_install]
; Example of recursively copying some files into the installation directory:
;
; copy -s "%ScriptPath%\files\*.*" "$InstallDir$"

[Registry_install]
; Example of setting some values of an registry key:
;
; openkey [HKEY_LOCAL_MACHINE\Software\$ProductId$]
; set "name1" = "some string value"
; set "name2" = REG_DWORD:0001
; set "name3" = REG_BINARY:00 af 99 cd

[LinkFolder_install]
; Example of deleting a folder from AllUsers startmenu:
;
; set_basefolder common_programs
; delete_subfolder $ProductId$
;
; Example of creating an shortcut to the installed exe in AllUsers startmenu:
;
; set_basefolder common_programs
; set_subfolder $ProductId$
;
; set_link
; 	name: $ProductId$
; 	target: $NewExe$
; 	parameters:
; 	working_dir: $InstallDir$
; 	icon_file:
; 	icon_index:
; end_link
;
; Example of creating an shortcut to the installed exe on AllUsers desktop:
;
; set_basefolder common_desktopdirectory
; set_subfolder ""
;
; set_link
; 	name: $ProductId$
; 	target: $NewExe$
; 	parameters: /some_param
; 	working_dir: $InstallDir$
; 	icon_file: $NewExe$
; 	icon_index: 2
; end_link

[Sub_get_licensekey]
comment "License management is enabled and will be used"

comment "Trying to get a license key"
Set $LicenseKey$ = demandLicenseKey ($LicensePool$)
; If there is an assignment of exactly one licensepool 
; to the product the following call is possible:
; Set $LicenseKey$ = demandLicenseKey ("", $ProductId$)
;
; If there is an assignment of a license pool 
; to a windows software id, it is possible to use:
; DefVar $WindowsSoftwareId$
; $WindowsSoftwareId$ = "..."
; Set $LicenseKey$ = demandLicenseKey ("", "", $WindowsSoftwareId$)

DefVar $ServiceErrorClass$
set $ServiceErrorClass$ = getLastServiceErrorClass
comment "Error class: " + $ServiceErrorClass$

if $ServiceErrorClass$ = "None"
	comment "Everything fine, we got the license key '" + $LicenseKey$ + "'"
else
	if $ServiceErrorClass$ = "LicenseConfigurationError"
		LogError "Fatal: license configuration must be corrected"
		LogError getLastServiceErrorMessage
		isFatalError
	else
		if $ServiceErrorClass$ = "LicenseMissingError"
			LogError "Fatal: required license is not supplied"
			isFatalError
		endif
	endif
endif



[Sub_check_exitcode]
comment "Test for installation success via exit code"
set $ExitCode$ = getLastExitCode
; informations to exit codes see
; http://msdn.microsoft.com/en-us/library/aa372835(VS.85).aspx
; http://msdn.microsoft.com/en-us/library/aa368542.aspx
if ($ExitCode$ = "0")
	comment "Looks good: setup program gives exitcode zero"
else
	comment "Setup program gives a exitcode unequal zero: " + $ExitCode$
	if ($ExitCode$ = "1605")
		comment "ERROR_UNKNOWN_PRODUCT 1605 This action is only valid for products"
		comment "that are currently installed."
		comment "Uninstall of a not installed product failed - no problem"
	else
		if ($ExitCode$ = "1641")
			comment "looks good: setup program gives exitcode 1641"
			comment "ERROR_SUCCESS_REBOOT_INITIATED 1641 The installer has initiated a restart. This message is indicative of a success."
		else
			if ($ExitCode$ = "3010")
				comment "looks good: setup program gives exitcode 3010"
				comment "ERROR_SUCCESS_REBOOT_REQUIRED 3010 A restart is required to"
				comment "complete the install. This message is indicative of a success."
			else
				logError "Fatal: Setup program gives an unknown exitcode unequal zero: "
				logError $ExitCode$
				isFatalError
			endif
		endif
	endif
endif
----

.delsub.ins: sous-section de désinstallation externes  
[source,winst]
----
; Copyright (c) uib gmbh (www.uib.de)
; This sourcecode is owned by uib gmbh
; and published under the Terms of the General Public License.
; credits: http://www.opsi.org/credits/


Set $MsiId$ = "{XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX}"
Set $UninstallProgram$ = $InstallDir$ + "\uninstall.exe"

Message "Uninstalling " + $ProductId$ + " ..."

if FileExists($UninstallProgram$)
	comment "Uninstall program found, starting uninstall"
	Winbatch_uninstall
	sub_check_exitcode
endif
if not (GetRegistryStringValue("[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\\" + $MsiId$ + "] DisplayName") = "")
	comment "MSI id " + $MsiId$ + " found in registry, starting msiexec to uninstall"
	Winbatch_uninstall_msi
	sub_check_exitcode
endif

comment "Delete files"
Files_uninstall

comment "Cleanup registry"
Registry_uninstall

comment "Delete program shortcuts"
LinkFolder_uninstall

[Winbatch_uninstall]
; Choose one of the following examples as basis for program uninstall
;
; === Nullsoft Scriptable Install System ==================================
; "$UninstallProgram$" /S
;
; === Inno Setup ==========================================================
; "$UninstallProgram$" /silent /norestart


[Winbatch_uninstall_msi]
msiexec /x $MsiId$ /qb! REBOOT=ReallySuppress

[Files_uninstall]
; Example for recursively deleting the installation directory 
; (do not forget the trailing backslash):
;
; delete -sf "$InstallDir$\"

[Registry_uninstall]
; Example of deleting a registry key:
;
; deletekey [HKEY_LOCAL_MACHINE\Software\$ProductId$]

[LinkFolder_uninstall]
; Example of deleting a folder from AllUsers startmenu:
;
; set_basefolder common_programs
; delete_subfolder $ProductId$
;
; Example of deleting a shortcut from AllUsers desktop:
;
; set_basefolder common_desktopdirectory
; set_subfolder ""
; delete_element $ProductId$


[Sub_check_exitcode]
;(.... siehe oben .....)
----

.uninstall.ins: script de désinstallation
[source,winst]
----
; Copyright (c) uib gmbh (www.uib.de)
; This sourcecode is owned by uib gmbh
; and published under the Terms of the General Public License.
; credits: http://www.opsi.org/credits/

[Actions]
requiredWinstVersion >= "4.10.5"

DefVar $MsiId$
DefVar $UninstallProgram$
DefVar $LogDir$
DefVar $ExitCode$
DefVar $ProductId$
DefVar $InstallDir$
DefVar $LicenseRequired$
DefVar $LicensePool$

Set $LogDir$ = "%SystemDrive%\tmp"

; ----------------------------------------------------------------
; - Please edit the following values                             -
; ----------------------------------------------------------------
Set $ProductId$       = "opsi-template"
Set $InstallDir$      = "%ProgramFilesDir%\path to the product"
Set $LicenseRequired$ = "false"
Set $LicensePool$     = "p_" + $ProductId$
; ----------------------------------------------------------------


comment "Show product picture"
ShowBitmap "%ScriptPath%\\" + $ProductId$ + ".png" $ProductId$

Message "Uninstalling " + $ProductId$ + " ..."

if FileExists("%ScriptPath%\delsub.ins")
	comment "Start uninstall sub section"
	Sub "%ScriptPath%\delsub.ins"
endif

if $LicenseRequired$ = "true"
	comment "Licensing required, free license used"
	Sub_free_license
endif

[Sub_free_license]
comment "License management is enabled and will be used"

comment "Trying to free license used for the product"
DefVar $result$
Set $result$ = FreeLicense($LicensePool$)
; If there is an assignment of a license pool to 
; the product, it is possible to use
; Set $result$ = FreeLicense("", $ProductId$)
;
; If there is an assignment of a license pool to 
; a windows software id, it is possible to use
; DefVar $WindowsSoftwareId$
; $WindowsSoftwareId$ = "..."
; set $result$ = FreeLicense("", "", $WindowsSoftwareId$)
----

[[opsi-getting-started-softwintegration-tutorial-create-and-test-script]]
==== Création interactive et test d'un script opsi-winst

Vous pouvez interactivement adapter et tester un script.

Créez un répertoire (par exemple `c:\test`) et copiez les scripts à partir du opsi-template (`setup.ins`, `delsub.ins` et `uninstall.ins`) dans ce répertoire.

Démarrez opsi-winst (`winst32.exe`) par double clic. Si opsi-client-agent est installé sur votre ordinateur, vous trouverez opsi-winst dans le répertoire `C:\program files\opsi.org\opsi-client-agent\opsi-winst`. Si opsi-client-agent n'est pas installé, vous trouverez opsi-winst dans le partage 
`\\<opsiserver\opt_pcbin` dans le dossier `install\opsi-winst\files`.

Après le démarrage de opsi-winst vous verrez la fenêtre suivante:

.opsi-Winst started in interactive mode
image::../images/winst-interactive.png["Screenshot: opsi-Winst started in interactive mode",400]

* 'Select Script' est utilisée pour choisir le script que vous voulez exécuter.
* 'Start' lancera l'exécution du script sélectionné. 
* 'View Log' est utilisé pour lire le fichier journal de la dernière exécution du script.

Sélectionnez le script 'setup.ins' et exécutez-le.

.opsi-winst log view window
image::../images/winst-log-view.png["opsi-winst log view window",400]

* Regardez le fichier journal pour voir comment opsi-winst interprète le script.

* Copiez setup.exe que vous souhaitez installer dans le répertoire où les scripts sont (par exemple `c:\test`).

* Ouvrez le script `setup.ins` avec un éditeur. Vous pouvez utiliser n'importe quel éditeur de texte que vous aimez. Nous suggérons 'jEdit' avec coloration syntaxique pour opsi-winst qui fait partie des produits indispensables OPSI.

.jEdit with a opsi script
image::../images/jedit-with-winst-script.png["jEdit with a opsi script",400]


* Vous pouvez maintenant modifier le script en utilisant l'éditeur. Enregistrez les modifications (garder l'éditeur ouvert)

* Maintenant, passez à opsi-winst et relancez le script. (Vous n'avez pas à sélectionner de nouveau le script. Il suffit d'appuyer sur le bouton 'start').

* Il suffit de regarder le fichier journal pour voir comment le flux du programme change en fonction de vos modifications dans le script.

* De cette façon, bouclant dans les étapes: +
 - Modifier le script et enregistrer +
 - exécuter le script +
 - consulter le fichier journal +
vous êtes capable de développer étape par étape le script jusqu'à ce qu'il s'adaptent à vos besoins.

Vous trouverez dans le prochain chapitre quelques conseils sur des problèmes. Dans le chapitre suivant, sera décrit comment créer un opsi-product à partir de vos scripts et de vos fichiers et comment l'installer sur le serveur OPSI.

[[opsi-getting-started-softwintegration-tutorial-template-details]]
==== Informations et conseils sur les problèmes

[[opsi-getting-started-softwintegration-tutorial-find-switches]]
===== Recherche de commutateurs unattend ou silencieux

Pour une configuration „unattended“ ou „silent” la configuration d'origine va être remplacé par un mode unattended non interactif par des arguments applicables en ligne de commande.

Le problème est de trouver le bon commutateur

.Regardez sur Internet
Avant de commencer à intégrer un nouveau package, ce searit d'abord mieux jeter un oeil à internet si quelqu'un a déjà fait ce travail:

Vous trouverez des scripts opsi-winst prêt à l'emploi distribués par la communauté à: +
http://www.opsi.org/opsi_wiki/WinstScripts

Vous trouverez un ensemble de liens vers des sites avec des collections de commutateur +
http://www.opsi.org/opsi_wiki/SoftwareIntegrationWebLinks

.Recherchez dans le site du producteurs du logiciel
Un grand nombre de fabricants de logiciels sont conscients des besoins de distribution de logiciels "unattended", donc il ya souvent quelques conseils et des instructions dans la documentation du produit ou sur le site des éditeurs de logiciels.

.Rechercher l'outil de configuration du site fabricants
Souvent, les programmes de configuration ne sont pas écrits par les éditeurs de logiciels eux-mêmes. Dans la plupart des cas, ils déploient des produits logiciels dédiés pour la création de programmes d'installation. Ainsi les arguments de ligne de commande pour le paquet résultant souvent sont typiques pour l'outil de création de configuration dont il est basé.

.Vous trouverez sur opsi.org
http://www.opsi.org/opsi_wiki/SoftwareIntegrationWebLinks
+
à la section 'Installer specific switches / Allg. Schalter der Setup Programme' plus de liens web vers des sites qui donnent des conseils sur la façon de détecter le fabricant du programme d'installation.

[[opsi-getting-started-softwintegration-tutorial-winst-commands]]
===== Certaines commandes opsi-winst plus importantes

La referencecard vous donne une brève description des commandes opsi-winst :
http://download.uib.de/opsi4.0/doc/opsi-winst-reference-card.pdf

Tous les détails de la syntaxe sont décrites dans le manuel opsi-winst :
http://download.uib.de/opsi4.0/doc/winstdoc-en.pdf

Voici quelques conseils pour les éléments importants:

.Stringlisten
Les listes de chaînes sont puissantes, spécialement pour examiner la sortie d'autres programmes. Lisez le manuel opsi-winst pour plus de détails.

.ExitWindows
* `ExitWindows /Reboot` +
Redémarrer après que le script est terminé

* `ExitWindows /ImmediateReboot` +
Redémarrer maintenant

* `ExitWindows /ImmediateLogout`
Quitter maintenant opsi-winst

.Product Properties
Pour certains produits, il est important d'avoir les propriétés du produit qui peuvent modifier les spécifications d'installations du client. Comment créer ces propriétés est décrit ci-dessous dans <<opsi-getting-started-softwintegration-create-opsi-package,"Création d'un paquet opsi">>.

Pour évaluer ces propriétés opsi-winst utilise la fonction `GetProductProperty`

[source,winst]
----
if GetProductProperty("example-property", "no") = "yes"
	Files_copy_extra_files
endif
----

[[opsi-getting-started-softwintegration-tutorial-opsiadmin]]
===== Installation avec un utilisateur connecté

Comme point de départ, nous supposons que vous avez fait une installation "unattended" en utilisant un script opsi-winst. L'installation fonctionne bien lorsqu'elle est lancée comme un utilisateur connecté (avec des privilèges administratifs).
Mais avec certains logiciels, vous verrez que quand elle commence à partir du déploiement de logiciels (opsi-client-agent) elle échoue. Une raison possible de cette différence pourrait être que le processus d'installation requiert un environnement utilisateur ou un profil.

Dans le cas d'un paquet MSI l'option 'ALLUSERS=2' pourrait aider.
Exemple:

[source,winst]
----
[Actions]
DefVar $MsiLogFile$
Set $MsiLogFile$ = "c:\tmp\myproduct.log"
winbatch_install_myproduct

[winbatch_install_myproduct]
msiexec /qb /l* $MsiLogFile$ /i "%ScriptPath%\files\myproduct.msi" ALLUSERS=2
----

Une autre possibilité est que l'installation démarre un deuxième processus et s'arrête avant que le deuxième processus est terminé. Donc, du point de vue de opsi-winst la tâche est terminée alors qu'en fait, le deuxième processus travail encore (installation / désinstallation). +
Dans ce cas, vous pouvez utiliser le modificateur +/WaitSeconds <secondes>+ ou
+/WaitForProcessEnding "program.exe" /TimeOutSeconds "<secondes>"+ appelant la section winbatch pour attendre la fin du deuxième processus.

Une autre façon plus complexe pour résoudre le problème est de créer un compte d'utilisateur administratif temporaire et de l'utiliser pour l'installation du programme. Pour une description détaillée sur la façon de faire s'il vous plaît consultez le manuel-opsi-winst au chapitre 8.3 'Script pour l'installation dans le cadre d'un administrateur local' et utilisez le modèle 'opsi-template-with-admin'.

[[opsi-getting-started-softwintegration-tutorial-msi]]
===== Travailler avec les paquets MSI

Avec Windows 2000, Microsoft a lancé son propre concept d'installation basé sur le service Microsoft Installer „MSI“. Entre temps de nombreux programmes d'installation sont compatibles MSI.

Pour être conformes MSI, il doivent fournir un paquet avec des instructions d'installation pour le MSI. Habituellement il s'agit d'un fichier nommé 'product.msi'.

En pratique, le „setup.exe“ d'un produit contient un fichier 'product.msi' et un programme de contrôle supplémentaire pour l'installation. Le programme de contrôle décompresse le 'product.msi' et affiche une fenêtre demandent le démarrage de l'installation. Si cela a été approuvé le programme de contrôle vérifie que MSI est installé et lui passe le 'product.msi'. S'il n'ya pas de MSI approprié, le programme de contrôle commence d'abord l'installation du MSI.

Lorsque vous interrompez l'installation à ce point, vous trouverez souvent des paquets MSI décompressé dans un répertoire temporaire.

Ce paquet peut être utilisé pour une installation "unattended", par exemple, avec la déclaration:
[source,winst]
----
msiexec /i "%ScriptPath%\Product.msi" /qb-! ALLUSERS=2 REBOOT=ReallySuppress
----

[[opsi-getting-started-softwintegration-tutorial-customizing]]
===== Personnalisation après une installation silent/unattended

Après une installation silencieuse réussie un peu plus de personnalisation peut être utile. Opsi-winst est un outil puissant pour faire ce travail. Au début, vous aurez à connaître quels correctifs doivent être appliqués. Par exemple cela pourrait signifier d'analyser les paramètres de registre que sont affectés par les outils de personnalisation graphique.

Vous pouvez utiliser les outils décrits dans <<opsi-getting-started-softwintegration-tutorial-analyse-and-repackage>> plus bas. Plus d'outils peuvent être trouvé ici:

http://www.sysinternals.com/ +
http://www.german-nlite.de/files/guides/regshot/regshot.html

[[opsi-getting-started-softwintegration-tutorial-autoit]]
===== Intégration du programme d'installation avec des réponses automatisées

Un autre moyen rapide d'intégration est de fournir un fichier de réponses automatisées pour le processus d'installation. Pour être plus précis, le fichier de réponses est utilisé par un outil de contrôle, qui attend, pour la configuration à venir, des fenêtres interactives, auxquelles il passe ensuite les entrées, tel que définie dans le fichier de réponses. Comme outil de contrôle, nous recommandons 'AutoIt'. Le programme AutoIt et la documentation vous la trouverez sur le site: http://www.hiddensoft.com/autoit3.

AutoIt fournit un grand nombre de commandes pour contrôler le processus d'installation. Aussi plusieurs états d'erreur peuvent être manipulé (s'ils sont connus à l'avance) dans le script à la section '[ADLIB]'.

Bien qu'il y est un enjeu fondamental dans l'utilisation de AutoIt: +
AutoIt-Script doit fournir des données pour chaque fenêtre, qui pourraient surgir lors de l'installation. Donc, si une fenêtre inattendue surgit, qui n'est pas traitée dans la section [ADLIB], AutoIt ne fournit aucune entrée pour cette fenêtre et l'installation s'arrête à ce moment d'attente pour l'entrée. Cette entrée peut être faite par un utilisateur interactif et ensuite le script peut reprendre et gèrer les fenêtres suivante connues.

Il ya un autre chemin critique dans AutoIt-Installation: +
L'utilisateur peut interférer avec l'installation si la souris et le clavier ne sont pas désactivés. C'est pourquoi nous considérons l'installation 'unattended' ou 'silent' comme une solution plus stable.

Une combinaison des deux pourrait faire un bon travail: +
La configuration 'silent' fait le travail principale et AutoIt-script gère les conditions particulières qui pourraient survenir.

[[opsi-getting-started-softwintegration-tutorial-analyse-and-repackage]]
===== Analyser et reconditionner

Quand un développeur de logiciel construit une configuration pour le déploiement, il connaît généralement au sujet des composantes nécessaires du logiciel qui doit être installé. Mais si quelqu'un a juste obtenu la configuration comme une boîte noire, Il doit d'abord analyser ce qui fait la configuration. Cela peut être faite par le suivi des activités de configuration avec des outils appropriés (par exemple surveillance de tous les fichiers, et tous accès au Registre) ou en comparant les états du système avant et après l'installation.

Pour analyser les états avant/après , il ya beaucoup d'outils. Par exemple
'WinINSTALL LE' qui est disponible en freeware sur: 

http://www.ondemandsoftware.com


[[opsi-getting-started-softwintegration-tutorial-deinstall]]
===== Comment désinstaller des produits

Pour désinstaller un logiciel à partir d'un ordinateur, vous avez besoin d'un script 'uninstall' pour effectuer la suppression. La difficulté fondamentale dans la suppression de logiciels est de distinguer ce qu'exactement doit être enlevée. Pas tous les fichiers fourni avec un logiciel peuvent être supprimé par la suite. Parfois, un paquet est livré avec des modules standard, qui sont également utilisés par d'autres programmes. Souvent, seul le fabricant du logiciel lui-même sait quelles parties doivent être enlevés. La configuration du fabricant pourrait offrir une option "unattended" de désinstallation qui peut être intégrée dans le script de désinstallation de OPSI. Sinon opsi-winst fournit plusieurs commandes pour la suppression des logiciels:

.En utilisant une routine de désinstallation
Si le fabricant de produits offre une option de suppression de logiciels, il doit être vérifié si il peut être exécuté sans surveillance (en mode silencieux). S'il exige une certaine interaction avec l'utilisateur, un autoIt-script combinée avec la routine de désinstallation pourrait faire le travail. La déclaration de désinstallation peut être intégré dans une section [winbatch] de opsi-winst-script:
[source,winst]
----
[WinBatch_start_ThunderbirdUninstall]
"%SystemRoot%\UninstallThunderbird.exe" /ma
----

Lorsque vous utilisez un programme de désinstallation, il devrait toujours être vérifié si tous les fichiers ont été supprimés et que l'ordinateur est toujours dans un état stable.

Les produits qui sont installés par MSI viennent souvent aussi avec une option de désinstallation, qui est généralement le `msiexec.exe` paramètre `/x`. Et le paramètre `/qb-!` est pour le mode "unattended" (sans interaction de l'utilisateur). Donc, c'est la déclaration pour désinstaller sans surveillance:

[source,winst]
----
msiexec.exe /x some.msi /qb-! REBOOT=ReallySuppress
----

Au lieu du nom du package, vous pouvez aussi utiliser le GUID (Global Unique ID), avec `msiexec.exe`. Ce GUID identifie le produit dans le système et peut être trouvé dans le répertoire du registre 
'HKLM\Software\Microsoft\Windows\CurrentVersion\Uninstall'

Une demande en utilisant le GUID ressemble à ceci:
[source,winst]
----
msiexec.exe /x {003C5074-EB37-4A75-AC4B-F5394E08B4DD} /qb-!
----

Si aucune de ces méthodes est disponible ou suffisante, la désinstallation peut se faire par un script opsi-winst comme décrit dans la suite:

.Commandes opsi-winst utiles pour la désinstallation

Si un produit a été installé par des fonctions opsi-winst, ou s'il n'y a pas de routine de désinstallation pour le produit, la désinstallation complète doit être faite par un script opsi-winst. opsi-winst est livré avec des fonctions puissantes de désinstallation. Dans ce chapitre, nous allons avoir un aperçu, pour des informations détaillées se référer au manuel opsi-winst.

La base de la suppression est de supprimer un ou plusieurs fichiers du système de fichiers. Cette commande peut être exécutée à partir d'une section du fichier opsi-winst:
[source,winst]
----
delete -f <file name>
----

ou de supprimer un répertoire, y compris les sous-répertoires:

[source,winst]
----
delete -sf <dir name>\\
----

Le paramètre 'f' signifie 'force' – pour supprimer les fichiers de toute façon, même s'ils sont marqués comme 'read only' – et le paramètre 's' signifie y compris les 'sous-répertoires'. Un fichier ou un répertoire peut être supprimé de tous les profils utilisateur en utilisant l'option '/AllNTUserProfiles' (voir le  manuel-opsi-winst- pour plus de détails).

Les répertoires contenant les fichiers avec l'attribut 'hidden' ou 'system' peuvent être supprimés en utilisant une section 'DosInAnIcon':

[source,winst]
----
[DosInAnIcon_deleteDir]
rmdir /S /Q "<Verzeichnis>"
----

Pour arrêter un processus en cours avant la suppression, utilisez la commande `killtask` avec le nom du processus (regardez le gestionnaire des tâches pour le nom du processus):

[source,winst]
----
KillTask "thunderbird.exe"
----

Si le produit – ou une partie – s'exécute comme un service, vous devrez arrêter le service avant la suppression des fichiers. Une façon de le faire, est de mettre le service à l'etat “inactive“ dans le registre et redémarrer l'ordinateur. Ou d'arrêter le service en utilisant la commande 'net stop', qui n'a pas besoin d'un redémarrage:
[source,winst]
----
net stop <servicename>
----

Aussi la suppression de fichiers DLL nécessite une attention particulière, car les DLL pourraient également être utilisés par d'autres produits. Il n'y a pas de concept général pour leurs manipulation.

Pour supprimer les entrées de registre avec opsi-winst vous pouvez utiliser la commande DeleteVar. Cette commande supprime les entrées de la clé actuellement ouverte:

[source,winst]
----
DeleteVar <VarName>
----

Pour supprimer une clé de registre avec tous les sous-clés et variables de registre, vous pouvez utiliser la commande DeleteKey de opsi-winst :
[source,winst]
----
DeleteKey [HKLM\Software\Macromedia]
----


[[opsi-getting-started-softwintegration-tutorial-64bit]]
===== Les problèmes connus au niveau du support 64 Bits

L'installateur OPSI opsi-winst est un programme 32 bits. Il n'y a pas de problème connu pour l'installation de logiciels 32 bits sur un système 64 bits à l'aide de opsi-winst. Pour l'installation de logiciel 64 bits certaines constantes, comme  '%ProgramFilesDir%' donnent des valeurs erronées.

Les nouvelles versions de opsi-winst ont des commandes spéciales pour traiter ces problèmes. Alors, lisez le manuel opsi-winst (http://download.uib.de/opsi4.0/doc/winstdoc-en.pdf) pour ces problèmes.


[[opsi-getting-started-softwintegration-create-opsi-package]]
=== Création d'un paquet opsi

Dans les fichiers d'installation opsi, das Winst-Skript zur Installation auf den Client und die Metadaten zu einem Paket zusammengefasst, welches zur Installation dieses Softwareproduktes auf einem opsi-server dient.

Die wesentlichen Vorteile dieses Paketformates sind:

* Einfache menügeführte Erstellung mit dem Programm opsi-newprod.

* Ablage aller relevanten Metadaten in einer einfach zu editierenden Datei.

* Optional menügeführtes Auspacken des Paketes mit der Möglichkeit Vorgaben zu ändern.

* Informationen über die im Paket enthaltene Produktversion, Paketversion und eventueller Kundenspezifischer Erweiterungen werden abgespeichert und sind am Paketnamen erkennbar, werden im Installationsverzeichnis abgelegt und im opsi-Configeditor angezeigt. Auf diese Weise wird der Überblick über unterschiedliche Versionen erleichtert (Productlifecycle Management).

* Zur Erstellung und zum Auspacken von Produkten sind keine root-Rechte erforderlich. Es langen hierzu die Rechte der Gruppe `pcpatch`.

Das Paket selber besteht aus einem per Gzip komprimierten cpio Archiv. In diesem Archiv befinden sich zwei Verzeichnisse:

*CLIENT_DATA* +
Hier liegen die Dateien die im opsi-Depot (`/opt/pcbin/install/<productid>`) für die Clients verfügbar sein sollen.

*OPSI* +
In der Datei `control` finden sich die Metadaten des Produkts wie der Name, die Version oder auch Produkt-Abhängigkeiten.
Weiterhin finden sich im Verzeichnis `OPSI` die Skripte `preinst` und `postinst` die vor bzw. nach der Installation
des Produkt-Pakets auf einem {opsi-depotserver} ausgeführt werden.
Hier können Sie, wenn benötigt, entsprechende Erweiterungen unterbringen.

[[opsi-getting-started-softwintegration-create-opsi-package-handling]]
==== Erstellen, Packen und Auspacken eines neuen Produktes

Zum Erstellen eines Produktes müssen Sie sich auf dem Server einloggen
(von Windows aus z.B. per `putty.exe` http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html).

Die wesentlichen Befehle zum Erstellen und Installieren eines opsi-Produktes sind:

* `opsi-newprod`
* `opsi-makeproductfile`
* `opsi-package-manager -i <opsi-product-file>`

Zum Erstellen eines neuen Produktes benötigt man mindestens die Rechte der Gruppe +pcpatch+.

Sie sollten die Produkte in dem Verzeichnis `/home/opsiproducts` erstellen,
welches der Gruppe +pcpatch+ gehört und die Rechte 2770 hat (Setgroupid Bit für Gruppe +pcpatch+ gesetzt),
sowie als Share `opsi_workbench` freigegeben ist.

[[opsi-getting-started-softwintegration-create-opsi-package-newprod]]
===== Erstellen mit opsi-newprod

Zum Erstellen wechselt man in dieses Verzeichnis und ruft `opsi-newprod` auf.
Das Programm fragt daraufhin nach dem Typ des zu Erstellenden Paketes.
Dies ist üblicherweise der Typ +localboot+ für Produkte, die über den '{opsi-client-agent}'/'{opsi-winst}' installiert werden.
Der Typ +netboot+ steht für Produkte, die über das opsi-Linux-Bootimage ausgeführt werdn (wie z.B. die Betriebssystem-Installationen).

.Auswahl des Produkttyps: localboot
image::../images/newprod-localboot.png[Screenshot: Auswahl des Produkttyps: localboot]

Wählen Sie nun mit Tab OK (oder bestätigen mit F12). Nun müssen Sie die wesentlichen Produktdaten eingeben. Am oberen Rand ist hierzu eine Hilfe die Erläutert was die Felder bedeuten.

.Eingabe der Produktinformationen
image::../images/newprod-product-info.png[Screenshot: Eingabe der Produktinformationen]

Product Id:: ist ein eindeutiger Bezeichner für das Produkt in der Regel unabhängig von der Version +
Bitte nur Kleinbuchstaben verwenden, keine Umlaute, keine Leerzeichen, keine Sonderzeichen, '-' ist als Trenner erlaubt.

Product name:: ist der Klartextname des Produkts (Wir empfehlen die Vermeidung von Umlauten, '-' ist erlaubt, keine Leerzeichen)

Description:: ist eine ergänzende Beschreibung zum Produkt, die z.B. im opsi-Configeditor unter `Beschreibung` angezeigt wird.

Advice:: ist eine ergänzende Beschreibung, in der Regel zum Umgang mit dem Produkt, die zu beachten ist und im im opsi-Configeditor unter `Notiz` angezeigt wird.

Product version:: ist die Version der eingepackten Software (max. 32 Zeichen)

Package Version:: ist die Version des Paketes für die Produktversion. Sie dient dazu, um Pakete mit gleicher Produktversion, aber z. B. korrigiertem Winst-Skript zu unterscheiden.

License required:: hat bei localboot Produkten keinen Einfluss. Bei netboot Produkten entscheidet es, ob ein Lizenzkey aus dem Lizenzmanagement geholt wird.

Priority:: beeinflusst die Installationsreihenfolge. Mögliche Werte liegen zwischen 100 (ganz am Anfang) und -100 (ganz am Ende). Existieren auch Produktabhängigkeiten, so beeinflussen diese zusätzlich die Installationsreihenfolge.

.Eingabe der opsi-winst-Skript Namen für unterschiedliche Aktionen
image::../images/newprod-script-names.png[Screenshot: Eingabe der opsi-winst-Skript Namen für unterschiedliche Aktionen]

Nach Eingabe der Produktinformationen werden Sie aufgefordert, die Skripte anzugeben, die Sie für unterschiedliche mögliche Aktionen bereit stellen werden.

Üblicherweise heißt das *+Setup script+* gleich `setup.ins`

Üblicherweise heißt das *+Uninstall script+* gleich uninstall.ins.

Ein *+Update-Script+* dient zur geringfügigen Veränderung einer existierenden grossen Installation. Wird das Produkt auf setup gestellt, so wird nach dem abarbeiten des Setup-Skriptes automatisch auch das Update-Skript ausgeführt.

Ein *+Always-Script+* wird bei jedem aktiv werden des opsi-Clientagenten ausgeführt (z.B. bei jedem Boot)

Ein *+Once-Script+* hat den Folgestatus `not_installed`. Es handelt sich hierbei um einen sehr selten verwendeten Schalter, den Sie ignorieren sollten wenn Sie nicht genau wissen was Sie damit tun wollen.

Ein *+Custom-Script+* verändert weder Folgeaktion noch Folgestatus. Es handelt sich hierbei um einen sehr selten verwendeten Schalter, den Sie ignorieren sollten wenn Sie nicht genau wissen was Sie damit tun wollen.


|=======================
| Typ | Folgestatus | Folgeaktion 
| setup | installed | none
| uninstall | not_installed | none
| update | installed | none
| always | installed | always
| once | not_installed | none
| custom | _unverändert_ | _unverändert_
| User login | _noch nicht implementiert_ | _noch nicht implementiert_
|=======================

Nachdem nun das Produkt selber beschrieben ist, können Sie eine oder mehrere Produktabhängigkeiten definieren. Wollen Sie keine Produktabhängigkeit definieren so geben Sie +No+ ein.

.Eine (weitere) Produktabhängigkeit definieren: Ja / Nein
image::../images/newprod-product-new-dependency.png["Screenshot: Eine (weitere) Produktabhängigkeit definieren: Ja / Nein",width=400]

Zur Erstellung einer Produktabhängigkeit geben Sie die folgenden Daten an. Beachten Sie auch die Hilfe im oberen Teil des Fensters:

.Eingabe der Daten zur Erstellung einer Produktabhängigkeit]
image::../images/newprod-product-dependency.png["Screenshot: Eingabe der Daten zur Erstellung einer Produktabhängigkeit",width=400]

Dependency for Action:: Für welche Aktion des Produktes welches Sie gerade erstellen soll die Abhängigkeit gelten (setup, deinstall,...)

Required product id:: Productid (Bezeichner) des Produkts zu dem eine Abhängigkeit besteht.

Required product class id:: wird zur Zeit noch nicht verwendet. Leer lassen ! Bezeichner der Produktklasse, zu der eine Abhängigkeit besteht.

Required  action:: Sie können entweder eine Aktion anfordern oder (siehe unten) einen Status. Aktionen können z.B. sein : setup, uninstall, update,...

Required installation status:: Status den das Produkt, zu dem eine Abhängigkeit besteht, haben soll (typischerweise +installed+). Liegt ein anderer Status vor, so wird das Produkt auf +setup+ gestellt.

Requirement type:: Installationsreihenfolge. Wenn das Produkt zu dem eine Abhängigkeit besteht installiert sein muss bevor mit der Installation des aktuellen Produkts begonnen werden kann dann ist dies +before+. Muss es nach dem aktuellen Produkt installiert werden so ist dies +after+. Ist die Reihenfolge egal so muss hier nichts eingetragen werden.

*Hinweis:*

Leider gibt es derzeit nicht wirklich einen generischen Mechanismus für Deinstallations-Produktabhängigkeiten. Zuverlässig ist der ProductDependency-Mechanismus nur für action: setup und die hierbei zu triggernden (before- oder after-)  setup Aktionen und installed Status. Ein requiredAction: uninstall führt leider definitiv zu Fehlern.

Nachdem eine Produktabhängigkeit definiert ist, werden Sie wieder gefragt ob Sie eine (weitere) Produktabhängigkeit definieren wollen. Wenn ja wiederholt sich der Vorgang; wenn nein, so werden Sie gefragt ob sie eine Produkteigenschaft (Zusatzschalter) definieren wollen mit dem Sie die Installation des Produktes modifizieren können.

*Noch ein Hinweis:*

Die tatsächliche Installationsreihenfolge ermittelt sich aus einer Kombination von Produktabhängigkeiten und Produktpriorisierung. Details hierzu finden Sie im opsi-Handbuch im Kapitel 'Beeinflussung der Installationsreihenfolge durch Prioritäten und Produktabhängigkeiten'

.Eine (weitere) Produkteigenschaft definieren
image::../images/newprod-new-property.png["Screenshot: Eine (weitere) Produkteigenschaft definieren",width=400]

Antworten Sie ja, so müssen Sie die Produkteigenschaft beschreiben:

Die Produkteigenschaft wird clientspezifisch gespeichert und besteht aus einem Namen (key) der verschiedene Werte (Values) zugeordnet bekommen kann und die dann vom Winst-Skript aus abgefragt werden können. 

Zunächst müssen Sie Angeben ob es sich um ein Textwert (unicode) oder um einen logische Wert also wahr/falsch (boolean) handelt. Wenn Sie unsicher sind, wählen Sie +unicode+.

.Datentyp der Produkteigenschaft wählen
image::../images/newprod-property-type.png["Screenshot: Datentyp der Produkteigenschaft wählen",width=400]

Weiterhin wird eine Beschreibung (Product description) benötigt, die beim Auspacken des Produkts und im opsi-Configedit als Hilfe angezeigt wird. Weiterhin müssen Sie, durch Komma getrennt, alle Werte angeben, die der Key annehmen darf. Wird hier nichts angegeben, so kann später im opsi-Configeditor ein beliebiger Wert eingegeben werden. Über `Editable` (true/false) können Sie entscheiden, ob neben der vorgegebenen Liste auch andere Werte eingegeben werden dürfen.

.Beschreibung der Produkteigenschaft
image::../images/newprod-property-desc.png["Screenshot: Beschreibung der Produkteigenschaft",width=400]

Im Folgefenster müssen Sie festlegen, was der Defaultwert dieser Produkteigenschaft ist.

.Festlegung des Defaultwertes der Produkteigenschaft
image::../images/newprod-property-default.png["Screenshot: Festlegung des Defaultwertes der Produkteigenschaft",width=400]

Wenn Sie als Typ 'boolean' wählen, so reduziert sich die Beschreibung auf 'Property name' und 'Property description'.

.Beschreibung eines boolschen Properties
image::../images/newprod-property-boolean.png["Screenshot: Beschreibung eines boolschen Properties",width=400]

Nachdem eine Produkteigenschaft definiert ist, werden Sie wieder gefragt, ob Sie eine (weitere) Produkteigenschaft definieren wollen. Wenn ja, wiederholt sich der Vorgang; wenn nein, so werden Sie als nächstes nach Name und email-Adresse gefragt. Diese werden im Changelog des Paketes verwendet und müssen angegeben werden.

.Eingabe der Maintainer Daten
image::../images/newprod-maintainer.png["Screenshot: Eingabe der Maintainer Daten",width=400]

Danach ist das Grundgerüst des Produktes fertig gestellt.

Mit Hilfe des `ls` Befehls finden Sie die oben beschriebene Verzeichnis Struktur. Wechseln Sie in den OPSI-Ordner und setzen Sie erneut den `ls` Befehl ab. Hier befindet sich unter anderem die 'control'-Datei, welche die eben eingegebenen Daten enthält und Ihnen auch die Möglichkeit bietet, diese im Editor zu kontrollieren oder zu modifizieren.

.Beispiel einer 'control' Datei

[source,configfile]
----
[Package]
version: 1
depends: 
incremental: False

[Product]
type: localboot
id: mytest
name: My Test
description: A test product
advice: 
version: 3.14
priority: 10
licenseRequired: False
productClasses: 
setupScript: setup.ins
uninstallScript: 
updateScript: 
alwaysScript: 
onceScript: 
customScript: 
userLoginScript: 

[ProductDependency]
action: setup
requiredProduct: javavm
requiredStatus: installed

[ProductProperty]
type: unicode
name: mytextprop
multivalue: False
editable: True
description: hint
values: ["off", "on"]
default: ["off"]

[ProductProperty]
type: bool
name: myboolprop
description: yes or no
default: False

[Changelog]
mytest (3.14-1) testing; urgency=low

  * Initial package

 -- jane doe <j.doe@opsi.org>  Mi, 14 Jul 2010 12:47:53 +0000
----

Als nächstes müssen Sie Ihr für das Produkt erstellte Winst-Skript und die entsprechenden Dateien nach 'CLIENT_DATA' kopieren. 

Wenn Sie z.B. Ihr erstelltes Script unter 'c:\test' liegen haben, so mounten Sie '\\<opsiserver\opsi_workbench' z.B. nach 'w:' und kopieren den Inhalt von 'c:\test' in das Verzeichnis 'CLIENT_DATA'.

[[opsi-getting-started-softwintegration-create-opsi-package-makeproductfile]]
===== Packen mit opsi-makeproductfile

Danach können Sie das Produkt packen. Gehen Sie dazu in das Stammverzeichnis des Produkts und rufen Sie `opsi-makeproductfile` auf. Es wird nun das Produkt gepackt.

opsi-makeproductfile kennt einige Optionen die sein Verhalten modifizieren:

[source,prompt]
----
#  opsi-makeproductfile --help

Usage: opsi-makeproductfile [-h] [-v|-q] [-F format] [-l log-level] [-i|-c custom name] [-I required version] [-t temp dir] [source directory]
Provides an opsi package from a package source directory.
If no source directory is supplied, the current directory will be used.
Options:
   -v          verbose
   -q          quiet
   -l          log-level 0..9
   -n          do not compress
   -F          archive format [tar|cpio], default: cpio
   -h          follow symlinks
   -I          incremental package
   -i          custom name (add custom files)
   -c          custom name (custom only)
   -C          compatibility mode (opsi 3)
   -t          temp dir
----

Wichtig ist die Option `-C` (compatibility mode opsi 3), die Sie verwenden sollten, um auf einem opsi 4 Server ein Paket zu packen, dass Sie auch auf einem opsi 3 Server einspielen können.

Wenn schon ein Paket dieser Version existiert, so zeigt opsi-makeproductfile eine Rückfrage:

[source,prompt]
----
Package file '/home/opsiproducts/mytest/mytest_3.14-1.opsi' already exists.
Press <O> to overwrite, <C> to abort or <N> to specify a new version:
----

Mit `o` wählen Sie überschreiben, mit `c` brechen Sie den Vorgang ab und mit `n` können Sie wählen, dass Sie nach einer neuen Product bzw. Package Version gefragt werden.

Das gepackte Paket können Sie mit `opsi-package-manager -i <paketname>` auf dem Server installieren.

Weitere Informationen zum opsi-packet-manager siehe opsi-Handbuch.

[[opsi-getting-started-more-info]]
== Weitere Informationen

Das opsi-Handbuch (http://download.uib.de/opsi4.0/doc/opsi-handbuch-v40-de.pdf) enthält eine Fülle von weiteren Informationen, die für den produktiven Betrieb wichtig sind.

Wenn Sie dort nicht fündig werden oder Hilfe benötigen, wenden Sie sich an +
https://forum.opsi.org 

Für produktive Installationen empfehlen wir professionelle Unterstützung durch uib im Rahmen eines Pflege- und Supportvertrages:+
http://uib.de/www/opsi/service_support/support/index.html 


